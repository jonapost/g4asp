<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>defs.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Cast/</path>
    <filename>Cast_2defs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE</name>
      <anchorfile>Cast_2defs_8h.html</anchorfile>
      <anchor>ca8570fb706c81df371b7f9bc454ae03</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_BUGREPORT</name>
      <anchorfile>Cast_2defs_8h.html</anchorfile>
      <anchor>1d1d2d7f8d2f95b376954d649ab03233</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_NAME</name>
      <anchorfile>Cast_2defs_8h.html</anchorfile>
      <anchor>1c0439e4355794c09b64274849eb0279</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_STRING</name>
      <anchorfile>Cast_2defs_8h.html</anchorfile>
      <anchor>c73e6f903c16eca7710f92e36e1c6fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_TARNAME</name>
      <anchorfile>Cast_2defs_8h.html</anchorfile>
      <anchor>f415af6bfede0e8d5453708afe68651c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_VERSION</name>
      <anchorfile>Cast_2defs_8h.html</anchorfile>
      <anchor>a326a05d5e30f9e9a4bb0b4469d5d0c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VERSION</name>
      <anchorfile>Cast_2defs_8h.html</anchorfile>
      <anchor>1c6d5de492ac61ad29aec7aa9a436bbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>defs.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Evaluator/</path>
    <filename>Evaluator_2defs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE</name>
      <anchorfile>Evaluator_2defs_8h.html</anchorfile>
      <anchor>ca8570fb706c81df371b7f9bc454ae03</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_BUGREPORT</name>
      <anchorfile>Evaluator_2defs_8h.html</anchorfile>
      <anchor>1d1d2d7f8d2f95b376954d649ab03233</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_NAME</name>
      <anchorfile>Evaluator_2defs_8h.html</anchorfile>
      <anchor>1c0439e4355794c09b64274849eb0279</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_STRING</name>
      <anchorfile>Evaluator_2defs_8h.html</anchorfile>
      <anchor>c73e6f903c16eca7710f92e36e1c6fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_TARNAME</name>
      <anchorfile>Evaluator_2defs_8h.html</anchorfile>
      <anchor>f415af6bfede0e8d5453708afe68651c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_VERSION</name>
      <anchorfile>Evaluator_2defs_8h.html</anchorfile>
      <anchor>a326a05d5e30f9e9a4bb0b4469d5d0c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VERSION</name>
      <anchorfile>Evaluator_2defs_8h.html</anchorfile>
      <anchor>1c6d5de492ac61ad29aec7aa9a436bbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>defs.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Exceptions/</path>
    <filename>Exceptions_2defs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE</name>
      <anchorfile>Exceptions_2defs_8h.html</anchorfile>
      <anchor>ca8570fb706c81df371b7f9bc454ae03</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_BUGREPORT</name>
      <anchorfile>Exceptions_2defs_8h.html</anchorfile>
      <anchor>1d1d2d7f8d2f95b376954d649ab03233</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_NAME</name>
      <anchorfile>Exceptions_2defs_8h.html</anchorfile>
      <anchor>1c0439e4355794c09b64274849eb0279</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_STRING</name>
      <anchorfile>Exceptions_2defs_8h.html</anchorfile>
      <anchor>c73e6f903c16eca7710f92e36e1c6fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_TARNAME</name>
      <anchorfile>Exceptions_2defs_8h.html</anchorfile>
      <anchor>f415af6bfede0e8d5453708afe68651c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_VERSION</name>
      <anchorfile>Exceptions_2defs_8h.html</anchorfile>
      <anchor>a326a05d5e30f9e9a4bb0b4469d5d0c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VERSION</name>
      <anchorfile>Exceptions_2defs_8h.html</anchorfile>
      <anchor>1c6d5de492ac61ad29aec7aa9a436bbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>defs.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>GenericFunctions_2defs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE</name>
      <anchorfile>GenericFunctions_2defs_8h.html</anchorfile>
      <anchor>ca8570fb706c81df371b7f9bc454ae03</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_BUGREPORT</name>
      <anchorfile>GenericFunctions_2defs_8h.html</anchorfile>
      <anchor>1d1d2d7f8d2f95b376954d649ab03233</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_NAME</name>
      <anchorfile>GenericFunctions_2defs_8h.html</anchorfile>
      <anchor>1c0439e4355794c09b64274849eb0279</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_STRING</name>
      <anchorfile>GenericFunctions_2defs_8h.html</anchorfile>
      <anchor>c73e6f903c16eca7710f92e36e1c6fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_TARNAME</name>
      <anchorfile>GenericFunctions_2defs_8h.html</anchorfile>
      <anchor>f415af6bfede0e8d5453708afe68651c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_VERSION</name>
      <anchorfile>GenericFunctions_2defs_8h.html</anchorfile>
      <anchor>a326a05d5e30f9e9a4bb0b4469d5d0c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VERSION</name>
      <anchorfile>GenericFunctions_2defs_8h.html</anchorfile>
      <anchor>1c6d5de492ac61ad29aec7aa9a436bbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>defs.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Geometry/</path>
    <filename>Geometry_2defs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE</name>
      <anchorfile>Geometry_2defs_8h.html</anchorfile>
      <anchor>ca8570fb706c81df371b7f9bc454ae03</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_BUGREPORT</name>
      <anchorfile>Geometry_2defs_8h.html</anchorfile>
      <anchor>1d1d2d7f8d2f95b376954d649ab03233</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_NAME</name>
      <anchorfile>Geometry_2defs_8h.html</anchorfile>
      <anchor>1c0439e4355794c09b64274849eb0279</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_STRING</name>
      <anchorfile>Geometry_2defs_8h.html</anchorfile>
      <anchor>c73e6f903c16eca7710f92e36e1c6fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_TARNAME</name>
      <anchorfile>Geometry_2defs_8h.html</anchorfile>
      <anchor>f415af6bfede0e8d5453708afe68651c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_VERSION</name>
      <anchorfile>Geometry_2defs_8h.html</anchorfile>
      <anchor>a326a05d5e30f9e9a4bb0b4469d5d0c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VERSION</name>
      <anchorfile>Geometry_2defs_8h.html</anchorfile>
      <anchor>1c6d5de492ac61ad29aec7aa9a436bbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>defs.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Matrix/</path>
    <filename>Matrix_2defs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE</name>
      <anchorfile>Matrix_2defs_8h.html</anchorfile>
      <anchor>ca8570fb706c81df371b7f9bc454ae03</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_BUGREPORT</name>
      <anchorfile>Matrix_2defs_8h.html</anchorfile>
      <anchor>1d1d2d7f8d2f95b376954d649ab03233</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_NAME</name>
      <anchorfile>Matrix_2defs_8h.html</anchorfile>
      <anchor>1c0439e4355794c09b64274849eb0279</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_STRING</name>
      <anchorfile>Matrix_2defs_8h.html</anchorfile>
      <anchor>c73e6f903c16eca7710f92e36e1c6fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_TARNAME</name>
      <anchorfile>Matrix_2defs_8h.html</anchorfile>
      <anchor>f415af6bfede0e8d5453708afe68651c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_VERSION</name>
      <anchorfile>Matrix_2defs_8h.html</anchorfile>
      <anchor>a326a05d5e30f9e9a4bb0b4469d5d0c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VERSION</name>
      <anchorfile>Matrix_2defs_8h.html</anchorfile>
      <anchor>1c6d5de492ac61ad29aec7aa9a436bbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>defs.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>Random_2defs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_DRAND48</name>
      <anchorfile>Random_2defs_8h.html</anchorfile>
      <anchor>3651a5e9991051d06e6ea32dbfb5868f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE</name>
      <anchorfile>Random_2defs_8h.html</anchorfile>
      <anchor>ca8570fb706c81df371b7f9bc454ae03</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_BUGREPORT</name>
      <anchorfile>Random_2defs_8h.html</anchorfile>
      <anchor>1d1d2d7f8d2f95b376954d649ab03233</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_NAME</name>
      <anchorfile>Random_2defs_8h.html</anchorfile>
      <anchor>1c0439e4355794c09b64274849eb0279</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_STRING</name>
      <anchorfile>Random_2defs_8h.html</anchorfile>
      <anchor>c73e6f903c16eca7710f92e36e1c6fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_TARNAME</name>
      <anchorfile>Random_2defs_8h.html</anchorfile>
      <anchor>f415af6bfede0e8d5453708afe68651c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_VERSION</name>
      <anchorfile>Random_2defs_8h.html</anchorfile>
      <anchor>a326a05d5e30f9e9a4bb0b4469d5d0c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VERSION</name>
      <anchorfile>Random_2defs_8h.html</anchorfile>
      <anchor>1c6d5de492ac61ad29aec7aa9a436bbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>defs.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/RandomObjects/</path>
    <filename>RandomObjects_2defs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE</name>
      <anchorfile>RandomObjects_2defs_8h.html</anchorfile>
      <anchor>ca8570fb706c81df371b7f9bc454ae03</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_BUGREPORT</name>
      <anchorfile>RandomObjects_2defs_8h.html</anchorfile>
      <anchor>1d1d2d7f8d2f95b376954d649ab03233</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_NAME</name>
      <anchorfile>RandomObjects_2defs_8h.html</anchorfile>
      <anchor>1c0439e4355794c09b64274849eb0279</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_STRING</name>
      <anchorfile>RandomObjects_2defs_8h.html</anchorfile>
      <anchor>c73e6f903c16eca7710f92e36e1c6fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_TARNAME</name>
      <anchorfile>RandomObjects_2defs_8h.html</anchorfile>
      <anchor>f415af6bfede0e8d5453708afe68651c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_VERSION</name>
      <anchorfile>RandomObjects_2defs_8h.html</anchorfile>
      <anchor>a326a05d5e30f9e9a4bb0b4469d5d0c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VERSION</name>
      <anchorfile>RandomObjects_2defs_8h.html</anchorfile>
      <anchor>1c6d5de492ac61ad29aec7aa9a436bbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>defs.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/RefCount/</path>
    <filename>RefCount_2defs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE</name>
      <anchorfile>RefCount_2defs_8h.html</anchorfile>
      <anchor>ca8570fb706c81df371b7f9bc454ae03</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_BUGREPORT</name>
      <anchorfile>RefCount_2defs_8h.html</anchorfile>
      <anchor>1d1d2d7f8d2f95b376954d649ab03233</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_NAME</name>
      <anchorfile>RefCount_2defs_8h.html</anchorfile>
      <anchor>1c0439e4355794c09b64274849eb0279</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_STRING</name>
      <anchorfile>RefCount_2defs_8h.html</anchorfile>
      <anchor>c73e6f903c16eca7710f92e36e1c6fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_TARNAME</name>
      <anchorfile>RefCount_2defs_8h.html</anchorfile>
      <anchor>f415af6bfede0e8d5453708afe68651c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_VERSION</name>
      <anchorfile>RefCount_2defs_8h.html</anchorfile>
      <anchor>a326a05d5e30f9e9a4bb0b4469d5d0c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VERSION</name>
      <anchorfile>RefCount_2defs_8h.html</anchorfile>
      <anchor>1c6d5de492ac61ad29aec7aa9a436bbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>defs.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Units/</path>
    <filename>Units_2defs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE</name>
      <anchorfile>Units_2defs_8h.html</anchorfile>
      <anchor>ca8570fb706c81df371b7f9bc454ae03</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_BUGREPORT</name>
      <anchorfile>Units_2defs_8h.html</anchorfile>
      <anchor>1d1d2d7f8d2f95b376954d649ab03233</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_NAME</name>
      <anchorfile>Units_2defs_8h.html</anchorfile>
      <anchor>1c0439e4355794c09b64274849eb0279</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_STRING</name>
      <anchorfile>Units_2defs_8h.html</anchorfile>
      <anchor>c73e6f903c16eca7710f92e36e1c6fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_TARNAME</name>
      <anchorfile>Units_2defs_8h.html</anchorfile>
      <anchor>f415af6bfede0e8d5453708afe68651c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_VERSION</name>
      <anchorfile>Units_2defs_8h.html</anchorfile>
      <anchor>a326a05d5e30f9e9a4bb0b4469d5d0c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VERSION</name>
      <anchorfile>Units_2defs_8h.html</anchorfile>
      <anchor>1c6d5de492ac61ad29aec7aa9a436bbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>defs.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>Vector_2defs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE</name>
      <anchorfile>Vector_2defs_8h.html</anchorfile>
      <anchor>ca8570fb706c81df371b7f9bc454ae03</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_BUGREPORT</name>
      <anchorfile>Vector_2defs_8h.html</anchorfile>
      <anchor>1d1d2d7f8d2f95b376954d649ab03233</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_NAME</name>
      <anchorfile>Vector_2defs_8h.html</anchorfile>
      <anchor>1c0439e4355794c09b64274849eb0279</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_STRING</name>
      <anchorfile>Vector_2defs_8h.html</anchorfile>
      <anchor>c73e6f903c16eca7710f92e36e1c6fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_TARNAME</name>
      <anchorfile>Vector_2defs_8h.html</anchorfile>
      <anchor>f415af6bfede0e8d5453708afe68651c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKAGE_VERSION</name>
      <anchorfile>Vector_2defs_8h.html</anchorfile>
      <anchor>a326a05d5e30f9e9a4bb0b4469d5d0c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VERSION</name>
      <anchorfile>Vector_2defs_8h.html</anchorfile>
      <anchor>1c6d5de492ac61ad29aec7aa9a436bbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>itos.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Cast/</path>
    <filename>itos_8h</filename>
    <member kind="function">
      <type>std::string</type>
      <name>itos</name>
      <anchorfile>itos_8h.html</anchorfile>
      <anchor>0612b9c256363c479b7ceec9a5b429a4</anchor>
      <arglist>(long i)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClhepVersion.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/</path>
    <filename>ClhepVersion_8h</filename>
    <namespace>CLHEP</namespace>
    <class kind="struct">CLHEP::Version</class>
    <member kind="define">
      <type>#define</type>
      <name>CLHEP_VERSION_H</name>
      <anchorfile>ClhepVersion_8h.html</anchorfile>
      <anchor>ddff4ab35088efde6e1ae59a925eb677</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Evaluator.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Evaluator/</path>
    <filename>Evaluator_8h</filename>
    <namespace>HepTool</namespace>
    <class kind="class">HepTool::Evaluator</class>
  </compound>
  <compound kind="file">
    <name>ZMerrno.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Exceptions/</path>
    <filename>ZMerrno_8h</filename>
    <includes id="ZMerrno_8icc" name="ZMerrno.icc" local="yes" imported="no">CLHEP/Exceptions/ZMerrno.icc</includes>
    <namespace>zmex</namespace>
    <class kind="class">zmex::ZMerrnoList</class>
    <member kind="define">
      <type>#define</type>
      <name>ZMERRNO_ICC</name>
      <anchorfile>ZMerrno_8h.html</anchorfile>
      <anchor>9dc90b792e91c3625208d88f503493e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ZMerrnoList</type>
      <name>ZMerrno</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>ffa2a326759c8145064a23a5607ff03e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ZMerrno.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Exceptions/</path>
    <filename>ZMerrno_8icc</filename>
    <namespace>zmex</namespace>
  </compound>
  <compound kind="file">
    <name>ZMexAction.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Exceptions/</path>
    <filename>ZMexAction_8h</filename>
    <namespace>zmex</namespace>
    <member kind="enumeration">
      <name>ZMexAction</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>7ffa53f1ddd7416b0eaed75825b27004</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexThrowIt</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>7ffa53f1ddd7416b0eaed75825b27004afc1b2e13467117863989f5eb9c38e2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexIgnoreIt</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>7ffa53f1ddd7416b0eaed75825b27004278a3886bde6bde38a66165beaa2774f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexHANDLEVIAPARENT</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>7ffa53f1ddd7416b0eaed75825b27004bdd319bd2639839a1c3110c825ca2d6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ZMexception.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Exceptions/</path>
    <filename>ZMexception_8h</filename>
    <includes id="Exceptions_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Exceptions/defs.h</includes>
    <includes id="ZMexSeverity_8h" name="ZMexSeverity.h" local="yes" imported="no">CLHEP/Exceptions/ZMexSeverity.h</includes>
    <includes id="ZMexLogResult_8h" name="ZMexLogResult.h" local="yes" imported="no">CLHEP/Exceptions/ZMexLogResult.h</includes>
    <includes id="ZMexAction_8h" name="ZMexAction.h" local="yes" imported="no">CLHEP/Exceptions/ZMexAction.h</includes>
    <includes id="ZMexClassInfo_8h" name="ZMexClassInfo.h" local="yes" imported="no">CLHEP/Exceptions/ZMexClassInfo.h</includes>
    <includes id="ZMexception_8icc" name="ZMexception.icc" local="yes" imported="no">CLHEP/Exceptions/ZMexception.icc</includes>
    <namespace>zmex</namespace>
    <class kind="class">zmex::ZMexception</class>
    <member kind="define">
      <type>#define</type>
      <name>ZMEX</name>
      <anchorfile>ZMexception_8h.html</anchorfile>
      <anchor>6cceb34838a13228ed2f56e4eb9afcf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZMexClassStaticMethods</name>
      <anchorfile>ZMexception_8h.html</anchorfile>
      <anchor>568bff99779d691cbf76a2d7a3fc096b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZMexVirtualMethods</name>
      <anchorfile>ZMexception_8h.html</anchorfile>
      <anchor>d7713eaf071f28bc0129066ef0c27d30</anchor>
      <arglist>(Parent, Class)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZMexStandardContents</name>
      <anchorfile>ZMexception_8h.html</anchorfile>
      <anchor>a01900e5f8236704b34619ebf02b732a</anchor>
      <arglist>(Parent, Class)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZMexStandardDefinition</name>
      <anchorfile>ZMexception_8h.html</anchorfile>
      <anchor>6918de5c0ef473a0ea832ef20103036c</anchor>
      <arglist>(Parent, Class)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZMEXCEPTION_ICC</name>
      <anchorfile>ZMexception_8h.html</anchorfile>
      <anchor>5ecd356253ceb089579e15ac6a97c9f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ZMexHandler &amp;</type>
      <name>ZMhandler</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>e1a9c2168e1b0a4b5756920a2c87f283</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ZMexLogger &amp;</type>
      <name>ZMlogger</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>c26ce407675cf3a608c1a8441e358500</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ZMexUserActivity</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>ee0fe9faa6abeeba98953014a69baff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ZMexUserNumericalTag</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>180f78c1101ee83e0d77e49cd3988091</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ZMexception.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Exceptions/</path>
    <filename>ZMexception_8icc</filename>
    <namespace>zmex</namespace>
  </compound>
  <compound kind="file">
    <name>ZMexClassInfo.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Exceptions/</path>
    <filename>ZMexClassInfo_8h</filename>
    <includes id="ZMexHandler_8h" name="ZMexHandler.h" local="yes" imported="no">CLHEP/Exceptions/ZMexHandler.h</includes>
    <includes id="ZMexLogger_8h" name="ZMexLogger.h" local="yes" imported="no">CLHEP/Exceptions/ZMexLogger.h</includes>
    <includes id="ZMexClassInfo_8icc" name="ZMexClassInfo.icc" local="yes" imported="no">CLHEP/Exceptions/ZMexClassInfo.icc</includes>
    <namespace>zmex</namespace>
    <class kind="class">zmex::ZMexClassInfo</class>
    <member kind="define">
      <type>#define</type>
      <name>ZMEXCLASSINFO_ICC</name>
      <anchorfile>ZMexClassInfo_8h.html</anchorfile>
      <anchor>5ae96f07665ff0fbcb44a3e2f8b28a23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ZMexClassInfo.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Exceptions/</path>
    <filename>ZMexClassInfo_8icc</filename>
    <namespace>zmex</namespace>
  </compound>
  <compound kind="file">
    <name>ZMexHandler.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Exceptions/</path>
    <filename>ZMexHandler_8h</filename>
    <includes id="ZMhandleTo_8h" name="ZMhandleTo.h" local="yes" imported="no">CLHEP/RefCount/ZMhandleTo.h</includes>
    <includes id="ZMexHandler_8icc" name="ZMexHandler.icc" local="yes" imported="no">CLHEP/Exceptions/ZMexHandler.icc</includes>
    <includes id="ZMexSeverity_8h" name="ZMexSeverity.h" local="yes" imported="no">CLHEP/Exceptions/ZMexSeverity.h</includes>
    <includes id="ZMexAction_8h" name="ZMexAction.h" local="yes" imported="no">CLHEP/Exceptions/ZMexAction.h</includes>
    <namespace>zmex</namespace>
    <class kind="class">zmex::ZMexHandlerBehavior</class>
    <class kind="class">zmex::ZMexHandler</class>
    <class kind="class">zmex::ZMexThrowAlways</class>
    <class kind="class">zmex::ZMexThrowErrors</class>
    <class kind="class">zmex::ZMexIgnoreAlways</class>
    <class kind="class">zmex::ZMexIgnoreNextN</class>
    <class kind="class">zmex::ZMexHandleViaParent</class>
    <member kind="define">
      <type>#define</type>
      <name>ZMEXHANDLER_ICC</name>
      <anchorfile>ZMexHandler_8h.html</anchorfile>
      <anchor>8e6b86f9b48ec0e07f8df31ca38694ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ZMexHandler.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Exceptions/</path>
    <filename>ZMexHandler_8icc</filename>
    <namespace>zmex</namespace>
  </compound>
  <compound kind="file">
    <name>ZMexLogger.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Exceptions/</path>
    <filename>ZMexLogger_8h</filename>
    <includes id="ZMexLogResult_8h" name="ZMexLogResult.h" local="yes" imported="no">CLHEP/Exceptions/ZMexLogResult.h</includes>
    <includes id="ZMhandleTo_8h" name="ZMhandleTo.h" local="yes" imported="no">CLHEP/RefCount/ZMhandleTo.h</includes>
    <namespace>zmex</namespace>
    <class kind="class">zmex::ZMexLogBehavior</class>
    <class kind="class">zmex::ZMexLogNever</class>
    <class kind="class">zmex::ZMexLogAlways</class>
    <class kind="class">zmex::ZMexLogTwice</class>
    <class kind="class">zmex::ZMexLogViaParent</class>
    <class kind="class">zmex::ZMexValidationStyle</class>
    <class kind="class">zmex::ZMexLogger</class>
  </compound>
  <compound kind="file">
    <name>ZMexLogResult.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Exceptions/</path>
    <filename>ZMexLogResult_8h</filename>
    <namespace>zmex</namespace>
    <member kind="enumeration">
      <name>ZMexLogResult</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>b589eb5b24de52c1b39fef06d2256c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexLOGGED</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>b589eb5b24de52c1b39fef06d2256c22f41bea5b22449f917cf69fba3a23e64b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexNOTLOGGED</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>b589eb5b24de52c1b39fef06d2256c2247154f02e398badebf4e6118475c6d4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexLOGVIAPARENT</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>b589eb5b24de52c1b39fef06d2256c2200f79940ee8c99312d9b5094171d9727</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ZMexSeverity.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Exceptions/</path>
    <filename>ZMexSeverity_8h</filename>
    <namespace>zmex</namespace>
    <member kind="enumeration">
      <name>ZMexSeverity</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>962b2e3a33b5114dcdede0eb63f211b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexNORMAL</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>962b2e3a33b5114dcdede0eb63f211b0ad79366a9ad192420af9a103a097d1fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexINFO</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>962b2e3a33b5114dcdede0eb63f211b0b52aabbea29b87424973889731b47f82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexWARNING</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>962b2e3a33b5114dcdede0eb63f211b00fcc9ef7edf1651f411751beae5c6cd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexERROR</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>962b2e3a33b5114dcdede0eb63f211b095619fd2401760e4177f0e9af9f176e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexSEVERE</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>962b2e3a33b5114dcdede0eb63f211b08609088dcc8dd05280659836b9582482</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexFATAL</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>962b2e3a33b5114dcdede0eb63f211b0b24e544cb52135a0af2b4dfb28505d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexPROBLEM</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>962b2e3a33b5114dcdede0eb63f211b083533acd10e38acf4cdec646302dce18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexSEVERITYenumLAST</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>962b2e3a33b5114dcdede0eb63f211b05dbb070d2d989fffc077dece17fcc3a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>ZMexSeverityName</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>6d2d89e726154f691c44017381a4c4f8</anchor>
      <arglist>[ZMexSEVERITYenumLAST]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>ZMexSeverityLetter</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>80873e2d6e5bc6cfc3e404ddb44f2e90</anchor>
      <arglist>[ZMexSEVERITYenumLAST]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ZMexSeverityLimit</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>15ad8bfb3ed7cdb22dfb1d5de31bd283</anchor>
      <arglist>[ZMexSEVERITYenumLAST]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ZMthrow.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Exceptions/</path>
    <filename>ZMthrow_8h</filename>
    <includes id="ZMexAction_8h" name="ZMexAction.h" local="yes" imported="no">CLHEP/Exceptions/ZMexAction.h</includes>
    <namespace>zmex</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ZMthrow_from</name>
      <anchorfile>ZMthrow_8h.html</anchorfile>
      <anchor>f4343058486363acf64d7b3a5034d0bd</anchor>
      <arglist>(userExcept, line, file)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZMthrow</name>
      <anchorfile>ZMthrow_8h.html</anchorfile>
      <anchor>806458fe6d9ddbb35eccdd08d63a34d3</anchor>
      <arglist>(userExcept)</arglist>
    </member>
    <member kind="function">
      <type>ZMexAction</type>
      <name>ZMthrow_</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>da9a002281622a2dd02de08cdba3699c</anchor>
      <arglist>(const ZMexception &amp;userException, int lineNum, const char fileName[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Abs.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>Abs_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::Abs</class>
    <member kind="define">
      <type>#define</type>
      <name>Abs_h</name>
      <anchorfile>Abs_8hh.html</anchorfile>
      <anchor>841ea6854e229f915b3568c6ac65c554</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbsFunction.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>AbsFunction_8hh</filename>
    <includes id="Argument_8hh" name="Argument.hh" local="yes" imported="no">CLHEP/GenericFunctions/Argument.hh</includes>
    <includes id="FunctionProduct_8hh" name="FunctionProduct.hh" local="yes" imported="no">CLHEP/GenericFunctions/FunctionProduct.hh</includes>
    <includes id="FunctionSum_8hh" name="FunctionSum.hh" local="yes" imported="no">CLHEP/GenericFunctions/FunctionSum.hh</includes>
    <includes id="FunctionDifference_8hh" name="FunctionDifference.hh" local="yes" imported="no">CLHEP/GenericFunctions/FunctionDifference.hh</includes>
    <includes id="FunctionQuotient_8hh" name="FunctionQuotient.hh" local="yes" imported="no">CLHEP/GenericFunctions/FunctionQuotient.hh</includes>
    <includes id="FunctionConvolution_8hh" name="FunctionConvolution.hh" local="yes" imported="no">CLHEP/GenericFunctions/FunctionConvolution.hh</includes>
    <includes id="FunctionNegation_8hh" name="FunctionNegation.hh" local="yes" imported="no">CLHEP/GenericFunctions/FunctionNegation.hh</includes>
    <includes id="FunctionDirectProduct_8hh" name="FunctionDirectProduct.hh" local="yes" imported="no">CLHEP/GenericFunctions/FunctionDirectProduct.hh</includes>
    <includes id="FunctionComposition_8hh" name="FunctionComposition.hh" local="yes" imported="no">CLHEP/GenericFunctions/FunctionComposition.hh</includes>
    <includes id="ConstPlusFunction_8hh" name="ConstPlusFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/ConstPlusFunction.hh</includes>
    <includes id="ConstTimesFunction_8hh" name="ConstTimesFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/ConstTimesFunction.hh</includes>
    <includes id="ConstMinusFunction_8hh" name="ConstMinusFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/ConstMinusFunction.hh</includes>
    <includes id="ConstOverFunction_8hh" name="ConstOverFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/ConstOverFunction.hh</includes>
    <includes id="FunctionPlusParameter_8hh" name="FunctionPlusParameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/FunctionPlusParameter.hh</includes>
    <includes id="FunctionTimesParameter_8hh" name="FunctionTimesParameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/FunctionTimesParameter.hh</includes>
    <includes id="FunctionNoop_8hh" name="FunctionNoop.hh" local="yes" imported="no">CLHEP/GenericFunctions/FunctionNoop.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::AbsFunction</class>
    <member kind="define">
      <type>#define</type>
      <name>AbsFunction_h</name>
      <anchorfile>AbsFunction_8hh.html</anchorfile>
      <anchor>8d2453a196b8a1f6f039d611ec676d96</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FUNCTION_OBJECT_DEF</name>
      <anchorfile>AbsFunction_8hh.html</anchorfile>
      <anchor>a798ecad8a32176fde98e099e9a6b967</anchor>
      <arglist>(classname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FUNCTION_OBJECT_IMP</name>
      <anchorfile>AbsFunction_8hh.html</anchorfile>
      <anchor>d118e48f816aa1510f766905e9f0f2cf</anchor>
      <arglist>(classname)</arglist>
    </member>
    <member kind="typedef">
      <type>FunctionNoop</type>
      <name>Derivative</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>1cf3cb0e92ceeae93b4039d1f94a556d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const AbsFunction &amp;</type>
      <name>GENFUNCTION</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>e675b24415ef3794cc4d972883346330</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FunctionProduct</type>
      <name>operator*</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>6ea72342bf3600846fe3f77db6b44999</anchor>
      <arglist>(const AbsFunction &amp;op1, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionSum</type>
      <name>operator+</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>6309714fc7fbb8f038df55e1b251db38</anchor>
      <arglist>(const AbsFunction &amp;op1, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionDifference</type>
      <name>operator-</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>e039d3ab5ec673bf49caa75d244bf1c5</anchor>
      <arglist>(const AbsFunction &amp;op1, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionQuotient</type>
      <name>operator/</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>0d326e4a0993616acfc421c40b4c8e7d</anchor>
      <arglist>(const AbsFunction &amp;op1, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionNegation</type>
      <name>operator-</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>256731da53cfcdc5a123c956d9873864</anchor>
      <arglist>(const AbsFunction &amp;op1)</arglist>
    </member>
    <member kind="function">
      <type>ConstTimesFunction</type>
      <name>operator*</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>7b45eb6282401656d5e07dea4d4c99e2</anchor>
      <arglist>(double c, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ConstPlusFunction</type>
      <name>operator+</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>90e3356b0756953b36df636d0d1f335e</anchor>
      <arglist>(double c, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ConstMinusFunction</type>
      <name>operator-</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>dd8782afbba0e593969a1a4ed474c3b9</anchor>
      <arglist>(double c, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ConstOverFunction</type>
      <name>operator/</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>b221cb784756fb4d6d633808daf4031a</anchor>
      <arglist>(double c, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ConstTimesFunction</type>
      <name>operator*</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>eae5794de90f6f7b45bf245a68ccc6d2</anchor>
      <arglist>(const AbsFunction &amp;op2, double c)</arglist>
    </member>
    <member kind="function">
      <type>ConstPlusFunction</type>
      <name>operator+</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>09cdb7dd5516a17669df0cb790beb5dc</anchor>
      <arglist>(const AbsFunction &amp;op2, double c)</arglist>
    </member>
    <member kind="function">
      <type>ConstPlusFunction</type>
      <name>operator-</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>cf85ec6ff6cf06f83d5c7972b37b5aec</anchor>
      <arglist>(const AbsFunction &amp;op2, double c)</arglist>
    </member>
    <member kind="function">
      <type>ConstTimesFunction</type>
      <name>operator/</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>1856d4ae054bb9dd853c94436a0edbc7</anchor>
      <arglist>(const AbsFunction &amp;op2, double c)</arglist>
    </member>
    <member kind="function">
      <type>FunctionTimesParameter</type>
      <name>operator*</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>63537d7aca717ef5a8b4ebdc3697ee4b</anchor>
      <arglist>(const AbsFunction &amp;op1, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionPlusParameter</type>
      <name>operator+</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>7f1d492175fbe109aecd763ab6e7f75d</anchor>
      <arglist>(const AbsFunction &amp;op1, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionPlusParameter</type>
      <name>operator-</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>92154d6e421c9e2e8c536db50dba406e</anchor>
      <arglist>(const AbsFunction &amp;op1, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionTimesParameter</type>
      <name>operator/</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>f685b18de0d4a3ea553e3d0dbfd60edc</anchor>
      <arglist>(const AbsFunction &amp;op1, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionTimesParameter</type>
      <name>operator*</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>28c4222aaede11cfa9e001156da3f80c</anchor>
      <arglist>(const AbsParameter &amp;op1, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionPlusParameter</type>
      <name>operator+</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>75b5672e3ac94c0cd754bb9037aee453</anchor>
      <arglist>(const AbsParameter &amp;op1, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionPlusParameter</type>
      <name>operator-</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>8503dfc6ca147bfe024abf84e66b4986</anchor>
      <arglist>(const AbsParameter &amp;op1, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionTimesParameter</type>
      <name>operator/</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>ebce116d078e5e158ad0b6348d846da8</anchor>
      <arglist>(const AbsParameter &amp;op1, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionConvolution</type>
      <name>convolve</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>a2dd0a951892c6939bcb49ceb1d06bd5</anchor>
      <arglist>(const AbsFunction &amp;op1, const AbsFunction &amp;op2, double x0, double x1)</arglist>
    </member>
    <member kind="function">
      <type>FunctionDirectProduct</type>
      <name>operator%</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>4328e69f8cf804e2f8a3a647eed372b0</anchor>
      <arglist>(const AbsFunction &amp;op1, const AbsFunction &amp;op2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbsFunctional.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>AbsFunctional_8hh</filename>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::AbsFunctional</class>
  </compound>
  <compound kind="file">
    <name>AbsParameter.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>AbsParameter_8hh</filename>
    <includes id="ParameterProduct_8hh" name="ParameterProduct.hh" local="yes" imported="no">CLHEP/GenericFunctions/ParameterProduct.hh</includes>
    <includes id="ParameterSum_8hh" name="ParameterSum.hh" local="yes" imported="no">CLHEP/GenericFunctions/ParameterSum.hh</includes>
    <includes id="ParameterDifference_8hh" name="ParameterDifference.hh" local="yes" imported="no">CLHEP/GenericFunctions/ParameterDifference.hh</includes>
    <includes id="ParameterQuotient_8hh" name="ParameterQuotient.hh" local="yes" imported="no">CLHEP/GenericFunctions/ParameterQuotient.hh</includes>
    <includes id="ParameterNegation_8hh" name="ParameterNegation.hh" local="yes" imported="no">CLHEP/GenericFunctions/ParameterNegation.hh</includes>
    <includes id="ConstPlusParameter_8hh" name="ConstPlusParameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/ConstPlusParameter.hh</includes>
    <includes id="ConstMinusParameter_8hh" name="ConstMinusParameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/ConstMinusParameter.hh</includes>
    <includes id="ConstTimesParameter_8hh" name="ConstTimesParameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/ConstTimesParameter.hh</includes>
    <includes id="ConstOverParameter_8hh" name="ConstOverParameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/ConstOverParameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::AbsParameter</class>
    <member kind="define">
      <type>#define</type>
      <name>PARAMETER_OBJECT_DEF</name>
      <anchorfile>AbsParameter_8hh.html</anchorfile>
      <anchor>de0f487a8ba76ec70e391c770d9e950d</anchor>
      <arglist>(classname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PARAMETER_OBJECT_IMP</name>
      <anchorfile>AbsParameter_8hh.html</anchorfile>
      <anchor>31eff9353409cba4b4976c020b82d020</anchor>
      <arglist>(classname)</arglist>
    </member>
    <member kind="typedef">
      <type>const AbsParameter &amp;</type>
      <name>GENPARAMETER</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>d31219672a371acddf83da0a4d23522f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ConstTimesParameter</type>
      <name>operator*</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>83ebbf124242c189d7665810764c2bda</anchor>
      <arglist>(double c, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ConstPlusParameter</type>
      <name>operator+</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>50eb96c1c2cc2884e6cbb3d4169a88cf</anchor>
      <arglist>(double c, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ConstMinusParameter</type>
      <name>operator-</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>88cf3b849561923b6b05801742c747fe</anchor>
      <arglist>(double c, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ConstOverParameter</type>
      <name>operator/</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>87bac85fd0cf06b4d9a9b3c1dc0b7b0a</anchor>
      <arglist>(double c, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ConstTimesParameter</type>
      <name>operator*</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>e0f2922312010123e96b759a598ce206</anchor>
      <arglist>(const AbsParameter &amp;op2, double c)</arglist>
    </member>
    <member kind="function">
      <type>ConstPlusParameter</type>
      <name>operator+</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>64105b503cd39fb018f53ab78ff87584</anchor>
      <arglist>(const AbsParameter &amp;op2, double c)</arglist>
    </member>
    <member kind="function">
      <type>ConstPlusParameter</type>
      <name>operator-</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>06bc4598a5b0606e0a93c7ced7b84b69</anchor>
      <arglist>(const AbsParameter &amp;op2, double c)</arglist>
    </member>
    <member kind="function">
      <type>ConstTimesParameter</type>
      <name>operator/</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>33430780a191c814f1fe26cd3c413d73</anchor>
      <arglist>(const AbsParameter &amp;op2, double c)</arglist>
    </member>
    <member kind="function">
      <type>ParameterProduct</type>
      <name>operator*</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>be0173a869aca33a4120377fcb2bb553</anchor>
      <arglist>(const AbsParameter &amp;op1, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ParameterSum</type>
      <name>operator+</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>f12482210599cad10433583bc4db0c80</anchor>
      <arglist>(const AbsParameter &amp;op1, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ParameterDifference</type>
      <name>operator-</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>c157887f959f77d531f5993cf0af5375</anchor>
      <arglist>(const AbsParameter &amp;op1, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ParameterQuotient</type>
      <name>operator/</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>c95bf9bae1109ab317614c79d4f27d55</anchor>
      <arglist>(const AbsParameter &amp;op1, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ParameterNegation</type>
      <name>operator-</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>b460ec3f9ca30bb9aadd1429715510e5</anchor>
      <arglist>(const AbsParameter &amp;op1)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ACos.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>ACos_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::ACos</class>
    <member kind="define">
      <type>#define</type>
      <name>ACos_h</name>
      <anchorfile>ACos_8hh.html</anchorfile>
      <anchor>327e20a3f709770ee73ac26f18fc9d1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AnalyticConvolution.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>AnalyticConvolution_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::AnalyticConvolution</class>
  </compound>
  <compound kind="file">
    <name>Argument.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>Argument_8hh</filename>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::Argument</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>1c7b9509451aa1eb5ae47d3d3efda3c6</anchor>
      <arglist>(std::ostream &amp;os, const Argument &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ArgumentList.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>ArgumentList_8hh</filename>
    <includes id="Argument_8hh" name="Argument.hh" local="yes" imported="no">CLHEP/GenericFunctions/Argument.hh</includes>
    <namespace>Genfun</namespace>
    <member kind="typedef">
      <type>std::vector&lt; Argument &gt;</type>
      <name>ArgumentList</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>a700049d4d57bab580af1430b402dc01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ArrayFunction.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>ArrayFunction_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::ArrayFunction</class>
  </compound>
  <compound kind="file">
    <name>ASin.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>ASin_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::ASin</class>
    <member kind="define">
      <type>#define</type>
      <name>ASin_h</name>
      <anchorfile>ASin_8hh.html</anchorfile>
      <anchor>999fa97d2cd14d0b56d896f6a91524f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AssociatedLaguerre.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>AssociatedLaguerre_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::AssociatedLaguerre</class>
    <member kind="define">
      <type>#define</type>
      <name>AssociatedLaguerre_h</name>
      <anchorfile>AssociatedLaguerre_8hh.html</anchorfile>
      <anchor>7d884ca3dd9ea8e69689884d9f9d4a79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AssociatedLegendre.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>AssociatedLegendre_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::AssociatedLegendre</class>
    <member kind="define">
      <type>#define</type>
      <name>AssociatedLegendre_h</name>
      <anchorfile>AssociatedLegendre_8hh.html</anchorfile>
      <anchor>7234ac662907037583fa68d06772343d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ATan.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>ATan_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::ATan</class>
    <member kind="define">
      <type>#define</type>
      <name>ATan_h</name>
      <anchorfile>ATan_8hh.html</anchorfile>
      <anchor>7400f4e47a505365a62949f0a968147a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Bessel.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>Bessel_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <includes id="Bessel_8icc" name="Bessel.icc" local="yes" imported="no">CLHEP/GenericFunctions/Bessel.icc</includes>
    <namespace>Genfun</namespace>
    <namespace>Genfun::FractionalOrder</namespace>
    <namespace>Genfun::IntegralOrder</namespace>
    <class kind="class">Genfun::FractionalOrder::Bessel</class>
    <class kind="class">Genfun::IntegralOrder::Bessel</class>
    <member kind="define">
      <type>#define</type>
      <name>Bessel_h</name>
      <anchorfile>Bessel_8hh.html</anchorfile>
      <anchor>0157db4465e01b917e2dbe045692c081</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Bessel.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>Bessel_8icc</filename>
    <namespace>Genfun</namespace>
    <namespace>Genfun::IntegralOrder</namespace>
    <namespace>Genfun::FractionalOrder</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GF_DBL_EPSILON</name>
      <anchorfile>Bessel_8icc.html</anchorfile>
      <anchor>1d20f4b15ead8313e9c3beff3d99d1bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BivariateGaussian.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>BivariateGaussian_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::BivariateGaussian</class>
    <member kind="define">
      <type>#define</type>
      <name>BivariateGaussian_h</name>
      <anchorfile>BivariateGaussian_8hh.html</anchorfile>
      <anchor>481ff02b9e704d281b66b3f96720c05e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstMinusFunction.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>ConstMinusFunction_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::ConstMinusFunction</class>
    <member kind="define">
      <type>#define</type>
      <name>ConstMinusFunction_h</name>
      <anchorfile>ConstMinusFunction_8hh.html</anchorfile>
      <anchor>7deb78394aa58d6af2de3e3618290ac8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstMinusParameter.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>ConstMinusParameter_8hh</filename>
    <includes id="AbsParameter_8hh" name="AbsParameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsParameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::ConstMinusParameter</class>
    <member kind="define">
      <type>#define</type>
      <name>ConstMinusParameter_h</name>
      <anchorfile>ConstMinusParameter_8hh.html</anchorfile>
      <anchor>3f2f09db59879b5a26649ec8c18e672e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstOverFunction.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>ConstOverFunction_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::ConstOverFunction</class>
    <member kind="define">
      <type>#define</type>
      <name>ConstOverFunction_h</name>
      <anchorfile>ConstOverFunction_8hh.html</anchorfile>
      <anchor>f1aba477fabad3e080a9f7581773089e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstOverParameter.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>ConstOverParameter_8hh</filename>
    <includes id="AbsParameter_8hh" name="AbsParameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsParameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::ConstOverParameter</class>
    <member kind="define">
      <type>#define</type>
      <name>ConstOverParameter_h</name>
      <anchorfile>ConstOverParameter_8hh.html</anchorfile>
      <anchor>296a6a321e6378ffc99dbc1a4912d427</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstPlusFunction.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>ConstPlusFunction_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::ConstPlusFunction</class>
    <member kind="define">
      <type>#define</type>
      <name>ConstPlusFunction_h</name>
      <anchorfile>ConstPlusFunction_8hh.html</anchorfile>
      <anchor>95f727b2c48112fea5b63dea8c9dacaa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstPlusParameter.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>ConstPlusParameter_8hh</filename>
    <includes id="AbsParameter_8hh" name="AbsParameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsParameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::ConstPlusParameter</class>
    <member kind="define">
      <type>#define</type>
      <name>ConstPlusParameter_h</name>
      <anchorfile>ConstPlusParameter_8hh.html</anchorfile>
      <anchor>8b80c3b8b646545364716d943f291c97</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstTimesFunction.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>ConstTimesFunction_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::ConstTimesFunction</class>
    <member kind="define">
      <type>#define</type>
      <name>ConstTimesFunction_h</name>
      <anchorfile>ConstTimesFunction_8hh.html</anchorfile>
      <anchor>5b7a5af9ef0ceb59e6440dd31deb96c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstTimesParameter.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>ConstTimesParameter_8hh</filename>
    <includes id="AbsParameter_8hh" name="AbsParameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsParameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::ConstTimesParameter</class>
    <member kind="define">
      <type>#define</type>
      <name>ConstTimesParameter_h</name>
      <anchorfile>ConstTimesParameter_8hh.html</anchorfile>
      <anchor>e205fddd7b26db864b5fc31608765719</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Cos.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>Cos_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::Cos</class>
    <member kind="define">
      <type>#define</type>
      <name>Cos_h</name>
      <anchorfile>Cos_8hh.html</anchorfile>
      <anchor>cf5e2e1fa063dd5ddc2ec706cd6dc07c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CumulativeChiSquare.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>CumulativeChiSquare_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::CumulativeChiSquare</class>
    <member kind="define">
      <type>#define</type>
      <name>CumulativeChiSquare_h</name>
      <anchorfile>CumulativeChiSquare_8hh.html</anchorfile>
      <anchor>47572233103fa9440e462da325540694</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CutBase.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>CutBase_8hh</filename>
    <includes id="CutBase_8icc" name="CutBase.icc" local="yes" imported="no">CLHEP/GenericFunctions/CutBase.icc</includes>
    <class kind="class">Cut</class>
    <class kind="class">Cut::AND</class>
    <class kind="class">Cut::OR</class>
    <class kind="class">Cut::NOT</class>
    <class kind="class">Cut::Predicate</class>
  </compound>
  <compound kind="file">
    <name>CutBase.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>CutBase_8icc</filename>
  </compound>
  <compound kind="file">
    <name>DefiniteIntegral.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>DefiniteIntegral_8hh</filename>
    <includes id="AbsFunctional_8hh" name="AbsFunctional.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunctional.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::DefiniteIntegral</class>
  </compound>
  <compound kind="file">
    <name>DoubleParamToArgAdaptor.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>DoubleParamToArgAdaptor_8hh</filename>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="DoubleParamToArgAdaptor_8icc" name="DoubleParamToArgAdaptor.icc" local="yes" imported="no">CLHEP/GenericFunctions/DoubleParamToArgAdaptor.icc</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::DoubleParamToArgAdaptor</class>
  </compound>
  <compound kind="file">
    <name>DoubleParamToArgAdaptor.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>DoubleParamToArgAdaptor_8icc</filename>
    <includes id="DoubleParamToArgAdaptor_8hh" name="DoubleParamToArgAdaptor.hh" local="yes" imported="no">CLHEP/GenericFunctions/DoubleParamToArgAdaptor.hh</includes>
    <namespace>Genfun</namespace>
  </compound>
  <compound kind="file">
    <name>EllipticIntegral.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>EllipticIntegral_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <includes id="EllipticIntegral_8icc" name="EllipticIntegral.icc" local="yes" imported="no">CLHEP/GenericFunctions/EllipticIntegral.icc</includes>
    <namespace>Genfun</namespace>
    <namespace>Genfun::EllipticIntegral</namespace>
    <class kind="class">Genfun::EllipticIntegral::FirstKind</class>
    <class kind="class">Genfun::EllipticIntegral::SecondKind</class>
    <class kind="class">Genfun::EllipticIntegral::ThirdKind</class>
    <member kind="define">
      <type>#define</type>
      <name>EllipticIntegral_h</name>
      <anchorfile>EllipticIntegral_8hh.html</anchorfile>
      <anchor>576cb9eb0200b22e86a7f6b797d17453</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EllipticIntegral.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>EllipticIntegral_8icc</filename>
    <namespace>Genfun</namespace>
    <namespace>Genfun::EllipticIntegral</namespace>
  </compound>
  <compound kind="file">
    <name>Erf.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>Erf_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <includes id="IncompleteGamma_8hh" name="IncompleteGamma.hh" local="yes" imported="no">CLHEP/GenericFunctions/IncompleteGamma.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::Erf</class>
    <member kind="define">
      <type>#define</type>
      <name>Erf_h</name>
      <anchorfile>Erf_8hh.html</anchorfile>
      <anchor>778c3ac33c004c86972498c4b73ec2fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Exp.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>Exp_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::Exp</class>
    <member kind="define">
      <type>#define</type>
      <name>Exp_h</name>
      <anchorfile>Exp_8hh.html</anchorfile>
      <anchor>eb2e7d1c668a861eb2b7de49b5e6c8f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Exponential.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>Exponential_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::Exponential</class>
    <member kind="define">
      <type>#define</type>
      <name>Exponential_h</name>
      <anchorfile>Exponential_8hh.html</anchorfile>
      <anchor>8e46c67630dd9815d877dc0cc7673f2b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FixedConstant.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>FixedConstant_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::FixedConstant</class>
    <member kind="define">
      <type>#define</type>
      <name>FixedConstant_h</name>
      <anchorfile>FixedConstant_8hh.html</anchorfile>
      <anchor>7eef7b3507a5eb5f3e7e22053e3aca06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FloatingConstant.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>FloatingConstant_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::FloatingConstant</class>
    <member kind="define">
      <type>#define</type>
      <name>FloatingConstant_h</name>
      <anchorfile>FloatingConstant_8hh.html</anchorfile>
      <anchor>57b239f00f53ab1ff0e1bc13394b0ade</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FunctionComposition.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>FunctionComposition_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::FunctionComposition</class>
    <member kind="define">
      <type>#define</type>
      <name>FunctionComposition_h</name>
      <anchorfile>FunctionComposition_8hh.html</anchorfile>
      <anchor>e9ea13208cc5ea56b67c28a181fa1a3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FunctionConvolution.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>FunctionConvolution_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::FunctionConvolution</class>
    <member kind="define">
      <type>#define</type>
      <name>FunctionConvolution_h</name>
      <anchorfile>FunctionConvolution_8hh.html</anchorfile>
      <anchor>ad8990f910d0551db72e340fac1b8f83</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FunctionDifference.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>FunctionDifference_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::FunctionDifference</class>
    <member kind="define">
      <type>#define</type>
      <name>FunctionDifference_h</name>
      <anchorfile>FunctionDifference_8hh.html</anchorfile>
      <anchor>de98fce273a75b3ad0e54b5edac9d99e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FunctionDirectProduct.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>FunctionDirectProduct_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::FunctionDirectProduct</class>
    <member kind="define">
      <type>#define</type>
      <name>FunctionDirectProduct_h</name>
      <anchorfile>FunctionDirectProduct_8hh.html</anchorfile>
      <anchor>49aae2471a04522820480a08ae11713c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FunctionNegation.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>FunctionNegation_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::FunctionNegation</class>
    <member kind="define">
      <type>#define</type>
      <name>FunctionNegation_h</name>
      <anchorfile>FunctionNegation_8hh.html</anchorfile>
      <anchor>29d40e7c0bd3d16d55e5e5ab764c21eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FunctionNoop.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>FunctionNoop_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::FunctionNoop</class>
    <member kind="define">
      <type>#define</type>
      <name>FunctionNoop_h</name>
      <anchorfile>FunctionNoop_8hh.html</anchorfile>
      <anchor>8d7803eb5fcffd44faeae418a32eef98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FunctionNumDeriv.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>FunctionNumDeriv_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::FunctionNumDeriv</class>
    <member kind="define">
      <type>#define</type>
      <name>FunctionNumDeriv_h</name>
      <anchorfile>FunctionNumDeriv_8hh.html</anchorfile>
      <anchor>cc5c03d021518159f1f0e6b695d632fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FunctionPlusParameter.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>FunctionPlusParameter_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::FunctionPlusParameter</class>
    <member kind="define">
      <type>#define</type>
      <name>FunctionPlusParameter_h</name>
      <anchorfile>FunctionPlusParameter_8hh.html</anchorfile>
      <anchor>c0c2aaf1521321d8aedc37c2d10739bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FunctionProduct.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>FunctionProduct_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::FunctionProduct</class>
    <member kind="define">
      <type>#define</type>
      <name>FunctionProduct_h</name>
      <anchorfile>FunctionProduct_8hh.html</anchorfile>
      <anchor>d8a0d4af0f99a81794d85f0be30b0655</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FunctionQuotient.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>FunctionQuotient_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::FunctionQuotient</class>
    <member kind="define">
      <type>#define</type>
      <name>FunctionQuotient_h</name>
      <anchorfile>FunctionQuotient_8hh.html</anchorfile>
      <anchor>2869d832293e5aa7ad47616c9614ccb2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FunctionSum.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>FunctionSum_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::FunctionSum</class>
    <member kind="define">
      <type>#define</type>
      <name>FunctionSum_h</name>
      <anchorfile>FunctionSum_8hh.html</anchorfile>
      <anchor>2f04d40009383a3dcee9aef1352e6408</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FunctionTimesParameter.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>FunctionTimesParameter_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::FunctionTimesParameter</class>
    <member kind="define">
      <type>#define</type>
      <name>FunctionTimesParameter_h</name>
      <anchorfile>FunctionTimesParameter_8hh.html</anchorfile>
      <anchor>a0c48022fefdf51f5a61984dad27348d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Gaussian.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>Gaussian_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::Gaussian</class>
    <member kind="define">
      <type>#define</type>
      <name>Gaussian_h</name>
      <anchorfile>Gaussian_8hh.html</anchorfile>
      <anchor>fb932e7b65f74b4d2c59f6a74a00f801</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GenericFunctions.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>GenericFunctions_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Variable_8hh" name="Variable.hh" local="yes" imported="no">CLHEP/GenericFunctions/Variable.hh</includes>
    <includes id="FixedConstant_8hh" name="FixedConstant.hh" local="yes" imported="no">CLHEP/GenericFunctions/FixedConstant.hh</includes>
    <includes id="FloatingConstant_8hh" name="FloatingConstant.hh" local="yes" imported="no">CLHEP/GenericFunctions/FloatingConstant.hh</includes>
    <includes id="Square_8hh" name="Square.hh" local="yes" imported="no">CLHEP/GenericFunctions/Square.hh</includes>
    <includes id="Sqrt_8hh" name="Sqrt.hh" local="yes" imported="no">CLHEP/GenericFunctions/Sqrt.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
  </compound>
  <compound kind="file">
    <name>IncompleteGamma.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>IncompleteGamma_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <includes id="LogGamma_8hh" name="LogGamma.hh" local="yes" imported="no">CLHEP/GenericFunctions/LogGamma.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::IncompleteGamma</class>
    <member kind="define">
      <type>#define</type>
      <name>IncompleteGamma_h</name>
      <anchorfile>IncompleteGamma_8hh.html</anchorfile>
      <anchor>9b106bc0e1e2b9474f53bc771b3c2599</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Landau.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>Landau_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::Landau</class>
    <member kind="define">
      <type>#define</type>
      <name>Landau_h</name>
      <anchorfile>Landau_8hh.html</anchorfile>
      <anchor>35e42990b7e83485fad9fd25e103f517</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LikelihoodFunctional.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>LikelihoodFunctional_8hh</filename>
    <includes id="AbsFunctional_8hh" name="AbsFunctional.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunctional.hh</includes>
    <includes id="ArgumentList_8hh" name="ArgumentList.hh" local="yes" imported="no">CLHEP/GenericFunctions/ArgumentList.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::LikelihoodFunctional</class>
  </compound>
  <compound kind="file">
    <name>Ln.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>Ln_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::Ln</class>
    <member kind="define">
      <type>#define</type>
      <name>Ln_h</name>
      <anchorfile>Ln_8hh.html</anchorfile>
      <anchor>d0cca8c09140794947f01b48a360d097</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LogGamma.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>LogGamma_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::LogGamma</class>
    <member kind="define">
      <type>#define</type>
      <name>LogGamma_h</name>
      <anchorfile>LogGamma_8hh.html</anchorfile>
      <anchor>86b81980028053bd74fa066e1d4a3a80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LogisticFunction.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>LogisticFunction_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::LogisticFunction</class>
    <member kind="define">
      <type>#define</type>
      <name>LogisticFunction_h</name>
      <anchorfile>LogisticFunction_8hh.html</anchorfile>
      <anchor>bf6e9ab7ae1b4e7ef9af82673266ada3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Mod.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>Mod_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::Mod</class>
    <member kind="define">
      <type>#define</type>
      <name>Mod_h</name>
      <anchorfile>Mod_8hh.html</anchorfile>
      <anchor>a6688dc2cafeb7ac973c732426e0fc3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Parameter.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>Parameter_8hh</filename>
    <includes id="AbsParameter_8hh" name="AbsParameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsParameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::Parameter</class>
    <member kind="define">
      <type>#define</type>
      <name>Parameter_h</name>
      <anchorfile>Parameter_8hh.html</anchorfile>
      <anchor>5e3456d9ebeb67c094e5b52028724f56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>2b79b1ed5154e208795dc1a9e390fd8d</anchor>
      <arglist>(std::ostream &amp;o, const Parameter &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParameterDifference.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>ParameterDifference_8hh</filename>
    <includes id="AbsParameter_8hh" name="AbsParameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsParameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::ParameterDifference</class>
    <member kind="define">
      <type>#define</type>
      <name>ParameterDifference_h</name>
      <anchorfile>ParameterDifference_8hh.html</anchorfile>
      <anchor>e1be7df3a302bf29f0b50dd72688ceb6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParameterNegation.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>ParameterNegation_8hh</filename>
    <includes id="AbsParameter_8hh" name="AbsParameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsParameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::ParameterNegation</class>
    <member kind="define">
      <type>#define</type>
      <name>ParameterNegation_h</name>
      <anchorfile>ParameterNegation_8hh.html</anchorfile>
      <anchor>cf2f3f573087296e53ca4745b4f12449</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParameterProduct.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>ParameterProduct_8hh</filename>
    <includes id="AbsParameter_8hh" name="AbsParameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsParameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::ParameterProduct</class>
    <member kind="define">
      <type>#define</type>
      <name>ParameterProduct_h</name>
      <anchorfile>ParameterProduct_8hh.html</anchorfile>
      <anchor>5a7e479870b9ba964bc26e97f83acc67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParameterQuotient.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>ParameterQuotient_8hh</filename>
    <includes id="AbsParameter_8hh" name="AbsParameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsParameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::ParameterQuotient</class>
    <member kind="define">
      <type>#define</type>
      <name>ParameterQuotient_h</name>
      <anchorfile>ParameterQuotient_8hh.html</anchorfile>
      <anchor>a187fa6c1a57f0a090c07163cc8fbadc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParameterSum.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>ParameterSum_8hh</filename>
    <includes id="AbsParameter_8hh" name="AbsParameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsParameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::ParameterSum</class>
    <member kind="define">
      <type>#define</type>
      <name>ParameterSum_h</name>
      <anchorfile>ParameterSum_8hh.html</anchorfile>
      <anchor>195507bec3ade183bacc0dd143cc84e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParamToArgAdaptor.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>ParamToArgAdaptor_8hh</filename>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="ParamToArgAdaptor_8icc" name="ParamToArgAdaptor.icc" local="yes" imported="no">CLHEP/GenericFunctions/ParamToArgAdaptor.icc</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::ParamToArgAdaptor</class>
  </compound>
  <compound kind="file">
    <name>ParamToArgAdaptor.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>ParamToArgAdaptor_8icc</filename>
    <includes id="ParamToArgAdaptor_8hh" name="ParamToArgAdaptor.hh" local="yes" imported="no">CLHEP/GenericFunctions/ParamToArgAdaptor.hh</includes>
    <namespace>Genfun</namespace>
  </compound>
  <compound kind="file">
    <name>PeriodicRectangular.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>PeriodicRectangular_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::PeriodicRectangular</class>
    <member kind="define">
      <type>#define</type>
      <name>PeriodicRectangular_h_</name>
      <anchorfile>PeriodicRectangular_8hh.html</anchorfile>
      <anchor>4c933b13a8439e2c98d42a122f63cb30</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Power.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>Power_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::Power</class>
    <member kind="define">
      <type>#define</type>
      <name>Power_h</name>
      <anchorfile>Power_8hh.html</anchorfile>
      <anchor>a4c27154abf9cee346222ace5c29800e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Psi2Hydrogen.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>Psi2Hydrogen_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::Psi2Hydrogen</class>
    <member kind="define">
      <type>#define</type>
      <name>Psi2Hydrogen_h</name>
      <anchorfile>Psi2Hydrogen_8hh.html</anchorfile>
      <anchor>6f077014558f6a298fdb1dc5784fcd7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PtRelFcn.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>PtRelFcn_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <includes id="LogGamma_8hh" name="LogGamma.hh" local="yes" imported="no">CLHEP/GenericFunctions/LogGamma.hh</includes>
    <includes id="Erf_8hh" name="Erf.hh" local="yes" imported="no">CLHEP/GenericFunctions/Erf.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::PtRelFcn</class>
    <member kind="define">
      <type>#define</type>
      <name>PtRelFcn_h</name>
      <anchorfile>PtRelFcn_8hh.html</anchorfile>
      <anchor>341d6054f31747e01c7cdb84b70fc446</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PuncturedSmearedExp.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>PuncturedSmearedExp_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::PuncturedSmearedExp</class>
  </compound>
  <compound kind="file">
    <name>RCBase.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>RCBase_8hh</filename>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::RCBase</class>
    <member kind="define">
      <type>#define</type>
      <name>RCBase_h</name>
      <anchorfile>RCBase_8hh.html</anchorfile>
      <anchor>10f8073c6a023240bddea4f2773b3671</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Rectangular.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>Rectangular_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::Rectangular</class>
    <member kind="define">
      <type>#define</type>
      <name>Rectangular_h</name>
      <anchorfile>Rectangular_8hh.html</anchorfile>
      <anchor>566234ff91e709ee0dcc65782870eb1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ReverseExponential.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>ReverseExponential_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::ReverseExponential</class>
    <member kind="define">
      <type>#define</type>
      <name>ReverseExponential_h</name>
      <anchorfile>ReverseExponential_8hh.html</anchorfile>
      <anchor>b4d0a8c495df12e145097df510f1f11b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RKIntegrator.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>RKIntegrator_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <includes id="RCBase_8hh" name="RCBase.hh" local="yes" imported="no">CLHEP/GenericFunctions/RCBase.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::RKIntegrator</class>
    <class kind="class">Genfun::RKIntegrator::RKData</class>
    <class kind="struct">Genfun::RKIntegrator::RKData::Data</class>
    <class kind="class">Genfun::RKIntegrator::RKFunction</class>
    <member kind="define">
      <type>#define</type>
      <name>RKIntegrator_h</name>
      <anchorfile>RKIntegrator_8hh.html</anchorfile>
      <anchor>46fa157b94515893c140d35f0140bd49</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sigma.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>Sigma_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::Sigma</class>
    <member kind="define">
      <type>#define</type>
      <name>Sigma_h</name>
      <anchorfile>Sigma_8hh.html</anchorfile>
      <anchor>000c258e3ac0e85243cdab836fc8c6f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sin.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>Sin_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::Sin</class>
    <member kind="define">
      <type>#define</type>
      <name>Sin_h</name>
      <anchorfile>Sin_8hh.html</anchorfile>
      <anchor>e3e9dcccf51f8234b6e577c0ebd1f609</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SphericalBessel.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>SphericalBessel_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <includes id="SphericalBessel_8icc" name="SphericalBessel.icc" local="yes" imported="no">CLHEP/GenericFunctions/SphericalBessel.icc</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::SphericalBessel</class>
    <member kind="define">
      <type>#define</type>
      <name>SphericalBessel_h</name>
      <anchorfile>SphericalBessel_8hh.html</anchorfile>
      <anchor>47ff80a1640b504865542a3c4f5082c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SphericalBessel.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>SphericalBessel_8icc</filename>
    <includes id="Sin_8hh" name="Sin.hh" local="yes" imported="no">CLHEP/GenericFunctions/Sin.hh</includes>
    <includes id="Cos_8hh" name="Cos.hh" local="yes" imported="no">CLHEP/GenericFunctions/Cos.hh</includes>
    <includes id="Variable_8hh" name="Variable.hh" local="yes" imported="no">CLHEP/GenericFunctions/Variable.hh</includes>
    <namespace>Genfun</namespace>
  </compound>
  <compound kind="file">
    <name>SphericalNeumann.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>SphericalNeumann_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <includes id="SphericalNeumann_8icc" name="SphericalNeumann.icc" local="yes" imported="no">CLHEP/GenericFunctions/SphericalNeumann.icc</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::SphericalNeumann</class>
    <member kind="define">
      <type>#define</type>
      <name>SphericalNeumann_h</name>
      <anchorfile>SphericalNeumann_8hh.html</anchorfile>
      <anchor>596b0be2b273899469dbd9b225d7d039</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SphericalNeumann.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>SphericalNeumann_8icc</filename>
    <includes id="Sin_8hh" name="Sin.hh" local="yes" imported="no">CLHEP/GenericFunctions/Sin.hh</includes>
    <includes id="Cos_8hh" name="Cos.hh" local="yes" imported="no">CLHEP/GenericFunctions/Cos.hh</includes>
    <includes id="Variable_8hh" name="Variable.hh" local="yes" imported="no">CLHEP/GenericFunctions/Variable.hh</includes>
    <namespace>Genfun</namespace>
  </compound>
  <compound kind="file">
    <name>Sqrt.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>Sqrt_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::Sqrt</class>
    <member kind="define">
      <type>#define</type>
      <name>Sqrt_h</name>
      <anchorfile>Sqrt_8hh.html</anchorfile>
      <anchor>414d945c637b98c0589a603bf5cb506a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Square.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>Square_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::Square</class>
    <member kind="define">
      <type>#define</type>
      <name>Square_h</name>
      <anchorfile>Square_8hh.html</anchorfile>
      <anchor>6f7d5956c206333204017a3e59af37e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Tan.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>Tan_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::Tan</class>
    <member kind="define">
      <type>#define</type>
      <name>Tan_h</name>
      <anchorfile>Tan_8hh.html</anchorfile>
      <anchor>e887a422878a160191f8635292a47153</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrivariateGaussian.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>TrivariateGaussian_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <includes id="Parameter_8hh" name="Parameter.hh" local="yes" imported="no">CLHEP/GenericFunctions/Parameter.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::TrivariateGaussian</class>
    <member kind="define">
      <type>#define</type>
      <name>TrivariateGaussian_h</name>
      <anchorfile>TrivariateGaussian_8hh.html</anchorfile>
      <anchor>c06148b494a668ee7f6987b2d2531a69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Variable.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>Variable_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::Variable</class>
    <member kind="define">
      <type>#define</type>
      <name>Variable_h</name>
      <anchorfile>Variable_8hh.html</anchorfile>
      <anchor>1277e6e4eadb5c978943be9b47736c06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>X.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/GenericFunctions/</path>
    <filename>X_8hh</filename>
    <includes id="AbsFunction_8hh" name="AbsFunction.hh" local="yes" imported="no">CLHEP/GenericFunctions/AbsFunction.hh</includes>
    <namespace>Genfun</namespace>
    <class kind="class">Genfun::X_</class>
    <member kind="define">
      <type>#define</type>
      <name>X__h</name>
      <anchorfile>X_8hh.html</anchorfile>
      <anchor>b85a287174421ec33144f280acebded3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasicVector3D.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Geometry/</path>
    <filename>BasicVector3D_8h</filename>
    <includes id="Geometry_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Geometry/defs.h</includes>
    <includes id="ThreeVector_8h" name="ThreeVector.h" local="yes" imported="no">CLHEP/Vector/ThreeVector.h</includes>
    <namespace>HepGeom</namespace>
    <class kind="class">HepGeom::BasicVector3D</class>
  </compound>
  <compound kind="file">
    <name>Normal3D.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Geometry/</path>
    <filename>Normal3D_8h</filename>
    <includes id="Geometry_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Geometry/defs.h</includes>
    <includes id="ThreeVector_8h" name="ThreeVector.h" local="yes" imported="no">CLHEP/Vector/ThreeVector.h</includes>
    <includes id="BasicVector3D_8h" name="BasicVector3D.h" local="yes" imported="no">CLHEP/Geometry/BasicVector3D.h</includes>
    <namespace>HepGeom</namespace>
    <class kind="class">HepGeom::Normal3D</class>
    <class kind="class">HepGeom::Normal3D&lt; float &gt;</class>
    <class kind="class">HepGeom::Normal3D&lt; double &gt;</class>
  </compound>
  <compound kind="file">
    <name>Plane3D.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Geometry/</path>
    <filename>Plane3D_8h</filename>
    <includes id="Geometry_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Geometry/defs.h</includes>
    <includes id="Point3D_8h" name="Point3D.h" local="yes" imported="no">CLHEP/Geometry/Point3D.h</includes>
    <includes id="Normal3D_8h" name="Normal3D.h" local="yes" imported="no">CLHEP/Geometry/Normal3D.h</includes>
    <includes id="Transform3D_8h" name="Transform3D.h" local="yes" imported="no">CLHEP/Geometry/Transform3D.h</includes>
    <namespace>HepGeom</namespace>
    <class kind="class">HepGeom::Plane3D</class>
  </compound>
  <compound kind="file">
    <name>Point3D.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Geometry/</path>
    <filename>Point3D_8h</filename>
    <includes id="Geometry_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Geometry/defs.h</includes>
    <includes id="ThreeVector_8h" name="ThreeVector.h" local="yes" imported="no">CLHEP/Vector/ThreeVector.h</includes>
    <includes id="BasicVector3D_8h" name="BasicVector3D.h" local="yes" imported="no">CLHEP/Geometry/BasicVector3D.h</includes>
    <namespace>HepGeom</namespace>
    <class kind="class">HepGeom::Point3D</class>
    <class kind="class">HepGeom::Point3D&lt; float &gt;</class>
    <class kind="class">HepGeom::Point3D&lt; double &gt;</class>
  </compound>
  <compound kind="file">
    <name>Transform3D.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Geometry/</path>
    <filename>Transform3D_8h</filename>
    <includes id="Geometry_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Geometry/defs.h</includes>
    <includes id="ThreeVector_8h" name="ThreeVector.h" local="yes" imported="no">CLHEP/Vector/ThreeVector.h</includes>
    <includes id="Transform3D_8icc" name="Transform3D.icc" local="yes" imported="no">CLHEP/Geometry/Transform3D.icc</includes>
    <namespace>HepGeom</namespace>
    <class kind="class">HepGeom::Transform3D</class>
    <class kind="class">HepGeom::Transform3D::Transform3D_row</class>
    <class kind="class">HepGeom::Rotate3D</class>
    <class kind="class">HepGeom::RotateX3D</class>
    <class kind="class">HepGeom::RotateY3D</class>
    <class kind="class">HepGeom::RotateZ3D</class>
    <class kind="class">HepGeom::Translate3D</class>
    <class kind="class">HepGeom::TranslateX3D</class>
    <class kind="class">HepGeom::TranslateY3D</class>
    <class kind="class">HepGeom::TranslateZ3D</class>
    <class kind="class">HepGeom::Reflect3D</class>
    <class kind="class">HepGeom::ReflectX3D</class>
    <class kind="class">HepGeom::ReflectY3D</class>
    <class kind="class">HepGeom::ReflectZ3D</class>
    <class kind="class">HepGeom::Scale3D</class>
    <class kind="class">HepGeom::ScaleX3D</class>
    <class kind="class">HepGeom::ScaleY3D</class>
    <class kind="class">HepGeom::ScaleZ3D</class>
  </compound>
  <compound kind="file">
    <name>Transform3D.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Geometry/</path>
    <filename>Transform3D_8icc</filename>
    <includes id="ThreeVector_8h" name="ThreeVector.h" local="yes" imported="no">CLHEP/Vector/ThreeVector.h</includes>
    <includes id="Rotation_8h" name="Rotation.h" local="yes" imported="no">CLHEP/Vector/Rotation.h</includes>
    <includes id="Point3D_8h" name="Point3D.h" local="yes" imported="no">CLHEP/Geometry/Point3D.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">CLHEP/Geometry/Vector3D.h</includes>
    <includes id="Normal3D_8h" name="Normal3D.h" local="yes" imported="no">CLHEP/Geometry/Normal3D.h</includes>
    <namespace>HepGeom</namespace>
  </compound>
  <compound kind="file">
    <name>Vector3D.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Geometry/</path>
    <filename>Vector3D_8h</filename>
    <includes id="Geometry_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Geometry/defs.h</includes>
    <includes id="ThreeVector_8h" name="ThreeVector.h" local="yes" imported="no">CLHEP/Vector/ThreeVector.h</includes>
    <includes id="BasicVector3D_8h" name="BasicVector3D.h" local="yes" imported="no">CLHEP/Geometry/BasicVector3D.h</includes>
    <namespace>HepGeom</namespace>
    <class kind="class">HepGeom::Vector3D</class>
    <class kind="class">HepGeom::Vector3D&lt; float &gt;</class>
    <class kind="class">HepGeom::Vector3D&lt; double &gt;</class>
  </compound>
  <compound kind="file">
    <name>DiagMatrix.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Matrix/</path>
    <filename>DiagMatrix_8h</filename>
    <includes id="Matrix_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Matrix/defs.h</includes>
    <includes id="GenMatrix_8h" name="GenMatrix.h" local="yes" imported="no">CLHEP/Matrix/GenMatrix.h</includes>
    <includes id="DiagMatrix_8icc" name="DiagMatrix.icc" local="yes" imported="no">CLHEP/Matrix/DiagMatrix.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::HepDiagMatrix</class>
    <class kind="class">CLHEP::HepDiagMatrix::HepDiagMatrix_row</class>
    <class kind="class">CLHEP::HepDiagMatrix::HepDiagMatrix_row_const</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>31a2609eafc176e4b92fe698689fdef6</anchor>
      <arglist>(std::ostream &amp;s, const HepDiagMatrix &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d942bcbae3a9b09519d15405aef05b0a</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepDiagMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>68122cef20a61448b2c579094591c680</anchor>
      <arglist>(const HepDiagMatrix &amp;m1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d3d6974f3fb5a99fcbb300e4ad26235a</anchor>
      <arglist>(double t, const HepDiagMatrix &amp;d1)</arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>1c36b9a17f9ffb5d099c5b27235a2a59</anchor>
      <arglist>(const HepDiagMatrix &amp;d1, double t)</arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix</type>
      <name>operator/</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>e6806d51166417e73623f312d804eb37</anchor>
      <arglist>(const HepDiagMatrix &amp;m1, double t)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>2ba5b8921d5071c73e0528098fe1f837</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepDiagMatrix &amp;d2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>6e3af73c6270a20a25170d073a911516</anchor>
      <arglist>(const HepDiagMatrix &amp;d1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>eb71185f41fccaa3b74d3a522e2a4c4e</anchor>
      <arglist>(const HepDiagMatrix &amp;m1, const HepDiagMatrix &amp;d2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>1dee7eb3ccc75b2c51603ab3f52413d4</anchor>
      <arglist>(const HepSymMatrix &amp;s1, const HepDiagMatrix &amp;d2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>dc69ca8afe62178142198ff428a30955</anchor>
      <arglist>(const HepDiagMatrix &amp;d1, const HepSymMatrix &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d055c9dbd6ced8b58ecf796a9c28c44f</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepDiagMatrix &amp;d2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>b4496766bab1fb58b71641a5f6dc7d5c</anchor>
      <arglist>(const HepDiagMatrix &amp;d1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>243df8d17439480f9be73baa777fc517</anchor>
      <arglist>(const HepDiagMatrix &amp;d1, const HepDiagMatrix &amp;d2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>fa39637554e4eae0b0fd7418f4da5dc2</anchor>
      <arglist>(const HepSymMatrix &amp;s1, const HepDiagMatrix &amp;d2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d1fec85bd73c143cc1056b9c900d3e86</anchor>
      <arglist>(const HepDiagMatrix &amp;d1, const HepSymMatrix &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix</type>
      <name>dsum</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d78be62a00ac75fc6d5da3108dea035b</anchor>
      <arglist>(const HepDiagMatrix &amp;s1, const HepDiagMatrix &amp;s2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DiagMatrix.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Matrix/</path>
    <filename>DiagMatrix_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>GenMatrix.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Matrix/</path>
    <filename>GenMatrix_8h</filename>
    <includes id="Matrix_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Matrix/defs.h</includes>
    <includes id="GenMatrix_8icc" name="GenMatrix.icc" local="yes" imported="no">CLHEP/Matrix/GenMatrix.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::HepGenMatrix</class>
    <class kind="class">CLHEP::HepGenMatrix::HepGenMatrix_row</class>
    <class kind="class">CLHEP::HepGenMatrix::HepGenMatrix_row_const</class>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>28f0d50c51683111410bf2babe4525cd</anchor>
      <arglist>(const HepGenMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm1</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>916a4ef4b3d3dba3910d7c1d8992a69c</anchor>
      <arglist>(const HepGenMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm_infinity</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>e4bfa139d338b6e2f17eea505a9a8fe2</anchor>
      <arglist>(const HepGenMatrix &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GenMatrix.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Matrix/</path>
    <filename>GenMatrix_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>Matrix.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Matrix/</path>
    <filename>Matrix_8h</filename>
    <includes id="Matrix_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Matrix/defs.h</includes>
    <includes id="GenMatrix_8h" name="GenMatrix.h" local="yes" imported="no">CLHEP/Matrix/GenMatrix.h</includes>
    <includes id="Matrix_8icc" name="Matrix.icc" local="yes" imported="no">CLHEP/Matrix/Matrix.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::HepMatrix</class>
    <class kind="class">CLHEP::HepMatrix::HepMatrix_row</class>
    <class kind="class">CLHEP::HepMatrix::HepMatrix_row_const</class>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>0e7316675a96e791fabf2e121c0f4fdc</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>8d53343615ccf963abd78999250c0758</anchor>
      <arglist>(double t, const HepMatrix &amp;m1)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>31441355203d37766f658cac6d126d1c</anchor>
      <arglist>(const HepMatrix &amp;m1, double t)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator/</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>b3eeb657359d27801541e665e8ae6b16</anchor>
      <arglist>(const HepMatrix &amp;m1, double t)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>12164e6526f4e898ededf9b999d28926</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>82bb5b89f5122742aa206addac5e9cdb</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>dsum</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>aaef0f78b2c890aa02da2385029439b5</anchor>
      <arglist>(const HepMatrix &amp;, const HepMatrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>solve</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f8d605df63d54a5b7311820bf3992c39</anchor>
      <arglist>(const HepMatrix &amp;, const HepVector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>7e726f40386135faef2c4afd520c10dd</anchor>
      <arglist>(std::ostream &amp;s, const HepMatrix &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>qr_solve</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>14fe9d6feb6c83aa1dfb1c312a982784</anchor>
      <arglist>(const HepMatrix &amp;A, const HepVector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>qr_solve</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>17ba0ed00155dbabf56a4c936111af09</anchor>
      <arglist>(HepMatrix *A, const HepVector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>qr_solve</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>8f42058a8bc5dae859b44cbccf29e924</anchor>
      <arglist>(const HepMatrix &amp;A, const HepMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>qr_solve</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>67591747a54fda571e90ac27c6a7f71a</anchor>
      <arglist>(HepMatrix *A, const HepMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>qr_inverse</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>2ce44039a207f923a572e3b4d23e7e73</anchor>
      <arglist>(const HepMatrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>qr_inverse</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>2f4251ad7072aa21cfb6c62a4cec78d5</anchor>
      <arglist>(HepMatrix *A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>qr_decomp</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>5ec0600fd235113a3096e0ef1a36674c</anchor>
      <arglist>(HepMatrix *A, HepMatrix *hsm)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>qr_decomp</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>9a21339d77fbce65c36fab9fd64f1d2f</anchor>
      <arglist>(HepMatrix *A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>back_solve</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>4b3b76ae2d61018370ef91807695bc0c</anchor>
      <arglist>(const HepMatrix &amp;R, HepVector *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>back_solve</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>ea2d648708234293325ebe2a9876a9c0</anchor>
      <arglist>(const HepMatrix &amp;R, HepMatrix *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>col_house</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>0a002fe2ff7e23d3426a2e60b0f4a738</anchor>
      <arglist>(HepMatrix *a, const HepMatrix &amp;v, double vnormsq, int row, int col, int row_start, int col_start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>col_house</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>ed9652287b2a0bd44de28c0007fe042e</anchor>
      <arglist>(HepMatrix *a, const HepMatrix &amp;v, int row, int col, int row_start, int col_start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>col_givens</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>eb2bd5790e229b66f96fea92e80ec13c</anchor>
      <arglist>(HepMatrix *A, double c, double s, int k1, int k2, int row_min=1, int row_max=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row_givens</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>9c2c099fc42cd7b868bfa432c0f9a0b4</anchor>
      <arglist>(HepMatrix *A, double c, double s, int k1, int k2, int col_min=1, int col_max=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>givens</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>c8c8df3202d6d42e489298359f4c1347</anchor>
      <arglist>(double a, double b, double *c, double *s)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>house</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>915f8de1600c953b5623a7b444e2ce3e</anchor>
      <arglist>(const HepMatrix &amp;a, int row=1, int col=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>house_with_update</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>3b4b5e5bec03c40768280230a84e366f</anchor>
      <arglist>(HepMatrix *a, int row=1, int col=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>house_with_update</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>9f4607ace2e7e5412caec7ce3a053e35</anchor>
      <arglist>(HepMatrix *a, HepMatrix *v, int row=1, int col=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row_house</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f2ada8961b0cfb2c8615da95c76c9117</anchor>
      <arglist>(HepMatrix *a, const HepVector &amp;v, double vnormsq, int row=1, int col=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row_house</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>2a9b23a3cd34b646c5ad8fc3d1711f88</anchor>
      <arglist>(HepMatrix *a, const HepMatrix &amp;v, double vnormsq, int row, int col, int row_start, int col_start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row_house</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>28b022eb4dd8ca56945f500d2b967011</anchor>
      <arglist>(HepMatrix *a, const HepMatrix &amp;v, int row, int col, int row_start, int col_start)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Matrix.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Matrix/</path>
    <filename>Matrix_8icc</filename>
    <namespace>CLHEP</namespace>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>3a2ab682946f9e0b4d6c81072fa6fac2</anchor>
      <arglist>(HepMatrix &amp;m1, HepMatrix &amp;m2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Pile.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Matrix/</path>
    <filename>Pile_8h</filename>
    <includes id="Matrix_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Matrix/defs.h</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::HepPile</class>
  </compound>
  <compound kind="file">
    <name>SymMatrix.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Matrix/</path>
    <filename>SymMatrix_8h</filename>
    <includes id="Matrix_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Matrix/defs.h</includes>
    <includes id="GenMatrix_8h" name="GenMatrix.h" local="yes" imported="no">CLHEP/Matrix/GenMatrix.h</includes>
    <includes id="SymMatrix_8icc" name="SymMatrix.icc" local="yes" imported="no">CLHEP/Matrix/SymMatrix.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::HepSymMatrix</class>
    <class kind="class">CLHEP::HepSymMatrix::HepSymMatrix_row</class>
    <class kind="class">CLHEP::HepSymMatrix::HepSymMatrix_row_const</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d223d08bcaaae52cb1be56c733d037bd</anchor>
      <arglist>(std::ostream &amp;s, const HepSymMatrix &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>c6a482199d6690fb2bc70c031cc72ea9</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepSymMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>ca5bb27e64147a428eb92eae0154a28e</anchor>
      <arglist>(const HepSymMatrix &amp;m1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>49bbfc5966bf4d139f3ef790ba1a65f1</anchor>
      <arglist>(const HepSymMatrix &amp;m1, const HepSymMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>be65dafba02b544a603788d8a95f3191</anchor>
      <arglist>(double t, const HepSymMatrix &amp;s1)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>e07f091aa371c7a794cfb118da69ecc9</anchor>
      <arglist>(const HepSymMatrix &amp;s1, double t)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>operator/</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>ea0c4ffeb5e28b233ae4121876f9d3a9</anchor>
      <arglist>(const HepSymMatrix &amp;m1, double t)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d97d173bc7ece262e5cce21a540faf48</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepSymMatrix &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f61faa2ef51681a81dd9a2131931fcdc</anchor>
      <arglist>(const HepSymMatrix &amp;s1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d3bf5905200ecf174d92769a2b1ef736</anchor>
      <arglist>(const HepSymMatrix &amp;s1, const HepSymMatrix &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>2d8dbc8b0b988ccc8c7c5a7f4c68822e</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepSymMatrix &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>a8e689f2b7e7406d16508db81eee3b8e</anchor>
      <arglist>(const HepSymMatrix &amp;m1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>91a70f994baf494df8fbb431b5fe5d08</anchor>
      <arglist>(const HepSymMatrix &amp;s1, const HepSymMatrix &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>dsum</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f8d8d4c7bd5ad34522707bac0da307ab</anchor>
      <arglist>(const HepSymMatrix &amp;s1, const HepSymMatrix &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>condition</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f38c1e505c594fc1d995e941037f9bb8</anchor>
      <arglist>(const HepSymMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diag_step</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>fef3ed1e7cc6b420e75baeae251f0c27</anchor>
      <arglist>(HepSymMatrix *t, int begin, int end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diag_step</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>b2886d27be093eeb06de5e1dc04db347</anchor>
      <arglist>(HepSymMatrix *t, HepMatrix *u, int begin, int end)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>diagonalize</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f47cf53a0f71aef329b65f208a292137</anchor>
      <arglist>(HepSymMatrix *s)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>house</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>09cea098de91ac852f45a09da4f53a9b</anchor>
      <arglist>(const HepSymMatrix &amp;a, int row=1, int col=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>house_with_update2</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>185e170cd03dad91aa0b25b662b43c51</anchor>
      <arglist>(HepSymMatrix *a, HepMatrix *v, int row=1, int col=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tridiagonal</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>0dd0a4aa38542f2a03bdf11d17c3dc7e</anchor>
      <arglist>(HepSymMatrix *a, HepMatrix *hsm)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>tridiagonal</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>9bebeba43de6b76bc290f378fe52923a</anchor>
      <arglist>(HepSymMatrix *a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SymMatrix.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Matrix/</path>
    <filename>SymMatrix_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>Vector.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Matrix/</path>
    <filename>Vector_8h</filename>
    <includes id="Matrix_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Matrix/defs.h</includes>
    <includes id="GenMatrix_8h" name="GenMatrix.h" local="yes" imported="no">CLHEP/Matrix/GenMatrix.h</includes>
    <includes id="Vector_8icc" name="Vector.icc" local="yes" imported="no">CLHEP/Matrix/Vector.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::HepVector</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>c00b59cfb73d38c32838ef130f71a9e6</anchor>
      <arglist>(std::ostream &amp;s, const HepVector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>7cc48fc78543f1de25fc2df884fe1e68</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepVector &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>aec0965e247dee7ec248dca68b373e42</anchor>
      <arglist>(double t, const HepVector &amp;v1)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>98c247afe02338fca6de4db04a6153df</anchor>
      <arglist>(const HepVector &amp;v1, double t)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator/</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>a9d9803d964ae9bd85c33dddd17ad21e</anchor>
      <arglist>(const HepVector &amp;v1, double t)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>0eb4830ff4266e12bb40e74bc38aa35c</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepVector &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>4e55449085f0eac5edd22b0b3d397636</anchor>
      <arglist>(const HepVector &amp;v1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>ab5e2ad0988c4b00d10eaf2aa2e33453</anchor>
      <arglist>(const HepVector &amp;v1, const HepVector &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>3be5785d5f65ed38b3b17a7a1f7eb0d6</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepVector &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>7948f7c274d5d50671f8c9cc6a89f088</anchor>
      <arglist>(const HepVector &amp;v1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>6415a8df77fa7117a1c06610c551064e</anchor>
      <arglist>(const HepVector &amp;v1, const HepVector &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>dsum</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>e9c08bc43b76dd7fe7d80446c762219f</anchor>
      <arglist>(const HepVector &amp;s1, const HepVector &amp;s2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vector.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Matrix/</path>
    <filename>Vector_8icc</filename>
    <namespace>CLHEP</namespace>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>ba66ad2e456257db131fced95d7aa975</anchor>
      <arglist>(HepVector &amp;v1, HepVector &amp;v2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DoubConv.hh</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>DoubConv_8hh</filename>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::DoubConvException</class>
    <class kind="class">CLHEP::DoubConv</class>
    <class kind="union">CLHEP::DoubConv::DB8</class>
  </compound>
  <compound kind="file">
    <name>DRand48Engine.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>DRand48Engine_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="RandomEngine_8h" name="RandomEngine.h" local="yes" imported="no">CLHEP/Random/RandomEngine.h</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::DRand48Engine</class>
    <member kind="define">
      <type>#define</type>
      <name>DRand48Engine_h</name>
      <anchorfile>DRand48Engine_8h.html</anchorfile>
      <anchor>3ca8caca0eecba7a9e2b791f18600e7e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DualRand.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>DualRand_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="RandomEngine_8h" name="RandomEngine.h" local="yes" imported="no">CLHEP/Random/RandomEngine.h</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::DualRand</class>
    <class kind="class">CLHEP::DualRand::Tausworthe</class>
    <class kind="class">CLHEP::DualRand::IntegerCong</class>
  </compound>
  <compound kind="file">
    <name>EngineFactory.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>EngineFactory_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="RandomEngine_8h" name="RandomEngine.h" local="yes" imported="no">CLHEP/Random/RandomEngine.h</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::EngineFactory</class>
    <member kind="define">
      <type>#define</type>
      <name>EngineFactory_h</name>
      <anchorfile>EngineFactory_8h.html</anchorfile>
      <anchor>9cf5680cb2aca32bf7bd359fad242975</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>engineIDulong.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>engineIDulong_8h</filename>
    <namespace>CLHEP</namespace>
    <member kind="define">
      <type>#define</type>
      <name>engineIDulong_h</name>
      <anchorfile>engineIDulong_8h.html</anchorfile>
      <anchor>3c7646fa7f4956b60599bbade2ee67c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>crc32ul</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>5222e5dfca56b9684ab59bea27e89405</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>engineIDulong</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>5bf07e06ac5ccddf41d8fc039bdfd968</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Hurd160Engine.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>Hurd160Engine_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="RandomEngine_8h" name="RandomEngine.h" local="yes" imported="no">CLHEP/Random/RandomEngine.h</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::Hurd160Engine</class>
  </compound>
  <compound kind="file">
    <name>Hurd288Engine.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>Hurd288Engine_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="RandomEngine_8h" name="RandomEngine.h" local="yes" imported="no">CLHEP/Random/RandomEngine.h</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::Hurd288Engine</class>
  </compound>
  <compound kind="file">
    <name>JamesRandom.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>JamesRandom_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="RandomEngine_8h" name="RandomEngine.h" local="yes" imported="no">CLHEP/Random/RandomEngine.h</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::HepJamesRandom</class>
    <member kind="define">
      <type>#define</type>
      <name>HepJamesRandom_h</name>
      <anchorfile>JamesRandom_8h.html</anchorfile>
      <anchor>bf97184b6020721f99483cf7cd8181e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MTwistEngine.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>MTwistEngine_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="RandomEngine_8h" name="RandomEngine.h" local="yes" imported="no">CLHEP/Random/RandomEngine.h</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::MTwistEngine</class>
  </compound>
  <compound kind="file">
    <name>NonRandomEngine.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>NonRandomEngine_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="RandomEngine_8h" name="RandomEngine.h" local="yes" imported="no">CLHEP/Random/RandomEngine.h</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::NonRandomEngine</class>
    <member kind="define">
      <type>#define</type>
      <name>NonRandomEngine_h</name>
      <anchorfile>NonRandomEngine_8h.html</anchorfile>
      <anchor>2cd88e076c392ea498d6cc9abb60d767</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandBinomial.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandBinomial_8h</filename>
    <includes id="Random_8h" name="Random.h" local="yes" imported="no">CLHEP/Random/Random.h</includes>
    <includes id="RandBinomial_8icc" name="RandBinomial.icc" local="yes" imported="no">CLHEP/Random/RandBinomial.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::RandBinomial</class>
    <member kind="define">
      <type>#define</type>
      <name>RandBinomial_h</name>
      <anchorfile>RandBinomial_8h.html</anchorfile>
      <anchor>6eb37ec671829904bc583861bf2fa678</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandBinomial.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandBinomial_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>RandBit.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandBit_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="RandFlat_8h" name="RandFlat.h" local="yes" imported="no">CLHEP/Random/RandFlat.h</includes>
    <includes id="RandBit_8icc" name="RandBit.icc" local="yes" imported="no">CLHEP/Random/RandBit.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::RandBit</class>
    <member kind="define">
      <type>#define</type>
      <name>RandBit_h</name>
      <anchorfile>RandBit_8h.html</anchorfile>
      <anchor>f9542f5e3fcff3a96cb0dbed6fcd2bdb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandBit.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandBit_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>RandBreitWigner.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandBreitWigner_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="RandFlat_8h" name="RandFlat.h" local="yes" imported="no">CLHEP/Random/RandFlat.h</includes>
    <includes id="RandBreitWigner_8icc" name="RandBreitWigner.icc" local="yes" imported="no">CLHEP/Random/RandBreitWigner.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::RandBreitWigner</class>
    <member kind="define">
      <type>#define</type>
      <name>RandBreitWigner_h</name>
      <anchorfile>RandBreitWigner_8h.html</anchorfile>
      <anchor>ee05aa554834698876859824e7f8e104</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandBreitWigner.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandBreitWigner_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>RandChiSquare.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandChiSquare_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="Random_8h" name="Random.h" local="yes" imported="no">CLHEP/Random/Random.h</includes>
    <includes id="RandChiSquare_8icc" name="RandChiSquare.icc" local="yes" imported="no">CLHEP/Random/RandChiSquare.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::RandChiSquare</class>
    <member kind="define">
      <type>#define</type>
      <name>RandChiSquare_h</name>
      <anchorfile>RandChiSquare_8h.html</anchorfile>
      <anchor>f66b09e1cc2265ddd6f6b06d1d6a181f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandChiSquare.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandChiSquare_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>RandEngine.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandEngine_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="RandomEngine_8h" name="RandomEngine.h" local="yes" imported="no">CLHEP/Random/RandomEngine.h</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::RandEngine</class>
    <member kind="define">
      <type>#define</type>
      <name>RandEngine_h</name>
      <anchorfile>RandEngine_8h.html</anchorfile>
      <anchor>b17abef8a656eab23be0144ad3c3b123</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandExponential.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandExponential_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="Random_8h" name="Random.h" local="yes" imported="no">CLHEP/Random/Random.h</includes>
    <includes id="RandExponential_8icc" name="RandExponential.icc" local="yes" imported="no">CLHEP/Random/RandExponential.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::RandExponential</class>
    <member kind="define">
      <type>#define</type>
      <name>RandExponential_h</name>
      <anchorfile>RandExponential_8h.html</anchorfile>
      <anchor>d007eacb08c8ae7d58fb0761879fb7b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandExponential.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandExponential_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>RandFlat.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandFlat_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="Random_8h" name="Random.h" local="yes" imported="no">CLHEP/Random/Random.h</includes>
    <includes id="RandFlat_8icc" name="RandFlat.icc" local="yes" imported="no">CLHEP/Random/RandFlat.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::RandFlat</class>
    <member kind="define">
      <type>#define</type>
      <name>RandFlat_h</name>
      <anchorfile>RandFlat_8h.html</anchorfile>
      <anchor>c65dadd96c036ca28f61ee62e9fdb307</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandFlat.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandFlat_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>RandGamma.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandGamma_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="Random_8h" name="Random.h" local="yes" imported="no">CLHEP/Random/Random.h</includes>
    <includes id="RandGamma_8icc" name="RandGamma.icc" local="yes" imported="no">CLHEP/Random/RandGamma.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::RandGamma</class>
    <member kind="define">
      <type>#define</type>
      <name>RandGamma_h</name>
      <anchorfile>RandGamma_8h.html</anchorfile>
      <anchor>84837b9f42420eb3b27954b5e842ff32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandGamma.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandGamma_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>RandGauss.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandGauss_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="Random_8h" name="Random.h" local="yes" imported="no">CLHEP/Random/Random.h</includes>
    <includes id="RandGauss_8icc" name="RandGauss.icc" local="yes" imported="no">CLHEP/Random/RandGauss.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::RandGauss</class>
    <member kind="define">
      <type>#define</type>
      <name>RandGauss_h</name>
      <anchorfile>RandGauss_8h.html</anchorfile>
      <anchor>f90d1ecd274e79f08def52c6dea5e28e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandGauss.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandGauss_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>RandGaussQ.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandGaussQ_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="RandGauss_8h" name="RandGauss.h" local="yes" imported="no">CLHEP/Random/RandGauss.h</includes>
    <includes id="RandGaussQ_8icc" name="RandGaussQ.icc" local="yes" imported="no">CLHEP/Random/RandGaussQ.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::RandGaussQ</class>
    <member kind="define">
      <type>#define</type>
      <name>RandGaussQ_h</name>
      <anchorfile>RandGaussQ_8h.html</anchorfile>
      <anchor>3999a4b3b577df0edfbd910687bbd10f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandGaussQ.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandGaussQ_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>RandGaussT.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandGaussT_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="RandGauss_8h" name="RandGauss.h" local="yes" imported="no">CLHEP/Random/RandGauss.h</includes>
    <includes id="Stat_8h" name="Stat.h" local="yes" imported="no">CLHEP/Random/Stat.h</includes>
    <includes id="RandGaussT_8icc" name="RandGaussT.icc" local="yes" imported="no">CLHEP/Random/RandGaussT.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::RandGaussT</class>
    <member kind="define">
      <type>#define</type>
      <name>RandGaussT_h</name>
      <anchorfile>RandGaussT_8h.html</anchorfile>
      <anchor>f40fa8775b4fdad4ff02ca0f0ded60dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandGaussT.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandGaussT_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>RandGeneral.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandGeneral_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="Random_8h" name="Random.h" local="yes" imported="no">CLHEP/Random/Random.h</includes>
    <includes id="RandGeneral_8icc" name="RandGeneral.icc" local="yes" imported="no">CLHEP/Random/RandGeneral.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::RandGeneral</class>
    <member kind="define">
      <type>#define</type>
      <name>RandGeneral_h</name>
      <anchorfile>RandGeneral_8h.html</anchorfile>
      <anchor>bcfd6141c5d5ac2cbd32f1357fa8aa11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandGeneral.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandGeneral_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>RandLandau.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandLandau_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="Random_8h" name="Random.h" local="yes" imported="no">CLHEP/Random/Random.h</includes>
    <includes id="RandLandau_8icc" name="RandLandau.icc" local="yes" imported="no">CLHEP/Random/RandLandau.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::RandLandau</class>
    <member kind="define">
      <type>#define</type>
      <name>RandLandau_h</name>
      <anchorfile>RandLandau_8h.html</anchorfile>
      <anchor>a772e8fc992ad259917e7f3096af697e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandLandau.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandLandau_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>Random.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>Random_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="RandomEngine_8h" name="RandomEngine.h" local="yes" imported="no">CLHEP/Random/RandomEngine.h</includes>
    <includes id="Random_8icc" name="Random.icc" local="yes" imported="no">CLHEP/Random/Random.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::HepRandom</class>
    <member kind="define">
      <type>#define</type>
      <name>HepRandom_h</name>
      <anchorfile>Random_8h.html</anchorfile>
      <anchor>5e40ea758f4a313c7a9fbca5cdaf52e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>e519db6fc4bfa495384f0c989e79dac8</anchor>
      <arglist>(std::ostream &amp;os, const HepRandom &amp;dist)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>a553dd5c025e195afe7b976a19b14253</anchor>
      <arglist>(std::istream &amp;is, HepRandom &amp;dist)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Random.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>Random_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>RandomEngine.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandomEngine_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="RandomEngine_8icc" name="RandomEngine.icc" local="yes" imported="no">CLHEP/Random/RandomEngine.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::HepRandomEngine</class>
    <member kind="define">
      <type>#define</type>
      <name>HepRandomEngine_h</name>
      <anchorfile>RandomEngine_8h.html</anchorfile>
      <anchor>3c2d94f498d18126f505989fabc8ff37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>3e932cc838db4d02a79ea6464e15418a</anchor>
      <arglist>(std::ostream &amp;os, const HepRandomEngine &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>ebe4a1f30ce16458e56473fa8c97bf6e</anchor>
      <arglist>(std::istream &amp;is, HepRandomEngine &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>possibleKeywordInput</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>eeec2194ec1388cee0b328599f0141d5</anchor>
      <arglist>(IS &amp;is, const std::string &amp;key, T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandomEngine.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandomEngine_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>RandomFunc.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandomFunc_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <namespace>CLHEP</namespace>
    <member kind="function">
      <type>double</type>
      <name>drand48</name>
      <anchorfile>RandomFunc_8h.html</anchorfile>
      <anchor>f9329f9acef07ca14ea2256191c3ce74</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>srand48</name>
      <anchorfile>RandomFunc_8h.html</anchorfile>
      <anchor>00f00795b1045ba8a8eba4cb8ac25366</anchor>
      <arglist>(long)</arglist>
    </member>
    <member kind="function">
      <type>unsigned short *</type>
      <name>seed48</name>
      <anchorfile>RandomFunc_8h.html</anchorfile>
      <anchor>c338a06572b637e1bf8dc50f768f42a0</anchor>
      <arglist>(unsigned short int[3])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Randomize.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>Randomize_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="DRand48Engine_8h" name="DRand48Engine.h" local="yes" imported="no">CLHEP/Random/DRand48Engine.h</includes>
    <includes id="DualRand_8h" name="DualRand.h" local="yes" imported="no">CLHEP/Random/DualRand.h</includes>
    <includes id="Hurd160Engine_8h" name="Hurd160Engine.h" local="yes" imported="no">CLHEP/Random/Hurd160Engine.h</includes>
    <includes id="Hurd288Engine_8h" name="Hurd288Engine.h" local="yes" imported="no">CLHEP/Random/Hurd288Engine.h</includes>
    <includes id="JamesRandom_8h" name="JamesRandom.h" local="yes" imported="no">CLHEP/Random/JamesRandom.h</includes>
    <includes id="MTwistEngine_8h" name="MTwistEngine.h" local="yes" imported="no">CLHEP/Random/MTwistEngine.h</includes>
    <includes id="RandEngine_8h" name="RandEngine.h" local="yes" imported="no">CLHEP/Random/RandEngine.h</includes>
    <includes id="RanecuEngine_8h" name="RanecuEngine.h" local="yes" imported="no">CLHEP/Random/RanecuEngine.h</includes>
    <includes id="RanluxEngine_8h" name="RanluxEngine.h" local="yes" imported="no">CLHEP/Random/RanluxEngine.h</includes>
    <includes id="Ranlux64Engine_8h" name="Ranlux64Engine.h" local="yes" imported="no">CLHEP/Random/Ranlux64Engine.h</includes>
    <includes id="RanshiEngine_8h" name="RanshiEngine.h" local="yes" imported="no">CLHEP/Random/RanshiEngine.h</includes>
    <includes id="TripleRand_8h" name="TripleRand.h" local="yes" imported="no">CLHEP/Random/TripleRand.h</includes>
    <includes id="RandBinomial_8h" name="RandBinomial.h" local="yes" imported="no">CLHEP/Random/RandBinomial.h</includes>
    <includes id="RandBreitWigner_8h" name="RandBreitWigner.h" local="yes" imported="no">CLHEP/Random/RandBreitWigner.h</includes>
    <includes id="RandChiSquare_8h" name="RandChiSquare.h" local="yes" imported="no">CLHEP/Random/RandChiSquare.h</includes>
    <includes id="RandExponential_8h" name="RandExponential.h" local="yes" imported="no">CLHEP/Random/RandExponential.h</includes>
    <includes id="RandFlat_8h" name="RandFlat.h" local="yes" imported="no">CLHEP/Random/RandFlat.h</includes>
    <includes id="RandBit_8h" name="RandBit.h" local="yes" imported="no">CLHEP/Random/RandBit.h</includes>
    <includes id="RandGamma_8h" name="RandGamma.h" local="yes" imported="no">CLHEP/Random/RandGamma.h</includes>
    <includes id="RandGauss_8h" name="RandGauss.h" local="yes" imported="no">CLHEP/Random/RandGauss.h</includes>
    <includes id="RandGaussQ_8h" name="RandGaussQ.h" local="yes" imported="no">CLHEP/Random/RandGaussQ.h</includes>
    <includes id="RandGaussT_8h" name="RandGaussT.h" local="yes" imported="no">CLHEP/Random/RandGaussT.h</includes>
    <includes id="RandGeneral_8h" name="RandGeneral.h" local="yes" imported="no">CLHEP/Random/RandGeneral.h</includes>
    <includes id="RandLandau_8h" name="RandLandau.h" local="yes" imported="no">CLHEP/Random/RandLandau.h</includes>
    <includes id="RandPoissonQ_8h" name="RandPoissonQ.h" local="yes" imported="no">CLHEP/Random/RandPoissonQ.h</includes>
    <includes id="RandPoissonT_8h" name="RandPoissonT.h" local="yes" imported="no">CLHEP/Random/RandPoissonT.h</includes>
    <includes id="RandStudentT_8h" name="RandStudentT.h" local="yes" imported="no">CLHEP/Random/RandStudentT.h</includes>
    <namespace>CLHEP</namespace>
    <member kind="define">
      <type>#define</type>
      <name>Rndmze_h</name>
      <anchorfile>Randomize_8h.html</anchorfile>
      <anchor>534a306b808c7b1a8b20ae62f14cf9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HepUniformRand</name>
      <anchorfile>Randomize_8h.html</anchorfile>
      <anchor>4c0390ddbe12e59895107e6b96507631</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandPoisson.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandPoisson_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="Random_8h" name="Random.h" local="yes" imported="no">CLHEP/Random/Random.h</includes>
    <includes id="RandPoisson_8icc" name="RandPoisson.icc" local="yes" imported="no">CLHEP/Random/RandPoisson.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::RandPoisson</class>
    <member kind="define">
      <type>#define</type>
      <name>RandPoisson_h</name>
      <anchorfile>RandPoisson_8h.html</anchorfile>
      <anchor>09e22c16bee0ee09376c82d6bb27820d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandPoisson.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandPoisson_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>RandPoissonQ.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandPoissonQ_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="Random_8h" name="Random.h" local="yes" imported="no">CLHEP/Random/Random.h</includes>
    <includes id="RandPoisson_8h" name="RandPoisson.h" local="yes" imported="no">CLHEP/Random/RandPoisson.h</includes>
    <includes id="RandPoissonQ_8icc" name="RandPoissonQ.icc" local="yes" imported="no">CLHEP/Random/RandPoissonQ.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::RandPoissonQ</class>
    <member kind="define">
      <type>#define</type>
      <name>RandPoissonQ_h</name>
      <anchorfile>RandPoissonQ_8h.html</anchorfile>
      <anchor>d090132593bb545196155aa78dadc35c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandPoissonQ.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandPoissonQ_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>RandPoissonT.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandPoissonT_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="RandPoisson_8h" name="RandPoisson.h" local="yes" imported="no">CLHEP/Random/RandPoisson.h</includes>
    <includes id="RandPoissonT_8icc" name="RandPoissonT.icc" local="yes" imported="no">CLHEP/Random/RandPoissonT.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::RandPoissonT</class>
    <member kind="define">
      <type>#define</type>
      <name>RandPoissonT_h</name>
      <anchorfile>RandPoissonT_8h.html</anchorfile>
      <anchor>ccce4e8744c35328e7e159f7bf30fa6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandPoissonT.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandPoissonT_8icc</filename>
  </compound>
  <compound kind="file">
    <name>RandStudentT.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandStudentT_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="Random_8h" name="Random.h" local="yes" imported="no">CLHEP/Random/Random.h</includes>
    <includes id="RandStudentT_8icc" name="RandStudentT.icc" local="yes" imported="no">CLHEP/Random/RandStudentT.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::RandStudentT</class>
    <member kind="define">
      <type>#define</type>
      <name>RandStudentT_h</name>
      <anchorfile>RandStudentT_8h.html</anchorfile>
      <anchor>dc858b5b8ad94e710d4408969c179d1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandStudentT.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RandStudentT_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>RanecuEngine.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RanecuEngine_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="RandomEngine_8h" name="RandomEngine.h" local="yes" imported="no">CLHEP/Random/RandomEngine.h</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::RanecuEngine</class>
    <member kind="define">
      <type>#define</type>
      <name>RanecuEngine_h</name>
      <anchorfile>RanecuEngine_8h.html</anchorfile>
      <anchor>7a4058ac682601e62a18a0b7b9c2bf25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ranlux64Engine.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>Ranlux64Engine_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="RandomEngine_8h" name="RandomEngine.h" local="yes" imported="no">CLHEP/Random/RandomEngine.h</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::Ranlux64Engine</class>
  </compound>
  <compound kind="file">
    <name>RanluxEngine.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RanluxEngine_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="RandomEngine_8h" name="RandomEngine.h" local="yes" imported="no">CLHEP/Random/RandomEngine.h</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::RanluxEngine</class>
    <member kind="define">
      <type>#define</type>
      <name>RanluxEngine_h</name>
      <anchorfile>RanluxEngine_8h.html</anchorfile>
      <anchor>80c2cebfeef30c4aa9934e8fd1fc5d94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RanshiEngine.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>RanshiEngine_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="RandomEngine_8h" name="RandomEngine.h" local="yes" imported="no">CLHEP/Random/RandomEngine.h</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::RanshiEngine</class>
  </compound>
  <compound kind="file">
    <name>SeedTable.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>SeedTable_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <namespace>CLHEP</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SeedTable_h</name>
      <anchorfile>SeedTable_8h.html</anchorfile>
      <anchor>eaca809c7e87109f7afea820e840966a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Stat.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>Stat_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::HepStat</class>
    <member kind="define">
      <type>#define</type>
      <name>HepStat_h</name>
      <anchorfile>Stat_8h.html</anchorfile>
      <anchor>d44d06dbbc0af47d0976229cf09cee23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StaticRandomStates.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>StaticRandomStates_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::StaticRandomStates</class>
    <member kind="define">
      <type>#define</type>
      <name>StaticRandomStates_h</name>
      <anchorfile>StaticRandomStates_8h.html</anchorfile>
      <anchor>7d06ff6643748571fb11d5a5ca9ecef4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TripleRand.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Random/</path>
    <filename>TripleRand_8h</filename>
    <includes id="Random_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Random/defs.h</includes>
    <includes id="RandomEngine_8h" name="RandomEngine.h" local="yes" imported="no">CLHEP/Random/RandomEngine.h</includes>
    <includes id="Hurd288Engine_8h" name="Hurd288Engine.h" local="yes" imported="no">CLHEP/Random/Hurd288Engine.h</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::TripleRand</class>
    <class kind="class">CLHEP::TripleRand::Tausworthe</class>
    <class kind="class">CLHEP::TripleRand::IntegerCong</class>
  </compound>
  <compound kind="file">
    <name>RandMultiGauss.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/RandomObjects/</path>
    <filename>RandMultiGauss_8h</filename>
    <includes id="RandomObjects_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/RandomObjects/defs.h</includes>
    <includes id="RandomEngine_8h" name="RandomEngine.h" local="yes" imported="no">CLHEP/Random/RandomEngine.h</includes>
    <includes id="RandomVector_8h" name="RandomVector.h" local="yes" imported="no">CLHEP/RandomObjects/RandomVector.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="yes" imported="no">CLHEP/Matrix/Vector.h</includes>
    <includes id="Matrix_8h" name="Matrix.h" local="yes" imported="no">CLHEP/Matrix/Matrix.h</includes>
    <includes id="SymMatrix_8h" name="SymMatrix.h" local="yes" imported="no">CLHEP/Matrix/SymMatrix.h</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::RandMultiGauss</class>
    <member kind="define">
      <type>#define</type>
      <name>RandMultiGauss_h</name>
      <anchorfile>RandMultiGauss_8h.html</anchorfile>
      <anchor>54925208757aa78d304a93335625e242</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandomVector.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/RandomObjects/</path>
    <filename>RandomVector_8h</filename>
    <includes id="RandomObjects_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/RandomObjects/defs.h</includes>
    <includes id="RandomEngine_8h" name="RandomEngine.h" local="yes" imported="no">CLHEP/Random/RandomEngine.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="yes" imported="no">CLHEP/Matrix/Vector.h</includes>
    <includes id="RandomVector_8icc" name="RandomVector.icc" local="yes" imported="no">CLHEP/RandomObjects/RandomVector.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::HepRandomVector</class>
    <member kind="define">
      <type>#define</type>
      <name>HepRandomVector_h</name>
      <anchorfile>RandomVector_8h.html</anchorfile>
      <anchor>76a010e8b2fceac532f228d4b8261f25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandomVector.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/RandomObjects/</path>
    <filename>RandomVector_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>ZMhandleTo.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/RefCount/</path>
    <filename>ZMhandleTo_8h</filename>
    <includes id="ZMuseCount_8h" name="ZMuseCount.h" local="yes" imported="no">CLHEP/RefCount/ZMuseCount.h</includes>
    <includes id="ZMhandleTo_8icc" name="ZMhandleTo.icc" local="yes" imported="no">CLHEP/RefCount/ZMhandleTo.icc</includes>
    <class kind="class">ZMhandleTo</class>
  </compound>
  <compound kind="file">
    <name>ZMhandleTo.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/RefCount/</path>
    <filename>ZMhandleTo_8icc</filename>
  </compound>
  <compound kind="file">
    <name>ZMuseCount.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/RefCount/</path>
    <filename>ZMuseCount_8h</filename>
    <class kind="class">ZMuseCount</class>
  </compound>
  <compound kind="file">
    <name>ZMuseCount.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/RefCount/</path>
    <filename>ZMuseCount_8icc</filename>
  </compound>
  <compound kind="file">
    <name>GlobalPhysicalConstants.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Units/</path>
    <filename>GlobalPhysicalConstants_8h</filename>
    <includes id="PhysicalConstants_8h" name="PhysicalConstants.h" local="yes" imported="no">CLHEP/Units/PhysicalConstants.h</includes>
  </compound>
  <compound kind="file">
    <name>GlobalSystemOfUnits.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Units/</path>
    <filename>GlobalSystemOfUnits_8h</filename>
    <includes id="SystemOfUnits_8h" name="SystemOfUnits.h" local="yes" imported="no">CLHEP/Units/SystemOfUnits.h</includes>
  </compound>
  <compound kind="file">
    <name>PhysicalConstants.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Units/</path>
    <filename>PhysicalConstants_8h</filename>
    <includes id="Units_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Units/defs.h</includes>
    <includes id="SystemOfUnits_8h" name="SystemOfUnits.h" local="yes" imported="no">CLHEP/Units/SystemOfUnits.h</includes>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>SystemOfUnits.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Units/</path>
    <filename>SystemOfUnits_8h</filename>
    <includes id="Units_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Units/defs.h</includes>
    <namespace>CLHEP</namespace>
    <member kind="define">
      <type>#define</type>
      <name>pascal</name>
      <anchorfile>SystemOfUnits_8h.html</anchorfile>
      <anchor>d7133dd2108e078049b3603f686028d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AxisAngle.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>AxisAngle_8h</filename>
    <includes id="Vector_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Vector/defs.h</includes>
    <includes id="AxisAngle_8icc" name="AxisAngle.icc" local="yes" imported="no">CLHEP/Vector/AxisAngle.icc</includes>
    <includes id="ThreeVector_8h" name="ThreeVector.h" local="yes" imported="no">CLHEP/Vector/ThreeVector.h</includes>
    <namespace>CLHEP</namespace>
    <namespace>zmpv</namespace>
    <class kind="class">CLHEP::HepAxisAngle</class>
    <member kind="define">
      <type>#define</type>
      <name>AXISANGLE_ICC</name>
      <anchorfile>AxisAngle_8h.html</anchorfile>
      <anchor>8d9d7d1c8e4efffd47090003ac7a91b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CLHEP::HepAxisAngle</type>
      <name>AxisAngle</name>
      <anchorfile>namespacezmpv.html</anchorfile>
      <anchor>64d94ed6c14d4ca64404775a50564e4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>15867efdf2bc6a4585d36bbefb8be2c2</anchor>
      <arglist>(std::ostream &amp;os, const HepAxisAngle &amp;aa)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>6133e993a72844c7c8c1c15a71188b1b</anchor>
      <arglist>(std::istream &amp;is, HepAxisAngle &amp;aa)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AxisAngle.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>AxisAngle_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>Boost.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>Boost_8h</filename>
    <includes id="Vector_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Vector/defs.h</includes>
    <includes id="RotationInterfaces_8h" name="RotationInterfaces.h" local="yes" imported="no">CLHEP/Vector/RotationInterfaces.h</includes>
    <includes id="BoostX_8h" name="BoostX.h" local="yes" imported="no">CLHEP/Vector/BoostX.h</includes>
    <includes id="BoostY_8h" name="BoostY.h" local="yes" imported="no">CLHEP/Vector/BoostY.h</includes>
    <includes id="BoostZ_8h" name="BoostZ.h" local="yes" imported="no">CLHEP/Vector/BoostZ.h</includes>
    <includes id="LorentzVector_8h" name="LorentzVector.h" local="yes" imported="no">CLHEP/Vector/LorentzVector.h</includes>
    <includes id="Boost_8icc" name="Boost.icc" local="yes" imported="no">CLHEP/Vector/Boost.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::HepBoost</class>
    <member kind="function">
      <type>HepBoost</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>8a3d8dd2631e134df7b012fe04a207b2</anchor>
      <arglist>(const HepBoost &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>6093b9e3c096100a86e2292ad4afb1e7</anchor>
      <arglist>(std::ostream &amp;os, const HepBoost &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Boost.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>Boost_8icc</filename>
    <namespace>CLHEP</namespace>
    <member kind="function">
      <type>HepBoost</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>8a3d8dd2631e134df7b012fe04a207b2</anchor>
      <arglist>(const HepBoost &amp;lt)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoostX.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>BoostX_8h</filename>
    <includes id="Vector_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Vector/defs.h</includes>
    <includes id="RotationInterfaces_8h" name="RotationInterfaces.h" local="yes" imported="no">CLHEP/Vector/RotationInterfaces.h</includes>
    <includes id="LorentzVector_8h" name="LorentzVector.h" local="yes" imported="no">CLHEP/Vector/LorentzVector.h</includes>
    <includes id="BoostX_8icc" name="BoostX.icc" local="yes" imported="no">CLHEP/Vector/BoostX.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::HepBoostX</class>
    <member kind="function">
      <type>HepBoostX</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>664ccdd5e4a09a486ac5332450b01cb4</anchor>
      <arglist>(const HepBoostX &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>52d2e883eae31a1089c1a9fc3ae8211b</anchor>
      <arglist>(std::ostream &amp;os, const HepBoostX &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoostX.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>BoostX_8icc</filename>
    <namespace>CLHEP</namespace>
    <member kind="function">
      <type>HepBoostX</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>664ccdd5e4a09a486ac5332450b01cb4</anchor>
      <arglist>(const HepBoostX &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoostY.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>BoostY_8h</filename>
    <includes id="Vector_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Vector/defs.h</includes>
    <includes id="RotationInterfaces_8h" name="RotationInterfaces.h" local="yes" imported="no">CLHEP/Vector/RotationInterfaces.h</includes>
    <includes id="LorentzVector_8h" name="LorentzVector.h" local="yes" imported="no">CLHEP/Vector/LorentzVector.h</includes>
    <includes id="BoostY_8icc" name="BoostY.icc" local="yes" imported="no">CLHEP/Vector/BoostY.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::HepBoostY</class>
    <member kind="function">
      <type>HepBoostY</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f1abbf30174011cfb976c221d21b4e59</anchor>
      <arglist>(const HepBoostY &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>9a81d9d3c7424faefb3979979c6fff4a</anchor>
      <arglist>(std::ostream &amp;os, const HepBoostY &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoostY.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>BoostY_8icc</filename>
    <namespace>CLHEP</namespace>
    <member kind="function">
      <type>HepBoostY</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f1abbf30174011cfb976c221d21b4e59</anchor>
      <arglist>(const HepBoostY &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoostZ.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>BoostZ_8h</filename>
    <includes id="Vector_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Vector/defs.h</includes>
    <includes id="RotationInterfaces_8h" name="RotationInterfaces.h" local="yes" imported="no">CLHEP/Vector/RotationInterfaces.h</includes>
    <includes id="LorentzVector_8h" name="LorentzVector.h" local="yes" imported="no">CLHEP/Vector/LorentzVector.h</includes>
    <includes id="BoostZ_8icc" name="BoostZ.icc" local="yes" imported="no">CLHEP/Vector/BoostZ.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::HepBoostZ</class>
    <member kind="function">
      <type>HepBoostZ</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>fd113d4cb0a5b704b6cd3e9a424387c0</anchor>
      <arglist>(const HepBoostZ &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>b6fb10725b5c35c0b29f30fff48010d3</anchor>
      <arglist>(std::ostream &amp;os, const HepBoostZ &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoostZ.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>BoostZ_8icc</filename>
    <namespace>CLHEP</namespace>
    <member kind="function">
      <type>HepBoostZ</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>fd113d4cb0a5b704b6cd3e9a424387c0</anchor>
      <arglist>(const HepBoostZ &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EulerAngles.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>EulerAngles_8h</filename>
    <includes id="Vector_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Vector/defs.h</includes>
    <includes id="EulerAngles_8icc" name="EulerAngles.icc" local="yes" imported="no">CLHEP/Vector/EulerAngles.icc</includes>
    <namespace>CLHEP</namespace>
    <namespace>zmpv</namespace>
    <class kind="class">CLHEP::HepEulerAngles</class>
    <member kind="define">
      <type>#define</type>
      <name>EULERANGLES_ICC</name>
      <anchorfile>EulerAngles_8h.html</anchorfile>
      <anchor>eb3938c9583d8de51c7d4fa03bf7843d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CLHEP::HepEulerAngles</type>
      <name>EulerAngles</name>
      <anchorfile>namespacezmpv.html</anchorfile>
      <anchor>b1be50579561768ba547cb14668f37d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f8d95d5c28d143dd4fc928269d48520b</anchor>
      <arglist>(std::ostream &amp;os, const HepEulerAngles &amp;aa)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>eef19b60b635564bbf42036260377808</anchor>
      <arglist>(std::istream &amp;is, HepEulerAngles &amp;aa)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EulerAngles.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>EulerAngles_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>LorentzRotation.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>LorentzRotation_8h</filename>
    <includes id="Vector_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Vector/defs.h</includes>
    <includes id="RotationInterfaces_8h" name="RotationInterfaces.h" local="yes" imported="no">CLHEP/Vector/RotationInterfaces.h</includes>
    <includes id="Rotation_8h" name="Rotation.h" local="yes" imported="no">CLHEP/Vector/Rotation.h</includes>
    <includes id="Boost_8h" name="Boost.h" local="yes" imported="no">CLHEP/Vector/Boost.h</includes>
    <includes id="LorentzVector_8h" name="LorentzVector.h" local="yes" imported="no">CLHEP/Vector/LorentzVector.h</includes>
    <includes id="LorentzRotation_8icc" name="LorentzRotation.icc" local="yes" imported="no">CLHEP/Vector/LorentzRotation.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::HepLorentzRotation</class>
    <class kind="class">CLHEP::HepLorentzRotation::HepLorentzRotation_row</class>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>0c876c44bd0a88ed7388290a27adf6b3</anchor>
      <arglist>(const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>4a4b0ed3527fc16695f02cb37e16106b</anchor>
      <arglist>(const HepRotation &amp;r, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>3235d0f15a629c0c40b872e45e1d79a5</anchor>
      <arglist>(const HepRotationX &amp;r, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>93fbf7b9934bd8d2d48c1eb3ad994cea</anchor>
      <arglist>(const HepRotationY &amp;r, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>33786260cf167734dbacd9d478e798f4</anchor>
      <arglist>(const HepRotationZ &amp;r, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>a93425b123cd369167c94598dcb32b0f</anchor>
      <arglist>(std::ostream &amp;os, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d43227f04d6b8d048bf63297cd48dca8</anchor>
      <arglist>(const HepRotation &amp;r, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>6e99c22bd7539ac29fac7cf8d608121f</anchor>
      <arglist>(const HepRotation &amp;r, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>143b008726aaafc4c939c01d507999c4</anchor>
      <arglist>(const HepRotation &amp;r, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>302edfe28f349c84e7f54808c9edcdb8</anchor>
      <arglist>(const HepRotation &amp;r, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>de225eddfc3307b99cd92922459b7721</anchor>
      <arglist>(const HepRotation &amp;r, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>0a73395e3efb4c9d3b298dface2d2252</anchor>
      <arglist>(const HepRotation &amp;r, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>5390c4781882d61d9d867c4c283e52d4</anchor>
      <arglist>(const HepBoost &amp;b, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>c7ef3a775eae0236d4422e09b40f1d52</anchor>
      <arglist>(const HepBoost &amp;b, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>c99443029b8cf181a48c7c539abef4dd</anchor>
      <arglist>(const HepBoost &amp;b, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>70b954ea931248545048c7a37a81440b</anchor>
      <arglist>(const HepBoost &amp;b, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>7916e5f999a076bb0cfed51d6ec6baaf</anchor>
      <arglist>(const HepBoost &amp;b, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>37f8649d5a022585bf8e2a3fb8e610ba</anchor>
      <arglist>(const HepBoost &amp;b, const HepLorentzRotation &amp;lt)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LorentzRotation.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>LorentzRotation_8icc</filename>
    <namespace>CLHEP</namespace>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>0c876c44bd0a88ed7388290a27adf6b3</anchor>
      <arglist>(const HepLorentzRotation &amp;lt)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LorentzVector.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>LorentzVector_8h</filename>
    <includes id="Vector_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Vector/defs.h</includes>
    <includes id="ThreeVector_8h" name="ThreeVector.h" local="yes" imported="no">CLHEP/Vector/ThreeVector.h</includes>
    <includes id="LorentzVector_8icc" name="LorentzVector.icc" local="yes" imported="no">CLHEP/Vector/LorentzVector.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::HepLorentzVector</class>
    <class kind="class">CLHEP::Tcomponent</class>
    <member kind="typedef">
      <type>HepLorentzVector</type>
      <name>HepLorentzVectorD</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>1842e8b2ef32918b058ebe9a8429ab31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HepLorentzVector</type>
      <name>HepLorentzVectorF</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>87dcb2c748f810f04a8c6b3157e07410</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ZMpvMetric_t</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>2f34625e35961ef0d19768a95e0bb65d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TimePositive</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>2f34625e35961ef0d19768a95e0bb65d19d88bad100090e60735894c01cdc8f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TimeNegative</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>2f34625e35961ef0d19768a95e0bb65dd00ea43ff771f0c56ec5bbf7397206b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>rotationXOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>2a14306517acb0c8e18e4b4e2ff5342a</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double delta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>rotationYOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>1eafe069740a1ff235ece38af245151c</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double delta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>rotationZOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>602416f5fab1a87e21f870dbe9f575f9</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double delta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>rotationOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>9ea76da9be9d44dd29c203d4e4012636</anchor>
      <arglist>(const HepLorentzVector &amp;vec, const Hep3Vector &amp;axis, double delta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>rotationOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f7ae9bf310ffbb72869dafeb54f99f2d</anchor>
      <arglist>(const HepLorentzVector &amp;vec, const HepAxisAngle &amp;ax)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>rotationOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>a03d376e53b52a8e5b09c36ae1c120a6</anchor>
      <arglist>(const HepLorentzVector &amp;vec, const HepEulerAngles &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>rotationOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>b231bfa0fb4ea9eb58b97b91349ab69b</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double phi, double theta, double psi)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>boostXOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d6cb2f6260fc6c9441aeae3e474796b5</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double beta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>boostYOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f0c64c13a8e0816cecf86f595af9afc0</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double beta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>boostZOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>e71ab899e2efa7099572d051ca5fa082</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double beta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>boostOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>4b3fb51d365a47c250151f827985558c</anchor>
      <arglist>(const HepLorentzVector &amp;vec, const Hep3Vector &amp;betaVector)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>boostOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>2df1e4e022de6b4443832584489dc566</anchor>
      <arglist>(const HepLorentzVector &amp;vec, const Hep3Vector &amp;axis, double beta)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>8b858c01d5300f61d0d3cff4c0fb34d2</anchor>
      <arglist>(std::ostream &amp;, const HepLorentzVector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>abeb2776a24d4b2ae11c6d9547276c05</anchor>
      <arglist>(std::istream &amp;, HepLorentzVector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>42731af7d85b8d5c2948ae751ef43296</anchor>
      <arglist>(const HepLorentzVector &amp;, double a)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>229699fa7cc1b03aea03fd4f4941f5b5</anchor>
      <arglist>(double a, const HepLorentzVector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator/</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f5e17e994b483123bc89ed8e150a7b61</anchor>
      <arglist>(const HepLorentzVector &amp;, double a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LorentzVector.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>LorentzVector_8icc</filename>
    <includes id="ZMxpv_8h" name="ZMxpv.h" local="yes" imported="no">CLHEP/Vector/ZMxpv.h</includes>
    <namespace>CLHEP</namespace>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>42731af7d85b8d5c2948ae751ef43296</anchor>
      <arglist>(const HepLorentzVector &amp;, double a)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>229699fa7cc1b03aea03fd4f4941f5b5</anchor>
      <arglist>(double a, const HepLorentzVector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>boostXOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d6cb2f6260fc6c9441aeae3e474796b5</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double beta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>boostYOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f0c64c13a8e0816cecf86f595af9afc0</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double beta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>boostZOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>e71ab899e2efa7099572d051ca5fa082</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double beta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>boostOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>4b3fb51d365a47c250151f827985558c</anchor>
      <arglist>(const HepLorentzVector &amp;vec, const Hep3Vector &amp;betaVector)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>boostOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>2df1e4e022de6b4443832584489dc566</anchor>
      <arglist>(const HepLorentzVector &amp;vec, const Hep3Vector &amp;axis, double beta)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Rotation.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>Rotation_8h</filename>
    <includes id="Vector_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Vector/defs.h</includes>
    <includes id="RotationInterfaces_8h" name="RotationInterfaces.h" local="yes" imported="no">CLHEP/Vector/RotationInterfaces.h</includes>
    <includes id="RotationX_8h" name="RotationX.h" local="yes" imported="no">CLHEP/Vector/RotationX.h</includes>
    <includes id="RotationY_8h" name="RotationY.h" local="yes" imported="no">CLHEP/Vector/RotationY.h</includes>
    <includes id="RotationZ_8h" name="RotationZ.h" local="yes" imported="no">CLHEP/Vector/RotationZ.h</includes>
    <includes id="LorentzVector_8h" name="LorentzVector.h" local="yes" imported="no">CLHEP/Vector/LorentzVector.h</includes>
    <includes id="Rotation_8icc" name="Rotation.icc" local="yes" imported="no">CLHEP/Vector/Rotation.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::HepRotation</class>
    <class kind="class">CLHEP::HepRotation::HepRotation_row</class>
    <member kind="function">
      <type>HepRotation</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>390ba6d06b4d32d546a7b830f4988b6e</anchor>
      <arglist>(const HepRotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>a99d085fe189780cc156e5cede74b1cf</anchor>
      <arglist>(const HepRotationX &amp;rx, const HepRotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>734371c26a30f64c2c1697c7446cd7de</anchor>
      <arglist>(const HepRotationY &amp;ry, const HepRotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>ee6a1f736e1f85bc803968e87b44a212</anchor>
      <arglist>(const HepRotationZ &amp;rz, const HepRotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>9312d7c8d85e4ed454175458c14106b8</anchor>
      <arglist>(std::ostream &amp;os, const HepRotation &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Rotation.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>Rotation_8icc</filename>
    <namespace>CLHEP</namespace>
    <member kind="function">
      <type>HepRotation</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>390ba6d06b4d32d546a7b830f4988b6e</anchor>
      <arglist>(const HepRotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>a99d085fe189780cc156e5cede74b1cf</anchor>
      <arglist>(const HepRotationX &amp;rx, const HepRotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>734371c26a30f64c2c1697c7446cd7de</anchor>
      <arglist>(const HepRotationY &amp;ry, const HepRotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>ee6a1f736e1f85bc803968e87b44a212</anchor>
      <arglist>(const HepRotationZ &amp;rz, const HepRotation &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RotationInterfaces.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>RotationInterfaces_8h</filename>
    <includes id="Vector_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Vector/defs.h</includes>
    <includes id="ThreeVector_8h" name="ThreeVector.h" local="yes" imported="no">CLHEP/Vector/ThreeVector.h</includes>
    <includes id="LorentzVector_8h" name="LorentzVector.h" local="yes" imported="no">CLHEP/Vector/LorentzVector.h</includes>
    <includes id="AxisAngle_8h" name="AxisAngle.h" local="yes" imported="no">CLHEP/Vector/AxisAngle.h</includes>
    <includes id="RotationInterfaces_8icc" name="RotationInterfaces.icc" local="yes" imported="no">CLHEP/Vector/RotationInterfaces.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::Hep4RotationInterface</class>
    <class kind="class">CLHEP::Hep3RotationInterface</class>
    <class kind="struct">CLHEP::HepRep3x3</class>
    <class kind="struct">CLHEP::HepRep4x4</class>
    <class kind="struct">CLHEP::HepRep4x4Symmetric</class>
  </compound>
  <compound kind="file">
    <name>RotationInterfaces.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>RotationInterfaces_8icc</filename>
    <namespace>CLHEP</namespace>
  </compound>
  <compound kind="file">
    <name>RotationX.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>RotationX_8h</filename>
    <includes id="Vector_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Vector/defs.h</includes>
    <includes id="RotationInterfaces_8h" name="RotationInterfaces.h" local="yes" imported="no">CLHEP/Vector/RotationInterfaces.h</includes>
    <includes id="RotationX_8icc" name="RotationX.icc" local="yes" imported="no">CLHEP/Vector/RotationX.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::HepRotationX</class>
    <member kind="function">
      <type>HepRotationX</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>3be9740eb7aaa798f082ec4165e9ffa4</anchor>
      <arglist>(const HepRotationX &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>bdc1b0f9b78249ba1a1fe6a59c2bb578</anchor>
      <arglist>(std::ostream &amp;os, const HepRotationX &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RotationX.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>RotationX_8icc</filename>
    <includes id="PhysicalConstants_8h" name="PhysicalConstants.h" local="yes" imported="no">CLHEP/Units/PhysicalConstants.h</includes>
    <namespace>CLHEP</namespace>
    <member kind="function">
      <type>HepRotationX</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>3be9740eb7aaa798f082ec4165e9ffa4</anchor>
      <arglist>(const HepRotationX &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RotationY.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>RotationY_8h</filename>
    <includes id="Vector_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Vector/defs.h</includes>
    <includes id="RotationInterfaces_8h" name="RotationInterfaces.h" local="yes" imported="no">CLHEP/Vector/RotationInterfaces.h</includes>
    <includes id="RotationY_8icc" name="RotationY.icc" local="yes" imported="no">CLHEP/Vector/RotationY.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::HepRotationY</class>
    <member kind="function">
      <type>HepRotationY</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>c701d6b8639b130eb6f7fa95e4a2b15e</anchor>
      <arglist>(const HepRotationY &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d63288c39f34058d29cff9922c991eb1</anchor>
      <arglist>(std::ostream &amp;os, const HepRotationY &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RotationY.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>RotationY_8icc</filename>
    <includes id="PhysicalConstants_8h" name="PhysicalConstants.h" local="yes" imported="no">CLHEP/Units/PhysicalConstants.h</includes>
    <namespace>CLHEP</namespace>
    <member kind="function">
      <type>HepRotationY</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>c701d6b8639b130eb6f7fa95e4a2b15e</anchor>
      <arglist>(const HepRotationY &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RotationZ.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>RotationZ_8h</filename>
    <includes id="Vector_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Vector/defs.h</includes>
    <includes id="RotationInterfaces_8h" name="RotationInterfaces.h" local="yes" imported="no">CLHEP/Vector/RotationInterfaces.h</includes>
    <includes id="RotationZ_8icc" name="RotationZ.icc" local="yes" imported="no">CLHEP/Vector/RotationZ.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::HepRotationZ</class>
    <member kind="function">
      <type>HepRotationZ</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>da8af20e8d87952d0324edab17e18a1e</anchor>
      <arglist>(const HepRotationZ &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>bffeae92bb6c8e026dc943b4c6249563</anchor>
      <arglist>(std::ostream &amp;os, const HepRotationZ &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RotationZ.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>RotationZ_8icc</filename>
    <includes id="PhysicalConstants_8h" name="PhysicalConstants.h" local="yes" imported="no">CLHEP/Units/PhysicalConstants.h</includes>
    <namespace>CLHEP</namespace>
    <member kind="function">
      <type>HepRotationZ</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>da8af20e8d87952d0324edab17e18a1e</anchor>
      <arglist>(const HepRotationZ &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sqr.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>Sqr_8h</filename>
    <member kind="function">
      <type>T</type>
      <name>sqr</name>
      <anchorfile>Sqr_8h.html</anchorfile>
      <anchor>053773feda7435fb9b8b5907217228aa</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ThreeVector.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>ThreeVector_8h</filename>
    <includes id="Vector_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Vector/defs.h</includes>
    <includes id="ThreeVector_8icc" name="ThreeVector.icc" local="yes" imported="no">CLHEP/Vector/ThreeVector.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::Hep3Vector</class>
    <member kind="typedef">
      <type>Hep3Vector</type>
      <name>HepThreeVectorD</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>a461c18c25ab0fb37d1875c599d02d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Hep3Vector</type>
      <name>HepThreeVectorF</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>a383880eb4a22e922eb0891fc177af81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rotationXOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>b4442fd8b6ce91d78dea922d6de648a1</anchor>
      <arglist>(const Hep3Vector &amp;vec, double delta)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rotationYOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>0cc89ed956b6f426a4aefe13cc138834</anchor>
      <arglist>(const Hep3Vector &amp;vec, double delta)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rotationZOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>a2e03730de366c0e7ce987f861558550</anchor>
      <arglist>(const Hep3Vector &amp;vec, double delta)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rotationOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>8fe910b421b19524377d78c8fa18df2c</anchor>
      <arglist>(const Hep3Vector &amp;vec, const Hep3Vector &amp;axis, double delta)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rotationOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>752da13e1d8b705940ccc8be89bb4122</anchor>
      <arglist>(const Hep3Vector &amp;vec, const HepAxisAngle &amp;ax)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rotationOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>192567eec1d5e4b3ed47bdbd800bc7c6</anchor>
      <arglist>(const Hep3Vector &amp;vec, double phi, double theta, double psi)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rotationOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>085b44e26fe075f0695473d4b0e3fac9</anchor>
      <arglist>(const Hep3Vector &amp;vec, const HepEulerAngles &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f8bbfd5ed26a63d03a9a45a889a18e27</anchor>
      <arglist>(std::ostream &amp;, const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>14f7e4ec7f6cdb8fcf23c43ed5fb5334</anchor>
      <arglist>(std::istream &amp;, Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator/</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>9a7a9379b0641b60836c65b2e2a7f8d2</anchor>
      <arglist>(const Hep3Vector &amp;, double a)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>28bd1863d1e1dd27929d03296a220851</anchor>
      <arglist>(const Hep3Vector &amp;, const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>27031f2ae45e9d5145475e9756dcdbc9</anchor>
      <arglist>(const Hep3Vector &amp;, const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>95095a407aa215fe9441f0e24ca486a6</anchor>
      <arglist>(const Hep3Vector &amp;, const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>e8e1b771cc3a8251efec51f92a135ece</anchor>
      <arglist>(const Hep3Vector &amp;, double a)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f419a311d71c6b5b5d55e776cb5214c1</anchor>
      <arglist>(double a, const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>const Hep3Vector</type>
      <name>HepXHat</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>a3a8ac2632c63f53803d4eb9875228d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Hep3Vector</type>
      <name>HepYHat</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>827e9ee56b0a45dd3968f25c3a5a6930</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Hep3Vector</type>
      <name>HepZHat</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>6ad6e663734782db0f95f93114e330c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ThreeVector.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>ThreeVector_8icc</filename>
    <namespace>CLHEP</namespace>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>28bd1863d1e1dd27929d03296a220851</anchor>
      <arglist>(const Hep3Vector &amp;, const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>27031f2ae45e9d5145475e9756dcdbc9</anchor>
      <arglist>(const Hep3Vector &amp;, const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>e8e1b771cc3a8251efec51f92a135ece</anchor>
      <arglist>(const Hep3Vector &amp;, double a)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f419a311d71c6b5b5d55e776cb5214c1</anchor>
      <arglist>(double a, const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>95095a407aa215fe9441f0e24ca486a6</anchor>
      <arglist>(const Hep3Vector &amp;, const Hep3Vector &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TwoVector.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>TwoVector_8h</filename>
    <includes id="Vector_2defs_8h" name="defs.h" local="yes" imported="no">CLHEP/Vector/defs.h</includes>
    <includes id="ThreeVector_8h" name="ThreeVector.h" local="yes" imported="no">CLHEP/Vector/ThreeVector.h</includes>
    <includes id="TwoVector_8icc" name="TwoVector.icc" local="yes" imported="no">CLHEP/Vector/TwoVector.icc</includes>
    <namespace>CLHEP</namespace>
    <class kind="class">CLHEP::Hep2Vector</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>28c3388313e33c0da0895c95f04811cc</anchor>
      <arglist>(std::ostream &amp;, const Hep2Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>0548e9a66721a82bf77eb7187c3e46c7</anchor>
      <arglist>(std::istream &amp;, Hep2Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>c24f36a74d4979263eeb492f146261ee</anchor>
      <arglist>(const Hep2Vector &amp;a, const Hep2Vector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Hep2Vector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>56c879bb0e8ae374890bb9b9db419feb</anchor>
      <arglist>(const Hep2Vector &amp;p, double a)</arglist>
    </member>
    <member kind="function">
      <type>Hep2Vector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>973f5dd92d84dd4be4d81cbd5046655d</anchor>
      <arglist>(double a, const Hep2Vector &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Hep2Vector</type>
      <name>operator/</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>27a9c32e167d9ca2ca9499bb88962584</anchor>
      <arglist>(const Hep2Vector &amp;p, double a)</arglist>
    </member>
    <member kind="function">
      <type>Hep2Vector</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>54b6593f7d61b72ad3a4364a2e112523</anchor>
      <arglist>(const Hep2Vector &amp;a, const Hep2Vector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Hep2Vector</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>238e7560cbf24b2a92d9aefaae33131b</anchor>
      <arglist>(const Hep2Vector &amp;a, const Hep2Vector &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TwoVector.icc</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>TwoVector_8icc</filename>
    <namespace>CLHEP</namespace>
    <member kind="function">
      <type>Hep2Vector</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>54b6593f7d61b72ad3a4364a2e112523</anchor>
      <arglist>(const Hep2Vector &amp;a, const Hep2Vector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Hep2Vector</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>238e7560cbf24b2a92d9aefaae33131b</anchor>
      <arglist>(const Hep2Vector &amp;a, const Hep2Vector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Hep2Vector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>56c879bb0e8ae374890bb9b9db419feb</anchor>
      <arglist>(const Hep2Vector &amp;p, double a)</arglist>
    </member>
    <member kind="function">
      <type>Hep2Vector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>973f5dd92d84dd4be4d81cbd5046655d</anchor>
      <arglist>(double a, const Hep2Vector &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>c24f36a74d4979263eeb492f146261ee</anchor>
      <arglist>(const Hep2Vector &amp;a, const Hep2Vector &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ZMxpv.h</name>
    <path>/usr/local/clhep-2.0.4.3/include/CLHEP/Vector/</path>
    <filename>ZMxpv_8h</filename>
    <class kind="class">CLHEP_vector_exception</class>
    <member kind="define">
      <type>#define</type>
      <name>ZMthrowA</name>
      <anchorfile>ZMxpv_8h.html</anchorfile>
      <anchor>80ec255350ea3d7e7729fcd1f75b370b</anchor>
      <arglist>(A)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZMthrowC</name>
      <anchorfile>ZMxpv_8h.html</anchorfile>
      <anchor>0d4d776cd9457a3dd012c08240f5fced</anchor>
      <arglist>(A)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CLHEP_vector_exception_header</name>
      <anchorfile>ZMxpv_8h.html</anchorfile>
      <anchor>8efb1d5200583ea145fc160f8dfd4b7e</anchor>
      <arglist>(NAME)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP_vector_exception</name>
    <filename>classCLHEP__vector__exception.html</filename>
    <member kind="function">
      <type></type>
      <name>CLHEP_vector_exception</name>
      <anchorfile>classCLHEP__vector__exception.html</anchorfile>
      <anchor>0351f01ecf04da7ab096dce66541f8a2</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classCLHEP__vector__exception.html</anchorfile>
      <anchor>4e82f0a9386dfda911daa8ffcac456f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>name</name>
      <anchorfile>classCLHEP__vector__exception.html</anchorfile>
      <anchor>372ce5ce23ea0ae28417f8f4e0926140</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CLHEP_vector_exception</name>
      <anchorfile>classCLHEP__vector__exception.html</anchorfile>
      <anchor>5c75fdea2d7138d194cb3c2e151289dd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Cut</name>
    <filename>classCut.html</filename>
    <templarg>Type</templarg>
    <member kind="function">
      <type>OR</type>
      <name>operator||</name>
      <anchorfile>classCut.html</anchorfile>
      <anchor>536db8a8501389e8cea4a916f29e90b2</anchor>
      <arglist>(const Cut&lt; Type &gt; &amp;A) const </arglist>
    </member>
    <member kind="function">
      <type>AND</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>classCut.html</anchorfile>
      <anchor>82eb85afa32deac626849bfb63e5f146</anchor>
      <arglist>(const Cut&lt; Type &gt; &amp;A) const </arglist>
    </member>
    <member kind="function">
      <type>NOT</type>
      <name>operator!</name>
      <anchorfile>classCut.html</anchorfile>
      <anchor>25d9e1455a9373a77cb7d10c1cd1f25c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cut</name>
      <anchorfile>classCut.html</anchorfile>
      <anchor>e93bec35b1477956070bc8d3dc171fca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cut</name>
      <anchorfile>classCut.html</anchorfile>
      <anchor>36404af0d8e14049e16b4b3bacc7d95d</anchor>
      <arglist>(const Cut &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Cut</name>
      <anchorfile>classCut.html</anchorfile>
      <anchor>aefac61ee65555532a8aca478a71d563</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Cut *</type>
      <name>clone</name>
      <anchorfile>classCut.html</anchorfile>
      <anchor>d38690e8fbac86430a78cdfd52047974</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>classCut.html</anchorfile>
      <anchor>98b6bd3c3622763f7ea9daa5e2993a8a</anchor>
      <arglist>(const Type &amp;t) const =0</arglist>
    </member>
    <class kind="class">Cut::AND</class>
    <class kind="class">Cut::NOT</class>
    <class kind="class">Cut::OR</class>
    <class kind="class">Cut::Predicate</class>
  </compound>
  <compound kind="class">
    <name>Cut::AND</name>
    <filename>classCut_1_1AND.html</filename>
    <base>Cut</base>
    <member kind="function">
      <type></type>
      <name>AND</name>
      <anchorfile>classCut_1_1AND.html</anchorfile>
      <anchor>c443186c0e70cf93ddf36567bf016ffc</anchor>
      <arglist>(const AND &amp;right)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AND</name>
      <anchorfile>classCut_1_1AND.html</anchorfile>
      <anchor>be53e177060190b99a5510b4a10e6d39</anchor>
      <arglist>(const Cut &amp;A, const Cut &amp;B)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AND</name>
      <anchorfile>classCut_1_1AND.html</anchorfile>
      <anchor>32f6a41d288e15ddd87a3a0681c083a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AND *</type>
      <name>clone</name>
      <anchorfile>classCut_1_1AND.html</anchorfile>
      <anchor>8afb374ecbc0238de0d7be760015b6f1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>classCut_1_1AND.html</anchorfile>
      <anchor>2c545536f3282988ff8fdf0300e9db06</anchor>
      <arglist>(const Type &amp;t) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Cut::NOT</name>
    <filename>classCut_1_1NOT.html</filename>
    <base>Cut</base>
    <member kind="function">
      <type></type>
      <name>NOT</name>
      <anchorfile>classCut_1_1NOT.html</anchorfile>
      <anchor>f0d03736f51c78124077ea7e4256c2ff</anchor>
      <arglist>(const NOT &amp;right)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NOT</name>
      <anchorfile>classCut_1_1NOT.html</anchorfile>
      <anchor>d5adc0979c4a8ced3ea9fb188e07f352</anchor>
      <arglist>(const Cut &amp;A)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NOT</name>
      <anchorfile>classCut_1_1NOT.html</anchorfile>
      <anchor>3e3390263657814323b613afa4e23215</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NOT *</type>
      <name>clone</name>
      <anchorfile>classCut_1_1NOT.html</anchorfile>
      <anchor>d90f75803f4f3447da015616425f2daf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>classCut_1_1NOT.html</anchorfile>
      <anchor>308488c52c6baa15d71b6253929124fd</anchor>
      <arglist>(const Type &amp;t) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Cut::OR</name>
    <filename>classCut_1_1OR.html</filename>
    <base>Cut</base>
    <member kind="function">
      <type></type>
      <name>OR</name>
      <anchorfile>classCut_1_1OR.html</anchorfile>
      <anchor>8c13c0879d69f08f46ec867fe05bca30</anchor>
      <arglist>(const OR &amp;right)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OR</name>
      <anchorfile>classCut_1_1OR.html</anchorfile>
      <anchor>b99a15fd12e00992a42dd0f92b2460d8</anchor>
      <arglist>(const Cut &amp;A, const Cut &amp;B)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OR</name>
      <anchorfile>classCut_1_1OR.html</anchorfile>
      <anchor>25be00ece1dc04f7876f585e53c96f2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OR *</type>
      <name>clone</name>
      <anchorfile>classCut_1_1OR.html</anchorfile>
      <anchor>884288320a770dbe6b22b30416ca982e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>classCut_1_1OR.html</anchorfile>
      <anchor>1edd876d1c475deae66a2257249ec398</anchor>
      <arglist>(const Type &amp;t) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Cut::Predicate</name>
    <filename>classCut_1_1Predicate.html</filename>
    <base>Cut</base>
    <member kind="function">
      <type></type>
      <name>Predicate</name>
      <anchorfile>classCut_1_1Predicate.html</anchorfile>
      <anchor>203b6b1a6a2be4216d905e781a228498</anchor>
      <arglist>(const Predicate &amp;right)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Predicate</name>
      <anchorfile>classCut_1_1Predicate.html</anchorfile>
      <anchor>d88ea37d863a07afc40201d572e235b9</anchor>
      <arglist>(const Cut &amp;A)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Predicate</name>
      <anchorfile>classCut_1_1Predicate.html</anchorfile>
      <anchor>05362e84a183f34404509c0fbb956208</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Predicate *</type>
      <name>clone</name>
      <anchorfile>classCut_1_1Predicate.html</anchorfile>
      <anchor>56430ab848d8bb0c6cee4e7d8e6e5c65</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>classCut_1_1Predicate.html</anchorfile>
      <anchor>e35a34c1b81d594d9981a4b3815873bc</anchor>
      <arglist>(const Type &amp;t) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ZMhandleTo</name>
    <filename>classZMhandleTo.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ZMhandleTo</name>
      <anchorfile>classZMhandleTo.html</anchorfile>
      <anchor>0d4c2a40a3df32016329e05edd2bad67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZMhandleTo</name>
      <anchorfile>classZMhandleTo.html</anchorfile>
      <anchor>abb1a894340d2367b3f8c0eaa8f63570</anchor>
      <arglist>(const ZMhandleTo &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ZMhandleTo</name>
      <anchorfile>classZMhandleTo.html</anchorfile>
      <anchor>1a9c46fb224ba20be3c6e0d8c9e7d331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ZMhandleTo &amp;</type>
      <name>operator=</name>
      <anchorfile>classZMhandleTo.html</anchorfile>
      <anchor>a38a89be914d09947f4b898bee0447c3</anchor>
      <arglist>(const ZMhandleTo &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ZMhandleTo</name>
      <anchorfile>classZMhandleTo.html</anchorfile>
      <anchor>4d9caedb71672d941a8834ebb30341f4</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ZMhandleTo</name>
      <anchorfile>classZMhandleTo.html</anchorfile>
      <anchor>c86df95e5466c0dec63108129a4f4be2</anchor>
      <arglist>(const T *t)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZMuseCount</type>
      <name>u_</name>
      <anchorfile>classZMhandleTo.html</anchorfile>
      <anchor>5f1535feadda9e90537f8c0e2ff8a296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>rep_</name>
      <anchorfile>classZMhandleTo.html</anchorfile>
      <anchor>3f4502958b376d1f60d1a05932e051bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ZMuseCount</name>
    <filename>classZMuseCount.html</filename>
    <member kind="function">
      <type></type>
      <name>ZMuseCount</name>
      <anchorfile>classZMuseCount.html</anchorfile>
      <anchor>c5e4e431f6d9e4e0686657e22263f72a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZMuseCount</name>
      <anchorfile>classZMuseCount.html</anchorfile>
      <anchor>82fa418b9a6022ff0e669136298b2172</anchor>
      <arglist>(const ZMuseCount &amp;u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ZMuseCount</name>
      <anchorfile>classZMuseCount.html</anchorfile>
      <anchor>92da90ec0f5da97dd84701265cc60a84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>only</name>
      <anchorfile>classZMuseCount.html</anchorfile>
      <anchor>95bb75fd40e27492ba5c3735d373c4cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>makeonly</name>
      <anchorfile>classZMuseCount.html</anchorfile>
      <anchor>87ed8043bed67d6bab04a3cab33687d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reattach</name>
      <anchorfile>classZMuseCount.html</anchorfile>
      <anchor>c3a935d19510bdaec3e4f07a60acde42</anchor>
      <arglist>(const ZMuseCount &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>CLHEP</name>
    <filename>namespaceCLHEP.html</filename>
    <class kind="struct">CLHEP::Version</class>
    <class kind="class">CLHEP::HepDiagMatrix</class>
    <class kind="class">CLHEP::HepGenMatrix</class>
    <class kind="class">CLHEP::HepMatrix</class>
    <class kind="class">CLHEP::HepPile</class>
    <class kind="class">CLHEP::HepSymMatrix</class>
    <class kind="class">CLHEP::HepVector</class>
    <class kind="class">CLHEP::DoubConvException</class>
    <class kind="class">CLHEP::DoubConv</class>
    <class kind="class">CLHEP::DRand48Engine</class>
    <class kind="class">CLHEP::DualRand</class>
    <class kind="class">CLHEP::EngineFactory</class>
    <class kind="class">CLHEP::Hurd160Engine</class>
    <class kind="class">CLHEP::Hurd288Engine</class>
    <class kind="class">CLHEP::HepJamesRandom</class>
    <class kind="class">CLHEP::MTwistEngine</class>
    <class kind="class">CLHEP::NonRandomEngine</class>
    <class kind="class">CLHEP::RandBinomial</class>
    <class kind="class">CLHEP::RandBit</class>
    <class kind="class">CLHEP::RandBreitWigner</class>
    <class kind="class">CLHEP::RandChiSquare</class>
    <class kind="class">CLHEP::RandEngine</class>
    <class kind="class">CLHEP::RandExponential</class>
    <class kind="class">CLHEP::RandFlat</class>
    <class kind="class">CLHEP::RandGamma</class>
    <class kind="class">CLHEP::RandGauss</class>
    <class kind="class">CLHEP::RandGaussQ</class>
    <class kind="class">CLHEP::RandGaussT</class>
    <class kind="class">CLHEP::RandGeneral</class>
    <class kind="class">CLHEP::RandLandau</class>
    <class kind="class">CLHEP::HepRandom</class>
    <class kind="class">CLHEP::HepRandomEngine</class>
    <class kind="class">CLHEP::RandPoisson</class>
    <class kind="class">CLHEP::RandPoissonQ</class>
    <class kind="class">CLHEP::RandPoissonT</class>
    <class kind="class">CLHEP::RandStudentT</class>
    <class kind="class">CLHEP::RanecuEngine</class>
    <class kind="class">CLHEP::Ranlux64Engine</class>
    <class kind="class">CLHEP::RanluxEngine</class>
    <class kind="class">CLHEP::RanshiEngine</class>
    <class kind="class">CLHEP::HepStat</class>
    <class kind="class">CLHEP::StaticRandomStates</class>
    <class kind="class">CLHEP::TripleRand</class>
    <class kind="class">CLHEP::RandMultiGauss</class>
    <class kind="class">CLHEP::HepRandomVector</class>
    <class kind="class">CLHEP::HepAxisAngle</class>
    <class kind="class">CLHEP::HepBoost</class>
    <class kind="class">CLHEP::HepBoostX</class>
    <class kind="class">CLHEP::HepBoostY</class>
    <class kind="class">CLHEP::HepBoostZ</class>
    <class kind="class">CLHEP::HepEulerAngles</class>
    <class kind="class">CLHEP::HepLorentzRotation</class>
    <class kind="class">CLHEP::HepLorentzVector</class>
    <class kind="class">CLHEP::Tcomponent</class>
    <class kind="class">CLHEP::HepRotation</class>
    <class kind="class">CLHEP::Hep4RotationInterface</class>
    <class kind="class">CLHEP::Hep3RotationInterface</class>
    <class kind="struct">CLHEP::HepRep3x3</class>
    <class kind="struct">CLHEP::HepRep4x4</class>
    <class kind="struct">CLHEP::HepRep4x4Symmetric</class>
    <class kind="class">CLHEP::HepRotationX</class>
    <class kind="class">CLHEP::HepRotationY</class>
    <class kind="class">CLHEP::HepRotationZ</class>
    <class kind="class">CLHEP::Hep3Vector</class>
    <class kind="class">CLHEP::Hep2Vector</class>
    <member kind="typedef">
      <type>HepLorentzVector</type>
      <name>HepLorentzVectorD</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>1842e8b2ef32918b058ebe9a8429ab31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HepLorentzVector</type>
      <name>HepLorentzVectorF</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>87dcb2c748f810f04a8c6b3157e07410</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Hep3Vector</type>
      <name>HepThreeVectorD</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>a461c18c25ab0fb37d1875c599d02d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Hep3Vector</type>
      <name>HepThreeVectorF</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>a383880eb4a22e922eb0891fc177af81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ZMpvMetric_t</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>2f34625e35961ef0d19768a95e0bb65d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TimePositive</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>2f34625e35961ef0d19768a95e0bb65d19d88bad100090e60735894c01cdc8f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TimeNegative</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>2f34625e35961ef0d19768a95e0bb65dd00ea43ff771f0c56ec5bbf7397206b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>31a2609eafc176e4b92fe698689fdef6</anchor>
      <arglist>(std::ostream &amp;s, const HepDiagMatrix &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d942bcbae3a9b09519d15405aef05b0a</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepDiagMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>68122cef20a61448b2c579094591c680</anchor>
      <arglist>(const HepDiagMatrix &amp;m1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d3d6974f3fb5a99fcbb300e4ad26235a</anchor>
      <arglist>(double t, const HepDiagMatrix &amp;d1)</arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>1c36b9a17f9ffb5d099c5b27235a2a59</anchor>
      <arglist>(const HepDiagMatrix &amp;d1, double t)</arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix</type>
      <name>operator/</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>e6806d51166417e73623f312d804eb37</anchor>
      <arglist>(const HepDiagMatrix &amp;m1, double t)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>2ba5b8921d5071c73e0528098fe1f837</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepDiagMatrix &amp;d2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>6e3af73c6270a20a25170d073a911516</anchor>
      <arglist>(const HepDiagMatrix &amp;d1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>eb71185f41fccaa3b74d3a522e2a4c4e</anchor>
      <arglist>(const HepDiagMatrix &amp;m1, const HepDiagMatrix &amp;d2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>1dee7eb3ccc75b2c51603ab3f52413d4</anchor>
      <arglist>(const HepSymMatrix &amp;s1, const HepDiagMatrix &amp;d2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>dc69ca8afe62178142198ff428a30955</anchor>
      <arglist>(const HepDiagMatrix &amp;d1, const HepSymMatrix &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d055c9dbd6ced8b58ecf796a9c28c44f</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepDiagMatrix &amp;d2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>b4496766bab1fb58b71641a5f6dc7d5c</anchor>
      <arglist>(const HepDiagMatrix &amp;d1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>243df8d17439480f9be73baa777fc517</anchor>
      <arglist>(const HepDiagMatrix &amp;d1, const HepDiagMatrix &amp;d2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>fa39637554e4eae0b0fd7418f4da5dc2</anchor>
      <arglist>(const HepSymMatrix &amp;s1, const HepDiagMatrix &amp;d2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d1fec85bd73c143cc1056b9c900d3e86</anchor>
      <arglist>(const HepDiagMatrix &amp;d1, const HepSymMatrix &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix</type>
      <name>dsum</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d78be62a00ac75fc6d5da3108dea035b</anchor>
      <arglist>(const HepDiagMatrix &amp;s1, const HepDiagMatrix &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>28f0d50c51683111410bf2babe4525cd</anchor>
      <arglist>(const HepGenMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm1</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>916a4ef4b3d3dba3910d7c1d8992a69c</anchor>
      <arglist>(const HepGenMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm_infinity</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>e4bfa139d338b6e2f17eea505a9a8fe2</anchor>
      <arglist>(const HepGenMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>0e7316675a96e791fabf2e121c0f4fdc</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>8d53343615ccf963abd78999250c0758</anchor>
      <arglist>(double t, const HepMatrix &amp;m1)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>31441355203d37766f658cac6d126d1c</anchor>
      <arglist>(const HepMatrix &amp;m1, double t)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator/</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>b3eeb657359d27801541e665e8ae6b16</anchor>
      <arglist>(const HepMatrix &amp;m1, double t)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>12164e6526f4e898ededf9b999d28926</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>82bb5b89f5122742aa206addac5e9cdb</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>dsum</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>aaef0f78b2c890aa02da2385029439b5</anchor>
      <arglist>(const HepMatrix &amp;, const HepMatrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>solve</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f8d605df63d54a5b7311820bf3992c39</anchor>
      <arglist>(const HepMatrix &amp;, const HepVector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>7e726f40386135faef2c4afd520c10dd</anchor>
      <arglist>(std::ostream &amp;s, const HepMatrix &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>qr_solve</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>14fe9d6feb6c83aa1dfb1c312a982784</anchor>
      <arglist>(const HepMatrix &amp;A, const HepVector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>qr_solve</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>17ba0ed00155dbabf56a4c936111af09</anchor>
      <arglist>(HepMatrix *A, const HepVector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>qr_solve</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>8f42058a8bc5dae859b44cbccf29e924</anchor>
      <arglist>(const HepMatrix &amp;A, const HepMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>qr_solve</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>67591747a54fda571e90ac27c6a7f71a</anchor>
      <arglist>(HepMatrix *A, const HepMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>qr_inverse</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>2ce44039a207f923a572e3b4d23e7e73</anchor>
      <arglist>(const HepMatrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>qr_inverse</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>2f4251ad7072aa21cfb6c62a4cec78d5</anchor>
      <arglist>(HepMatrix *A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>qr_decomp</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>5ec0600fd235113a3096e0ef1a36674c</anchor>
      <arglist>(HepMatrix *A, HepMatrix *hsm)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>qr_decomp</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>9a21339d77fbce65c36fab9fd64f1d2f</anchor>
      <arglist>(HepMatrix *A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>back_solve</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>4b3b76ae2d61018370ef91807695bc0c</anchor>
      <arglist>(const HepMatrix &amp;R, HepVector *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>back_solve</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>ea2d648708234293325ebe2a9876a9c0</anchor>
      <arglist>(const HepMatrix &amp;R, HepMatrix *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>col_house</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>0a002fe2ff7e23d3426a2e60b0f4a738</anchor>
      <arglist>(HepMatrix *a, const HepMatrix &amp;v, double vnormsq, int row, int col, int row_start, int col_start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>col_house</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>ed9652287b2a0bd44de28c0007fe042e</anchor>
      <arglist>(HepMatrix *a, const HepMatrix &amp;v, int row, int col, int row_start, int col_start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>col_givens</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>eb2bd5790e229b66f96fea92e80ec13c</anchor>
      <arglist>(HepMatrix *A, double c, double s, int k1, int k2, int row_min=1, int row_max=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row_givens</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>9c2c099fc42cd7b868bfa432c0f9a0b4</anchor>
      <arglist>(HepMatrix *A, double c, double s, int k1, int k2, int col_min=1, int col_max=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>givens</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>c8c8df3202d6d42e489298359f4c1347</anchor>
      <arglist>(double a, double b, double *c, double *s)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>house</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>915f8de1600c953b5623a7b444e2ce3e</anchor>
      <arglist>(const HepMatrix &amp;a, int row=1, int col=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>house_with_update</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>3b4b5e5bec03c40768280230a84e366f</anchor>
      <arglist>(HepMatrix *a, int row=1, int col=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>house_with_update</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>9f4607ace2e7e5412caec7ce3a053e35</anchor>
      <arglist>(HepMatrix *a, HepMatrix *v, int row=1, int col=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row_house</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f2ada8961b0cfb2c8615da95c76c9117</anchor>
      <arglist>(HepMatrix *a, const HepVector &amp;v, double vnormsq, int row=1, int col=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row_house</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>2a9b23a3cd34b646c5ad8fc3d1711f88</anchor>
      <arglist>(HepMatrix *a, const HepMatrix &amp;v, double vnormsq, int row, int col, int row_start, int col_start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row_house</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>28b022eb4dd8ca56945f500d2b967011</anchor>
      <arglist>(HepMatrix *a, const HepMatrix &amp;v, int row, int col, int row_start, int col_start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>3a2ab682946f9e0b4d6c81072fa6fac2</anchor>
      <arglist>(HepMatrix &amp;m1, HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d223d08bcaaae52cb1be56c733d037bd</anchor>
      <arglist>(std::ostream &amp;s, const HepSymMatrix &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>c6a482199d6690fb2bc70c031cc72ea9</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepSymMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>ca5bb27e64147a428eb92eae0154a28e</anchor>
      <arglist>(const HepSymMatrix &amp;m1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>49bbfc5966bf4d139f3ef790ba1a65f1</anchor>
      <arglist>(const HepSymMatrix &amp;m1, const HepSymMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>be65dafba02b544a603788d8a95f3191</anchor>
      <arglist>(double t, const HepSymMatrix &amp;s1)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>e07f091aa371c7a794cfb118da69ecc9</anchor>
      <arglist>(const HepSymMatrix &amp;s1, double t)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>operator/</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>ea0c4ffeb5e28b233ae4121876f9d3a9</anchor>
      <arglist>(const HepSymMatrix &amp;m1, double t)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d97d173bc7ece262e5cce21a540faf48</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepSymMatrix &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f61faa2ef51681a81dd9a2131931fcdc</anchor>
      <arglist>(const HepSymMatrix &amp;s1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d3bf5905200ecf174d92769a2b1ef736</anchor>
      <arglist>(const HepSymMatrix &amp;s1, const HepSymMatrix &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>2d8dbc8b0b988ccc8c7c5a7f4c68822e</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepSymMatrix &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>a8e689f2b7e7406d16508db81eee3b8e</anchor>
      <arglist>(const HepSymMatrix &amp;m1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>91a70f994baf494df8fbb431b5fe5d08</anchor>
      <arglist>(const HepSymMatrix &amp;s1, const HepSymMatrix &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>dsum</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f8d8d4c7bd5ad34522707bac0da307ab</anchor>
      <arglist>(const HepSymMatrix &amp;s1, const HepSymMatrix &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>condition</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f38c1e505c594fc1d995e941037f9bb8</anchor>
      <arglist>(const HepSymMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diag_step</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>fef3ed1e7cc6b420e75baeae251f0c27</anchor>
      <arglist>(HepSymMatrix *t, int begin, int end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diag_step</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>b2886d27be093eeb06de5e1dc04db347</anchor>
      <arglist>(HepSymMatrix *t, HepMatrix *u, int begin, int end)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>diagonalize</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f47cf53a0f71aef329b65f208a292137</anchor>
      <arglist>(HepSymMatrix *s)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>house</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>09cea098de91ac852f45a09da4f53a9b</anchor>
      <arglist>(const HepSymMatrix &amp;a, int row=1, int col=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>house_with_update2</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>185e170cd03dad91aa0b25b662b43c51</anchor>
      <arglist>(HepSymMatrix *a, HepMatrix *v, int row=1, int col=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tridiagonal</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>0dd0a4aa38542f2a03bdf11d17c3dc7e</anchor>
      <arglist>(HepSymMatrix *a, HepMatrix *hsm)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>tridiagonal</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>9bebeba43de6b76bc290f378fe52923a</anchor>
      <arglist>(HepSymMatrix *a)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>c00b59cfb73d38c32838ef130f71a9e6</anchor>
      <arglist>(std::ostream &amp;s, const HepVector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>7cc48fc78543f1de25fc2df884fe1e68</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepVector &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>aec0965e247dee7ec248dca68b373e42</anchor>
      <arglist>(double t, const HepVector &amp;v1)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>98c247afe02338fca6de4db04a6153df</anchor>
      <arglist>(const HepVector &amp;v1, double t)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator/</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>a9d9803d964ae9bd85c33dddd17ad21e</anchor>
      <arglist>(const HepVector &amp;v1, double t)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>0eb4830ff4266e12bb40e74bc38aa35c</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepVector &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>4e55449085f0eac5edd22b0b3d397636</anchor>
      <arglist>(const HepVector &amp;v1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>ab5e2ad0988c4b00d10eaf2aa2e33453</anchor>
      <arglist>(const HepVector &amp;v1, const HepVector &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>3be5785d5f65ed38b3b17a7a1f7eb0d6</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepVector &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>7948f7c274d5d50671f8c9cc6a89f088</anchor>
      <arglist>(const HepVector &amp;v1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>6415a8df77fa7117a1c06610c551064e</anchor>
      <arglist>(const HepVector &amp;v1, const HepVector &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>dsum</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>e9c08bc43b76dd7fe7d80446c762219f</anchor>
      <arglist>(const HepVector &amp;s1, const HepVector &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>ba66ad2e456257db131fced95d7aa975</anchor>
      <arglist>(HepVector &amp;v1, HepVector &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>crc32ul</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>5222e5dfca56b9684ab59bea27e89405</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>engineIDulong</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>5bf07e06ac5ccddf41d8fc039bdfd968</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>e519db6fc4bfa495384f0c989e79dac8</anchor>
      <arglist>(std::ostream &amp;os, const HepRandom &amp;dist)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>a553dd5c025e195afe7b976a19b14253</anchor>
      <arglist>(std::istream &amp;is, HepRandom &amp;dist)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>3e932cc838db4d02a79ea6464e15418a</anchor>
      <arglist>(std::ostream &amp;os, const HepRandomEngine &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>ebe4a1f30ce16458e56473fa8c97bf6e</anchor>
      <arglist>(std::istream &amp;is, HepRandomEngine &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>possibleKeywordInput</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>eeec2194ec1388cee0b328599f0141d5</anchor>
      <arglist>(IS &amp;is, const std::string &amp;key, T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>15867efdf2bc6a4585d36bbefb8be2c2</anchor>
      <arglist>(std::ostream &amp;os, const HepAxisAngle &amp;aa)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>6133e993a72844c7c8c1c15a71188b1b</anchor>
      <arglist>(std::istream &amp;is, HepAxisAngle &amp;aa)</arglist>
    </member>
    <member kind="function">
      <type>HepBoost</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>8a3d8dd2631e134df7b012fe04a207b2</anchor>
      <arglist>(const HepBoost &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>6093b9e3c096100a86e2292ad4afb1e7</anchor>
      <arglist>(std::ostream &amp;os, const HepBoost &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>HepBoostX</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>664ccdd5e4a09a486ac5332450b01cb4</anchor>
      <arglist>(const HepBoostX &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>52d2e883eae31a1089c1a9fc3ae8211b</anchor>
      <arglist>(std::ostream &amp;os, const HepBoostX &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>HepBoostY</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f1abbf30174011cfb976c221d21b4e59</anchor>
      <arglist>(const HepBoostY &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>9a81d9d3c7424faefb3979979c6fff4a</anchor>
      <arglist>(std::ostream &amp;os, const HepBoostY &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>HepBoostZ</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>fd113d4cb0a5b704b6cd3e9a424387c0</anchor>
      <arglist>(const HepBoostZ &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>b6fb10725b5c35c0b29f30fff48010d3</anchor>
      <arglist>(std::ostream &amp;os, const HepBoostZ &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f8d95d5c28d143dd4fc928269d48520b</anchor>
      <arglist>(std::ostream &amp;os, const HepEulerAngles &amp;aa)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>eef19b60b635564bbf42036260377808</anchor>
      <arglist>(std::istream &amp;is, HepEulerAngles &amp;aa)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>0c876c44bd0a88ed7388290a27adf6b3</anchor>
      <arglist>(const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>4a4b0ed3527fc16695f02cb37e16106b</anchor>
      <arglist>(const HepRotation &amp;r, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>3235d0f15a629c0c40b872e45e1d79a5</anchor>
      <arglist>(const HepRotationX &amp;r, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>93fbf7b9934bd8d2d48c1eb3ad994cea</anchor>
      <arglist>(const HepRotationY &amp;r, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>33786260cf167734dbacd9d478e798f4</anchor>
      <arglist>(const HepRotationZ &amp;r, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>a93425b123cd369167c94598dcb32b0f</anchor>
      <arglist>(std::ostream &amp;os, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d43227f04d6b8d048bf63297cd48dca8</anchor>
      <arglist>(const HepRotation &amp;r, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>6e99c22bd7539ac29fac7cf8d608121f</anchor>
      <arglist>(const HepRotation &amp;r, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>143b008726aaafc4c939c01d507999c4</anchor>
      <arglist>(const HepRotation &amp;r, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>302edfe28f349c84e7f54808c9edcdb8</anchor>
      <arglist>(const HepRotation &amp;r, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>de225eddfc3307b99cd92922459b7721</anchor>
      <arglist>(const HepRotation &amp;r, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>0a73395e3efb4c9d3b298dface2d2252</anchor>
      <arglist>(const HepRotation &amp;r, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>5390c4781882d61d9d867c4c283e52d4</anchor>
      <arglist>(const HepBoost &amp;b, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>c7ef3a775eae0236d4422e09b40f1d52</anchor>
      <arglist>(const HepBoost &amp;b, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>c99443029b8cf181a48c7c539abef4dd</anchor>
      <arglist>(const HepBoost &amp;b, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>70b954ea931248545048c7a37a81440b</anchor>
      <arglist>(const HepBoost &amp;b, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>7916e5f999a076bb0cfed51d6ec6baaf</anchor>
      <arglist>(const HepBoost &amp;b, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>37f8649d5a022585bf8e2a3fb8e610ba</anchor>
      <arglist>(const HepBoost &amp;b, const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>rotationXOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>2a14306517acb0c8e18e4b4e2ff5342a</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double delta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>rotationYOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>1eafe069740a1ff235ece38af245151c</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double delta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>rotationZOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>602416f5fab1a87e21f870dbe9f575f9</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double delta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>rotationOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>9ea76da9be9d44dd29c203d4e4012636</anchor>
      <arglist>(const HepLorentzVector &amp;vec, const Hep3Vector &amp;axis, double delta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>rotationOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f7ae9bf310ffbb72869dafeb54f99f2d</anchor>
      <arglist>(const HepLorentzVector &amp;vec, const HepAxisAngle &amp;ax)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>rotationOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>a03d376e53b52a8e5b09c36ae1c120a6</anchor>
      <arglist>(const HepLorentzVector &amp;vec, const HepEulerAngles &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>rotationOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>b231bfa0fb4ea9eb58b97b91349ab69b</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double phi, double theta, double psi)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>boostXOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d6cb2f6260fc6c9441aeae3e474796b5</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double beta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>boostYOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f0c64c13a8e0816cecf86f595af9afc0</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double beta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>boostZOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>e71ab899e2efa7099572d051ca5fa082</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double beta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>boostOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>4b3fb51d365a47c250151f827985558c</anchor>
      <arglist>(const HepLorentzVector &amp;vec, const Hep3Vector &amp;betaVector)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>boostOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>2df1e4e022de6b4443832584489dc566</anchor>
      <arglist>(const HepLorentzVector &amp;vec, const Hep3Vector &amp;axis, double beta)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>8b858c01d5300f61d0d3cff4c0fb34d2</anchor>
      <arglist>(std::ostream &amp;, const HepLorentzVector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>abeb2776a24d4b2ae11c6d9547276c05</anchor>
      <arglist>(std::istream &amp;, HepLorentzVector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>42731af7d85b8d5c2948ae751ef43296</anchor>
      <arglist>(const HepLorentzVector &amp;, double a)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>229699fa7cc1b03aea03fd4f4941f5b5</anchor>
      <arglist>(double a, const HepLorentzVector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator/</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f5e17e994b483123bc89ed8e150a7b61</anchor>
      <arglist>(const HepLorentzVector &amp;, double a)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>390ba6d06b4d32d546a7b830f4988b6e</anchor>
      <arglist>(const HepRotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>a99d085fe189780cc156e5cede74b1cf</anchor>
      <arglist>(const HepRotationX &amp;rx, const HepRotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>734371c26a30f64c2c1697c7446cd7de</anchor>
      <arglist>(const HepRotationY &amp;ry, const HepRotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>ee6a1f736e1f85bc803968e87b44a212</anchor>
      <arglist>(const HepRotationZ &amp;rz, const HepRotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>9312d7c8d85e4ed454175458c14106b8</anchor>
      <arglist>(std::ostream &amp;os, const HepRotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotationX</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>3be9740eb7aaa798f082ec4165e9ffa4</anchor>
      <arglist>(const HepRotationX &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>bdc1b0f9b78249ba1a1fe6a59c2bb578</anchor>
      <arglist>(std::ostream &amp;os, const HepRotationX &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotationY</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>c701d6b8639b130eb6f7fa95e4a2b15e</anchor>
      <arglist>(const HepRotationY &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>d63288c39f34058d29cff9922c991eb1</anchor>
      <arglist>(std::ostream &amp;os, const HepRotationY &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotationZ</type>
      <name>inverseOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>da8af20e8d87952d0324edab17e18a1e</anchor>
      <arglist>(const HepRotationZ &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>bffeae92bb6c8e026dc943b4c6249563</anchor>
      <arglist>(std::ostream &amp;os, const HepRotationZ &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rotationXOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>b4442fd8b6ce91d78dea922d6de648a1</anchor>
      <arglist>(const Hep3Vector &amp;vec, double delta)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rotationYOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>0cc89ed956b6f426a4aefe13cc138834</anchor>
      <arglist>(const Hep3Vector &amp;vec, double delta)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rotationZOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>a2e03730de366c0e7ce987f861558550</anchor>
      <arglist>(const Hep3Vector &amp;vec, double delta)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rotationOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>8fe910b421b19524377d78c8fa18df2c</anchor>
      <arglist>(const Hep3Vector &amp;vec, const Hep3Vector &amp;axis, double delta)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rotationOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>752da13e1d8b705940ccc8be89bb4122</anchor>
      <arglist>(const Hep3Vector &amp;vec, const HepAxisAngle &amp;ax)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rotationOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>192567eec1d5e4b3ed47bdbd800bc7c6</anchor>
      <arglist>(const Hep3Vector &amp;vec, double phi, double theta, double psi)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rotationOf</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>085b44e26fe075f0695473d4b0e3fac9</anchor>
      <arglist>(const Hep3Vector &amp;vec, const HepEulerAngles &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f8bbfd5ed26a63d03a9a45a889a18e27</anchor>
      <arglist>(std::ostream &amp;, const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>14f7e4ec7f6cdb8fcf23c43ed5fb5334</anchor>
      <arglist>(std::istream &amp;, Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator/</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>9a7a9379b0641b60836c65b2e2a7f8d2</anchor>
      <arglist>(const Hep3Vector &amp;, double a)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>28bd1863d1e1dd27929d03296a220851</anchor>
      <arglist>(const Hep3Vector &amp;, const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>27031f2ae45e9d5145475e9756dcdbc9</anchor>
      <arglist>(const Hep3Vector &amp;, const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>95095a407aa215fe9441f0e24ca486a6</anchor>
      <arglist>(const Hep3Vector &amp;, const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>e8e1b771cc3a8251efec51f92a135ece</anchor>
      <arglist>(const Hep3Vector &amp;, double a)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>f419a311d71c6b5b5d55e776cb5214c1</anchor>
      <arglist>(double a, const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>28c3388313e33c0da0895c95f04811cc</anchor>
      <arglist>(std::ostream &amp;, const Hep2Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>0548e9a66721a82bf77eb7187c3e46c7</anchor>
      <arglist>(std::istream &amp;, Hep2Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>c24f36a74d4979263eeb492f146261ee</anchor>
      <arglist>(const Hep2Vector &amp;a, const Hep2Vector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Hep2Vector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>56c879bb0e8ae374890bb9b9db419feb</anchor>
      <arglist>(const Hep2Vector &amp;p, double a)</arglist>
    </member>
    <member kind="function">
      <type>Hep2Vector</type>
      <name>operator*</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>973f5dd92d84dd4be4d81cbd5046655d</anchor>
      <arglist>(double a, const Hep2Vector &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Hep2Vector</type>
      <name>operator/</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>27a9c32e167d9ca2ca9499bb88962584</anchor>
      <arglist>(const Hep2Vector &amp;p, double a)</arglist>
    </member>
    <member kind="function">
      <type>Hep2Vector</type>
      <name>operator+</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>54b6593f7d61b72ad3a4364a2e112523</anchor>
      <arglist>(const Hep2Vector &amp;a, const Hep2Vector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Hep2Vector</type>
      <name>operator-</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>238e7560cbf24b2a92d9aefaae33131b</anchor>
      <arglist>(const Hep2Vector &amp;a, const Hep2Vector &amp;b)</arglist>
    </member>
    <member kind="variable">
      <type>const Hep3Vector</type>
      <name>HepXHat</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>a3a8ac2632c63f53803d4eb9875228d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Hep3Vector</type>
      <name>HepYHat</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>827e9ee56b0a45dd3968f25c3a5a6930</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Hep3Vector</type>
      <name>HepZHat</name>
      <anchorfile>namespaceCLHEP.html</anchorfile>
      <anchor>6ad6e663734782db0f95f93114e330c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CLHEP::Version</name>
    <filename>structCLHEP_1_1Version.html</filename>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>String</name>
      <anchorfile>structCLHEP_1_1Version.html</anchorfile>
      <anchor>4eef55b9a08d3c908313dde2890d92cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>Major</name>
      <anchorfile>structCLHEP_1_1Version.html</anchorfile>
      <anchor>41ad1de4ba198044b17283947e27f696</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>SubMajor</name>
      <anchorfile>structCLHEP_1_1Version.html</anchorfile>
      <anchor>5c4cb80d51b3e94baa6d88a29e9a0dcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>Minor</name>
      <anchorfile>structCLHEP_1_1Version.html</anchorfile>
      <anchor>dcd15c3223826792a8d918beb24facfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>SubMinor</name>
      <anchorfile>structCLHEP_1_1Version.html</anchorfile>
      <anchor>31d589e78b634c1c53ab7ef488b9a375</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepDiagMatrix</name>
    <filename>classCLHEP_1_1HepDiagMatrix.html</filename>
    <base>CLHEP::HepGenMatrix</base>
    <member kind="function">
      <type></type>
      <name>HepDiagMatrix</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>dec5b927eef6e56c248f807fb916f2c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepDiagMatrix</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>a7ae4b73732260df8dea09d9923aa21b</anchor>
      <arglist>(int p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepDiagMatrix</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>69a6337a85ff32d5515bf6e469a91d35</anchor>
      <arglist>(int p, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepDiagMatrix</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>997c05f24545eec3114eafb1cfb7f715</anchor>
      <arglist>(int p, HepRandom &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepDiagMatrix</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>0e84ad759eb81b3e3cb937dba88951a7</anchor>
      <arglist>(const HepDiagMatrix &amp;m1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HepDiagMatrix</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>20aec4976f82026618d1a762d0e901d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_row</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>2b8fb9d7e6521d908923a0061b2cc373</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_col</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>b4f3032ebf1c83ea658d19c2a6c83829</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>aee01d80f4a00fe7b68c0d1767bed487</anchor>
      <arglist>(int row, int col)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>d84ef15db6747d0fd8b6043fb2855394</anchor>
      <arglist>(int row, int col) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>fast</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>285368caaec9cc026de2f59675f3f187</anchor>
      <arglist>(int row, int col)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>fast</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>21b1825adb9688ee139b03f99590df63</anchor>
      <arglist>(int row, int col) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>b303341d317fe67828c10a7522f45da0</anchor>
      <arglist>(const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>f3847e1b6ab6482a98ff77d81666d000</anchor>
      <arglist>(const HepSymMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>cceb40aea1dcb1c2f1b8df1a5e98e72e</anchor>
      <arglist>(const HepDiagMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>29c82cda9cb50b9f553df9e648592979</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix &amp;</type>
      <name>operator/=</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>5e39ae02b91c838570b5a3bb71aa74e5</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>369a387eb66c13f0aeaa53225b422c0e</anchor>
      <arglist>(const HepDiagMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>8ae42a9f3deab9978d8baeed583795db</anchor>
      <arglist>(const HepDiagMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>c26bc31e4c1e4817d8f5dd0d077ac384</anchor>
      <arglist>(const HepDiagMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix</type>
      <name>operator-</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>1d9ce29146efc8551ed6e689926d9665</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix</type>
      <name>T</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>d8a23ecdd69267b98c9f62a7d076d053</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix</type>
      <name>apply</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>0a0139ebae489ada583c8324c242e81f</anchor>
      <arglist>(double(*f)(double, int, int)) const </arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>similarity</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>65127ff014a103734297cb762c943ae1</anchor>
      <arglist>(const HepMatrix &amp;m1) const </arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>similarityT</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>5648c68503c4951ecc4c06671a713b30</anchor>
      <arglist>(const HepMatrix &amp;m1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>similarity</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>f7c5c7aeb05b5712d5f0678703ce50fd</anchor>
      <arglist>(const HepVector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix</type>
      <name>sub</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>3beda9726d3d7d6522824b266d6eb183</anchor>
      <arglist>(int min_row, int max_row) const </arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix</type>
      <name>sub</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>88855736ab8eae21f7f27bf9a5c434a8</anchor>
      <arglist>(int min_row, int max_row)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sub</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>e9a2792dc3cb4a2e2c100f109a2e6f9d</anchor>
      <arglist>(int row, const HepDiagMatrix &amp;m1)</arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix</type>
      <name>inverse</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>cb34983bbd3ca313b2625a4b58d6e895</anchor>
      <arglist>(int &amp;ierr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>c5b7823f17fd2cd69081ac385e375c00</anchor>
      <arglist>(int &amp;ierr)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>determinant</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>84296e08adbf5fc4068d9260b23b323c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>trace</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>2ec9c81eeee123644a3b9e619a83641c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix_row</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>48cf66f5f431e8bb4d1e524d872addbb</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>HepDiagMatrix_row_const</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>d2658f16fbb622f8cc8d4a2d2ba7f6e7</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>num_size</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>778094995faa45835a502dce55bc54e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepDiagMatrix_row</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>967de26f33801f1217404aa125505da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepDiagMatrix_row_const</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>f18e1d1e59e6d55270b938e51a264111</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepMatrix</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>e5e937e96b9a35750588b9dafff40fca</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepSymMatrix</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>c51b18c503e68236ece46aa3f0724148</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepDiagMatrix</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>4f8e621bda80bed2e58377f8da93eb62</anchor>
      <arglist>(const HepDiagMatrix &amp;m1, const HepDiagMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepDiagMatrix</type>
      <name>operator+</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>8ad1f3c7670ca1cf8c51efd1a1e8d2fc</anchor>
      <arglist>(const HepDiagMatrix &amp;m1, const HepDiagMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepDiagMatrix</type>
      <name>operator-</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>e8cfa97979265fbc2894e549070da94f</anchor>
      <arglist>(const HepDiagMatrix &amp;m1, const HepDiagMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepMatrix</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>810d1d6d28d4bc67ad9a4375207795d7</anchor>
      <arglist>(const HepDiagMatrix &amp;m1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepMatrix</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>4fadf868a0d54ab7a2ce9e6821124839</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepDiagMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepVector</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix.html</anchorfile>
      <anchor>07e4d7dd9e165f7e83b2c1a53afa161a</anchor>
      <arglist>(const HepDiagMatrix &amp;m1, const HepVector &amp;m2)</arglist>
    </member>
    <class kind="class">CLHEP::HepDiagMatrix::HepDiagMatrix_row</class>
    <class kind="class">CLHEP::HepDiagMatrix::HepDiagMatrix_row_const</class>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepDiagMatrix::HepDiagMatrix_row</name>
    <filename>classCLHEP_1_1HepDiagMatrix_1_1HepDiagMatrix__row.html</filename>
    <member kind="function">
      <type></type>
      <name>HepDiagMatrix_row</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix_1_1HepDiagMatrix__row.html</anchorfile>
      <anchor>e24143ae7de8abe8d73fac63c23226c2</anchor>
      <arglist>(HepDiagMatrix &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix_1_1HepDiagMatrix__row.html</anchorfile>
      <anchor>bf2bb0465ed21515229d8817132782cb</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepDiagMatrix::HepDiagMatrix_row_const</name>
    <filename>classCLHEP_1_1HepDiagMatrix_1_1HepDiagMatrix__row__const.html</filename>
    <member kind="function">
      <type></type>
      <name>HepDiagMatrix_row_const</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix_1_1HepDiagMatrix__row__const.html</anchorfile>
      <anchor>59c277212052ce0eaf61c2bbb6d23d89</anchor>
      <arglist>(const HepDiagMatrix &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepDiagMatrix_1_1HepDiagMatrix__row__const.html</anchorfile>
      <anchor>a317e872fd8a84017444c68422914447</anchor>
      <arglist>(int) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepGenMatrix</name>
    <filename>classCLHEP_1_1HepGenMatrix.html</filename>
    <member kind="enumvalue">
      <name>size_max</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix.html</anchorfile>
      <anchor>3f1845bb10d8fb205f28cdc7656d84379bbb354571643cae1cf79d024f2686e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;::iterator</type>
      <name>mIter</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix.html</anchorfile>
      <anchor>e82cff35a08d2e1fca88bbd401b7fcb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;::const_iterator</type>
      <name>mcIter</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix.html</anchorfile>
      <anchor>2589108ff1129128f341d2e9dc6b389a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HepGenMatrix</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix.html</anchorfile>
      <anchor>53666b1a3af1d848488a5fac10ebc7b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>num_row</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix.html</anchorfile>
      <anchor>26ba4af393557d512aff090c0522b468</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>num_col</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix.html</anchorfile>
      <anchor>d5614b4d62117d8b17d9b8c5fa6117eb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const double &amp;</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix.html</anchorfile>
      <anchor>f0760755b97475d1f810f130d42fdfae</anchor>
      <arglist>(int row, int col) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double &amp;</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix.html</anchorfile>
      <anchor>733fc89a86aca3e01f416d7b6cef1f82</anchor>
      <arglist>(int row, int col)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invert</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix.html</anchorfile>
      <anchor>48176776c2f025ea9d58fb3aac4b7820</anchor>
      <arglist>(int &amp;)=0</arglist>
    </member>
    <member kind="function">
      <type>HepGenMatrix_row</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix.html</anchorfile>
      <anchor>05baf8c6d0e3f9205c1ace4e7831d0be</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const HepGenMatrix_row_const</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix.html</anchorfile>
      <anchor>d2f153fccf88112109590d3cdaee2a6d</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix.html</anchorfile>
      <anchor>e2795c1162aecf67400074b9ad4cd66c</anchor>
      <arglist>(const HepGenMatrix &amp;) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>swap</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix.html</anchorfile>
      <anchor>dee3f0eedc9c814ae6a46d487c331f3b</anchor>
      <arglist>(int &amp;, int &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>swap</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix.html</anchorfile>
      <anchor>59a9b7ec2b7529f064779c39244e1b74</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;, std::vector&lt; double &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>error</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix.html</anchorfile>
      <anchor>5998b899b81766d4d2459df6c828be0e</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>num_size</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix.html</anchorfile>
      <anchor>3f1a6bf1bb8c54ce49f49b1c95eeaa22</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>delete_m</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix.html</anchorfile>
      <anchor>ff134514c99ae7bf28e00b2d92667e19</anchor>
      <arglist>(int size, double *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double *</type>
      <name>new_m</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix.html</anchorfile>
      <anchor>945314555d0a4dc04b92b39c05462de6</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepGenMatrix_row</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix.html</anchorfile>
      <anchor>debf3d8d486e096a85e836ab596312f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepGenMatrix_row_const</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix.html</anchorfile>
      <anchor>c14922596869e04eb9272f185f15ab0b</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">CLHEP::HepGenMatrix::HepGenMatrix_row</class>
    <class kind="class">CLHEP::HepGenMatrix::HepGenMatrix_row_const</class>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepGenMatrix::HepGenMatrix_row</name>
    <filename>classCLHEP_1_1HepGenMatrix_1_1HepGenMatrix__row.html</filename>
    <member kind="function">
      <type></type>
      <name>HepGenMatrix_row</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix_1_1HepGenMatrix__row.html</anchorfile>
      <anchor>794502943ff8ac38590fc0c2c8df6fbd</anchor>
      <arglist>(HepGenMatrix &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix_1_1HepGenMatrix__row.html</anchorfile>
      <anchor>37fa323b813d5094a28713dc470318f6</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepGenMatrix::HepGenMatrix_row_const</name>
    <filename>classCLHEP_1_1HepGenMatrix_1_1HepGenMatrix__row__const.html</filename>
    <member kind="function">
      <type></type>
      <name>HepGenMatrix_row_const</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix_1_1HepGenMatrix__row__const.html</anchorfile>
      <anchor>7da205d646fc07ba76f7e5b7433549d3</anchor>
      <arglist>(const HepGenMatrix &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepGenMatrix_1_1HepGenMatrix__row__const.html</anchorfile>
      <anchor>c44c4143bd0c94ae1c9d59c3fb69053d</anchor>
      <arglist>(int) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepMatrix</name>
    <filename>classCLHEP_1_1HepMatrix.html</filename>
    <base>CLHEP::HepGenMatrix</base>
    <member kind="function">
      <type></type>
      <name>HepMatrix</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>2231da1942e2ecbcbbac07fd1008eaf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepMatrix</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>2ca6b2b34633f3ed92d4fe71cfbd4ae9</anchor>
      <arglist>(int p, int q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepMatrix</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>0806247b7841c0846d8b34fd5418546e</anchor>
      <arglist>(int p, int q, int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepMatrix</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>c11ade00cdbe7e680d3c66f6bfe9b6cf</anchor>
      <arglist>(int p, int q, HepRandom &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepMatrix</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>ed1b31af6683b4b64e1c17666a48c9b2</anchor>
      <arglist>(const HepMatrix &amp;m1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepMatrix</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>334cafcad2dfd64b32c0ccfb8c33dc6d</anchor>
      <arglist>(const HepSymMatrix &amp;m1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepMatrix</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>7bf8ba4f23c023d4e80143bc192adcdd</anchor>
      <arglist>(const HepDiagMatrix &amp;m1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepMatrix</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>ba6437dcffe84768a44428963730c9d6</anchor>
      <arglist>(const HepVector &amp;m1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HepMatrix</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>4dd7a0468f05e7357c67392b16c4ff05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>num_row</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>df2fbf93e61a32308b2ce5f919e6a748</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>num_col</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>6f203952df169620dfe3666e88429c72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const double &amp;</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>9f12bb02f70758fe9e0015fff6ded2cd</anchor>
      <arglist>(int row, int col) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double &amp;</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>5601ef8d8f5fbf3f6321a4d9ed87e9c3</anchor>
      <arglist>(int row, int col)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>69ad242585b0ee233582473e0bac3737</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix &amp;</type>
      <name>operator/=</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>b45d2f50668556f88a126dc169dd5bf7</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>382c818ce3f105e5f5293981198ca8ef</anchor>
      <arglist>(const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>77204190a5d113c1000655319c9acef0</anchor>
      <arglist>(const HepSymMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>6955585769d88da6a7f12c8b7799e793</anchor>
      <arglist>(const HepDiagMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>071394e9782b13ac60847fca78458bc2</anchor>
      <arglist>(const HepVector &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>6056f15dd773f6355bc39f6dd3354ed0</anchor>
      <arglist>(const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>e03208c4a43ab07809687fc831f97ab7</anchor>
      <arglist>(const HepSymMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>a463360dbf8f439da654c2ed774896bb</anchor>
      <arglist>(const HepDiagMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>b805b99db29b516783b4a96257804ecd</anchor>
      <arglist>(const HepVector &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>b7db073e2be79e8b342ef4666fd877ea</anchor>
      <arglist>(const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>e94464e8a743caa8b4423a440cd9bb9d</anchor>
      <arglist>(const HepSymMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>f7f2fd9d09147eb70cf7ed7b978b912e</anchor>
      <arglist>(const HepDiagMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>62cca3fe2e77c431ec2e7b1204adfd23</anchor>
      <arglist>(const HepVector &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>733c5c56473f581ad2d75868037db033</anchor>
      <arglist>(const HepRotation &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>operator-</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>d752e1f029fc215605e15529f9b13720</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>apply</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>8edb316790eda1d82846a0eb376ddf7a</anchor>
      <arglist>(double(*f)(double, int, int)) const </arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>T</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>d1daf42ba81900cf27b649a8204ea9eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>sub</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>27e1526be294e73360442347f2dbce69</anchor>
      <arglist>(int min_row, int max_row, int min_col, int max_col) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sub</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>ac80fdf70ad44029d2efdf0f996e237f</anchor>
      <arglist>(int row, int col, const HepMatrix &amp;m1)</arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>inverse</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>70adada9864fde465f12fd275ee804b6</anchor>
      <arglist>(int &amp;ierr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invert</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>ae29d91ce0866fc58474faa930bc9d58</anchor>
      <arglist>(int &amp;ierr)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>determinant</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>24b74263faba6c93148ed788073f9e90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>trace</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>c35f274be6a6aaf3a4b51a4d49aedeec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepMatrix_row</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>147d20e45cfdb4f58c84703aef2dd52e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const HepMatrix_row_const</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>a6ce782b26ccb3ce253fa04ca197083a</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>num_size</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>55b6072fe651675ee0dd915d63cfddbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>invertHaywood4</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>be2e90426b0342e0dbe835d7dd40f2b2</anchor>
      <arglist>(int &amp;ierr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>invertHaywood5</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>c5fedcf4429687da4d7bbf3e3ff250e7</anchor>
      <arglist>(int &amp;ierr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>invertHaywood6</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>188acb2f7b36879d8a39bac59e62eaa4</anchor>
      <arglist>(int &amp;ierr)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepMatrix_row</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>2d55bba6587f0b74b6624c55abc934e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepMatrix_row_const</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>4db927f7868c20dc6f38b234a9f411d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepVector</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>226b6de628cb91047a7d57cae0fd034d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepSymMatrix</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>c51b18c503e68236ece46aa3f0724148</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepDiagMatrix</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>330ee5cf4492426488121c4ca05f7486</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>473a3b4a6d392656c07b190ac007d84e</anchor>
      <arglist>(HepMatrix &amp;m1, HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepMatrix</type>
      <name>operator+</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>d4b8a997a0002731a53df8786f3c5a9c</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepMatrix</type>
      <name>operator-</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>bde4fea1e5804dcbe78bbff9260b228b</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepMatrix</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>169921a4a7cf8882f5f1a34b7af48a48</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepMatrix</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>d32e61b1ae13c34362bc0ff8a237f0e8</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepSymMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepMatrix</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>4fadf868a0d54ab7a2ce9e6821124839</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepDiagMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepMatrix</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>7d29e9cc65caba80234dee2d6fd0279b</anchor>
      <arglist>(const HepSymMatrix &amp;m1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepMatrix</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>810d1d6d28d4bc67ad9a4375207795d7</anchor>
      <arglist>(const HepDiagMatrix &amp;m1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepMatrix</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>a50d5a5b98cbed7ebc1dee42f7ce00a2</anchor>
      <arglist>(const HepVector &amp;m1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepVector</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>296511b4b6cafb29f751ce455b7a0855</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepVector &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepMatrix</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>10b2305e053998c7779dd685347170a2</anchor>
      <arglist>(const HepSymMatrix &amp;m1, const HepSymMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepVector</type>
      <name>solve</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>69c1fc16495fcceae1d4c96897cb082b</anchor>
      <arglist>(const HepMatrix &amp;, const HepVector &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepVector</type>
      <name>qr_solve</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>e337772a270149d6b63cca31f442240a</anchor>
      <arglist>(HepMatrix *, const HepVector &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepMatrix</type>
      <name>qr_solve</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>d4375901850672544c106a34492e9225</anchor>
      <arglist>(HepMatrix *, const HepMatrix &amp;b)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>tridiagonal</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>68c9cbe559e36b1ca6bed122937441db</anchor>
      <arglist>(HepSymMatrix *a, HepMatrix *hsm)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>row_house</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>686774a59d11c80d05beba3cc6597217</anchor>
      <arglist>(HepMatrix *, const HepMatrix &amp;, double, int, int, int, int)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>row_house</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>43939a307e270f025905da5012bed1c6</anchor>
      <arglist>(HepMatrix *, const HepVector &amp;, double, int, int)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>back_solve</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>fac02354a3572dac7614103f8cde6dc9</anchor>
      <arglist>(const HepMatrix &amp;R, HepVector *b)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>back_solve</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>13f38673561a59c7ee8da3e3d39581ef</anchor>
      <arglist>(const HepMatrix &amp;R, HepMatrix *b)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>col_givens</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>70fda0151c05e71b7bc51e1400654b8d</anchor>
      <arglist>(HepMatrix *A, double c, double s, int k1, int k2, int rowmin, int rowmax)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>row_givens</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>9c684c3daf4d439a1bf21bfd52297b86</anchor>
      <arglist>(HepMatrix *A, double c, double s, int k1, int k2, int colmin, int colmax)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>col_house</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>cb5ca5c3e089f2cf95a7aebd335f038d</anchor>
      <arglist>(HepMatrix *, const HepMatrix &amp;, double, int, int, int, int)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepVector</type>
      <name>house</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>00ee39afd53ee2365ed0b9887ef690df</anchor>
      <arglist>(const HepMatrix &amp;a, int row, int col)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>house_with_update</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>bfa3c047ff0b3270a1fec7a6d8d08672</anchor>
      <arglist>(HepMatrix *a, int row, int col)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>house_with_update</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>8c234e7e0bace1ec792c3842a304f01d</anchor>
      <arglist>(HepMatrix *a, HepMatrix *v, int row, int col)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>house_with_update2</name>
      <anchorfile>classCLHEP_1_1HepMatrix.html</anchorfile>
      <anchor>0b5fa4f4449d001e7173d1f2791b7aee</anchor>
      <arglist>(HepSymMatrix *a, HepMatrix *v, int row, int col)</arglist>
    </member>
    <class kind="class">CLHEP::HepMatrix::HepMatrix_row</class>
    <class kind="class">CLHEP::HepMatrix::HepMatrix_row_const</class>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepMatrix::HepMatrix_row</name>
    <filename>classCLHEP_1_1HepMatrix_1_1HepMatrix__row.html</filename>
    <member kind="function">
      <type></type>
      <name>HepMatrix_row</name>
      <anchorfile>classCLHEP_1_1HepMatrix_1_1HepMatrix__row.html</anchorfile>
      <anchor>fb10c4ebb9f66f5ac4639f4d79429652</anchor>
      <arglist>(HepMatrix &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepMatrix_1_1HepMatrix__row.html</anchorfile>
      <anchor>86437317abedcdedeca7f0445203e9d7</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepMatrix::HepMatrix_row_const</name>
    <filename>classCLHEP_1_1HepMatrix_1_1HepMatrix__row__const.html</filename>
    <member kind="function">
      <type></type>
      <name>HepMatrix_row_const</name>
      <anchorfile>classCLHEP_1_1HepMatrix_1_1HepMatrix__row__const.html</anchorfile>
      <anchor>11eac76ff6b30da0fce682d87055104a</anchor>
      <arglist>(const HepMatrix &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepMatrix_1_1HepMatrix__row__const.html</anchorfile>
      <anchor>c4d348e8f17bba25c09fec1c7789fcdd</anchor>
      <arglist>(int) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepPile</name>
    <filename>classCLHEP_1_1HepPile.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>~HepPile</name>
      <anchorfile>classCLHEP_1_1HepPile.html</anchorfile>
      <anchor>cf878237160cb373ba4ea2a714f9595e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepPile</name>
      <anchorfile>classCLHEP_1_1HepPile.html</anchorfile>
      <anchor>6b25f1fee3d1cf27bb5b104c310057e3</anchor>
      <arglist>(void(*f)(T)=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_destroy</name>
      <anchorfile>classCLHEP_1_1HepPile.html</anchorfile>
      <anchor>3dd988587fc9254252802d38546c91f3</anchor>
      <arglist>(void(*f)(T))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classCLHEP_1_1HepPile.html</anchorfile>
      <anchor>571ee31f74045d3f0d6d084fc4748635</anchor>
      <arglist>(T item)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_empty</name>
      <anchorfile>classCLHEP_1_1HepPile.html</anchorfile>
      <anchor>8c223dc5b5ba64fbc1d982106cadc853</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop</name>
      <anchorfile>classCLHEP_1_1HepPile.html</anchorfile>
      <anchor>7ef213474323939eda3992251aa77cdb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepSymMatrix</name>
    <filename>classCLHEP_1_1HepSymMatrix.html</filename>
    <base>CLHEP::HepGenMatrix</base>
    <member kind="function">
      <type></type>
      <name>HepSymMatrix</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>4639885ccf45419c4dd7397be081fdd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepSymMatrix</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>511723cbfae9c9e7ffceee5c53b85c06</anchor>
      <arglist>(int p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepSymMatrix</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>6e108b3faa7a31f0c81906be75b7fc4c</anchor>
      <arglist>(int p, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepSymMatrix</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>dcb738883b4f03bb0dd3eeccaa139b02</anchor>
      <arglist>(int p, HepRandom &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepSymMatrix</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>22c8cf1158d9bcc1dc942215a22f92bf</anchor>
      <arglist>(const HepSymMatrix &amp;m1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepSymMatrix</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>c5226e383480ebecf3ef6c620223e16e</anchor>
      <arglist>(const HepDiagMatrix &amp;m1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HepSymMatrix</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>79958c054e0dcd9325d62bc04375f605</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_row</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>cb6ff212f300dcc64532d51ab8766c71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_col</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>23ad33a61fdc62dfb543c3bdc326a477</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>ee5071cc1ec8d50d2d56277942319ce7</anchor>
      <arglist>(int row, int col) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>e4cf36c993ba5bca024cb8c9aaf2aecc</anchor>
      <arglist>(int row, int col)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>fast</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>548c9d79fdda47227ad5c0990bbf1234</anchor>
      <arglist>(int row, int col) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>fast</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>0c41b970c6af43411b6790ca0aa3ef98</anchor>
      <arglist>(int row, int col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>d210b3ddea2d970693365abd44e9de08</anchor>
      <arglist>(const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>5e3e1b43c888a934d2b5b01b2748a8f8</anchor>
      <arglist>(const HepSymMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>0da580fd430234ae32dbbaacd657af8d</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix &amp;</type>
      <name>operator/=</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>4ed27ece1a174860e23b366dd11fca69</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>79600925524bb5407b65175b584b13a0</anchor>
      <arglist>(const HepSymMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>11dcfee9507c84ec4dbc3d75dbfb13b7</anchor>
      <arglist>(const HepDiagMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>4cdaf8c4254df67dfbf8a6684432bea0</anchor>
      <arglist>(const HepSymMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>cf0e390b7f117424b6f7412ef082da46</anchor>
      <arglist>(const HepDiagMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>b571e689f75a3d84f0754d012949e013</anchor>
      <arglist>(const HepSymMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>cf58cbc8b5b5610f391b1a7c3642b4ee</anchor>
      <arglist>(const HepDiagMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>operator-</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>af46b59354f271c49712d3f31c3679b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>T</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>339fa9418657433c63853e15a4022255</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>apply</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>c507eafd33f4035099d68fc66afcec4b</anchor>
      <arglist>(double(*f)(double, int, int)) const </arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>similarity</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>0f9219bd415b62a8998a5f6516eb6ee0</anchor>
      <arglist>(const HepMatrix &amp;m1) const </arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>similarity</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>00ad871a8aec022b170c5a97618041c0</anchor>
      <arglist>(const HepSymMatrix &amp;m1) const </arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>similarityT</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>a703de4e2b24ae0fbfb81bfecb1d8f47</anchor>
      <arglist>(const HepMatrix &amp;m1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>similarity</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>17cca20552d2ec086f6b5cf0a69cdbb5</anchor>
      <arglist>(const HepVector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>sub</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>4d557bd6fadb4db035d39df68d8603f1</anchor>
      <arglist>(int min_row, int max_row) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sub</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>a1478823c9896d7937493e9ebe9f4942</anchor>
      <arglist>(int row, const HepSymMatrix &amp;m1)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>sub</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>9aa09450bf781b8167c05d99c4dbf020</anchor>
      <arglist>(int min_row, int max_row)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix</type>
      <name>inverse</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>e263a7f05b444c150c516dcfe7600154</anchor>
      <arglist>(int &amp;ifail) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>05b742af6bfb54c1e606990ef7c05259</anchor>
      <arglist>(int &amp;ifail)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>determinant</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>1eefb8922062bc0def68a3e58a33b8e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>trace</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>fcc5f838b23086318e4c24e516d67867</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix_row</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>13351db099a9cba9203127aa6460e003</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>HepSymMatrix_row_const</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>e5d1c7dbfbf21a1989f58ca15ce9cf6e</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invertCholesky5</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>b09241cf54867c930d35e9b417f8e66f</anchor>
      <arglist>(int &amp;ifail)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invertCholesky6</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>4511f64ceeca262c3b5048c034ad8a36</anchor>
      <arglist>(int &amp;ifail)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invertHaywood4</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>4bf9a51097324b00bb20ae5dc4df09b4</anchor>
      <arglist>(int &amp;ifail)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invertHaywood5</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>2507ebae0956698f214217ab6cdda877</anchor>
      <arglist>(int &amp;ifail)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invertHaywood6</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>bbe758f97beb4300fb5b043e1c65834b</anchor>
      <arglist>(int &amp;ifail)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invertBunchKaufman</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>d4f4d9ebc78bf1836cbedaded39edefb</anchor>
      <arglist>(int &amp;ifail)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>num_size</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>b203c51eb510957e053d09156ed48585</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepSymMatrix_row</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>244f2e65bf27ec5bdddc92eab620a95c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepSymMatrix_row_const</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>f5bd8f48c801f738e36aecd7147d40a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepMatrix</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>e5e937e96b9a35750588b9dafff40fca</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepDiagMatrix</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>330ee5cf4492426488121c4ca05f7486</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>tridiagonal</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>68c9cbe559e36b1ca6bed122937441db</anchor>
      <arglist>(HepSymMatrix *a, HepMatrix *hsm)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend double</type>
      <name>condition</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>0a509cb5137d63ffcffbf953f5672937</anchor>
      <arglist>(const HepSymMatrix &amp;m)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>diag_step</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>912e9f1ad657e535cc01783adb379184</anchor>
      <arglist>(HepSymMatrix *t, int begin, int end)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>diag_step</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>a852d4df5cc3a6c824649f02cd458eac</anchor>
      <arglist>(HepSymMatrix *t, HepMatrix *u, int begin, int end)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepMatrix</type>
      <name>diagonalize</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>7b416114ba80e50045187842ea14f1f0</anchor>
      <arglist>(HepSymMatrix *s)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepVector</type>
      <name>house</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>efc33fc81f53ab3ad085dc147aca7b9a</anchor>
      <arglist>(const HepSymMatrix &amp;a, int row, int col)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>house_with_update2</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>0b5fa4f4449d001e7173d1f2791b7aee</anchor>
      <arglist>(HepSymMatrix *a, HepMatrix *v, int row, int col)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepSymMatrix</type>
      <name>operator+</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>4e8737657fcc8f6c8793c597158d76ef</anchor>
      <arglist>(const HepSymMatrix &amp;m1, const HepSymMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepSymMatrix</type>
      <name>operator-</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>1fbf1d41a429ad3dfc9d505cec57c40b</anchor>
      <arglist>(const HepSymMatrix &amp;m1, const HepSymMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepMatrix</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>10b2305e053998c7779dd685347170a2</anchor>
      <arglist>(const HepSymMatrix &amp;m1, const HepSymMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepMatrix</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>7d29e9cc65caba80234dee2d6fd0279b</anchor>
      <arglist>(const HepSymMatrix &amp;m1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepMatrix</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>d32e61b1ae13c34362bc0ff8a237f0e8</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepSymMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepVector</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>3bd3950e61ccaa43f241803027dccd35</anchor>
      <arglist>(const HepSymMatrix &amp;m1, const HepVector &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepSymMatrix</type>
      <name>vT_times_v</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix.html</anchorfile>
      <anchor>d449a3207e81b7a926f12fc19d730d4f</anchor>
      <arglist>(const HepVector &amp;v)</arglist>
    </member>
    <class kind="class">CLHEP::HepSymMatrix::HepSymMatrix_row</class>
    <class kind="class">CLHEP::HepSymMatrix::HepSymMatrix_row_const</class>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepSymMatrix::HepSymMatrix_row</name>
    <filename>classCLHEP_1_1HepSymMatrix_1_1HepSymMatrix__row.html</filename>
    <member kind="function">
      <type></type>
      <name>HepSymMatrix_row</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix_1_1HepSymMatrix__row.html</anchorfile>
      <anchor>18c6d70ad12eecaf9a8f7b2edcec533a</anchor>
      <arglist>(HepSymMatrix &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix_1_1HepSymMatrix__row.html</anchorfile>
      <anchor>d6ba323404fb270e4d963d2a32cd3948</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepSymMatrix::HepSymMatrix_row_const</name>
    <filename>classCLHEP_1_1HepSymMatrix_1_1HepSymMatrix__row__const.html</filename>
    <member kind="function">
      <type></type>
      <name>HepSymMatrix_row_const</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix_1_1HepSymMatrix__row__const.html</anchorfile>
      <anchor>4722fd0d71481318aae38b83eba99338</anchor>
      <arglist>(const HepSymMatrix &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepSymMatrix_1_1HepSymMatrix__row__const.html</anchorfile>
      <anchor>a46f57cda830713a908420ab68f496a8</anchor>
      <arglist>(int) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepVector</name>
    <filename>classCLHEP_1_1HepVector.html</filename>
    <base>CLHEP::HepGenMatrix</base>
    <member kind="function">
      <type></type>
      <name>HepVector</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>785119630f453e55623502ef2200cc61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepVector</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>0482eaf79ce86bfad4d4f2e667a06a35</anchor>
      <arglist>(int p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepVector</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>1d7564b0fda8e2d79641b921e9f40117</anchor>
      <arglist>(int p, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepVector</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>4aea089621868bdb5d4889f3f19ebae0</anchor>
      <arglist>(int p, HepRandom &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepVector</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>7779a6aa18ee88b5dd98cb8834f01fd6</anchor>
      <arglist>(const HepVector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepVector</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>8bb34e68b0c10e787495bb43695959e4</anchor>
      <arglist>(const HepMatrix &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HepVector</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>fbdbc242ac7538a05bd9493cce37bb5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>39a9d9ec682fdead9db6366cd03d61cd</anchor>
      <arglist>(int row) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>3601024dd0b0bb59c93e32e04dfa6265</anchor>
      <arglist>(int row)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>550730ed169329668e56322a00cd8f8c</anchor>
      <arglist>(int row) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>2a6ea786623e70e4b4a29cdc20a41b98</anchor>
      <arglist>(int row)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const double &amp;</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>da8c9294ea52c8e9bbfb59af4ed1dcc7</anchor>
      <arglist>(int row, int col) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double &amp;</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>3f49b91aa93a78d8cee07e692dca5470</anchor>
      <arglist>(int row, int col)</arglist>
    </member>
    <member kind="function">
      <type>HepVector &amp;</type>
      <name>operator*=</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>7bebd7cae01d4b66d9e7c7500becc888</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>HepVector &amp;</type>
      <name>operator/=</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>3dbb414312ae0a68d834519540f344cd</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>HepVector &amp;</type>
      <name>operator+=</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>5e944dc712760990bb8629e81202522a</anchor>
      <arglist>(const HepMatrix &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>HepVector &amp;</type>
      <name>operator+=</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>e88c9a2e24ef2f9fa783afdfe0ff66c6</anchor>
      <arglist>(const HepVector &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>HepVector &amp;</type>
      <name>operator-=</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>65dad86c5d1fe98b8800945fc06ae7ec</anchor>
      <arglist>(const HepMatrix &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>HepVector &amp;</type>
      <name>operator-=</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>7a93dd2593179860b34f294b57d7daca</anchor>
      <arglist>(const HepVector &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>HepVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>92b2d29081a176500df68415cdca813c</anchor>
      <arglist>(const HepVector &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>HepVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>0af5754d3bae8a3cb6046451a6626b08</anchor>
      <arglist>(const HepMatrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HepVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>11bae97a33be1aa5714e85af25891f79</anchor>
      <arglist>(const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator-</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>b925d32c93dc1e411480fb34be601199</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>apply</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>1e1ab9cf3e7b1566720d7b28a5b6c5f2</anchor>
      <arglist>(double(*f)(double, int)) const </arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>sub</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>e937aee0849bcbaa2b6e02133d077a8b</anchor>
      <arglist>(int min_row, int max_row) const </arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>sub</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>9637211539459d0fc68dd5b4130b30be</anchor>
      <arglist>(int min_row, int max_row)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sub</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>8a8e97c757388f71c39ba24aa3f023a5</anchor>
      <arglist>(int row, const HepVector &amp;v1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>normsq</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>4334bf0c09b890709d264e9e7f8ba673</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>bc630f24fba4046d0efae779b9767a64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>num_row</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>b83643e5ed320b496726743b22d7cf96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>num_col</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>18041ffca1469bcb725df61e6fe308c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepMatrix</type>
      <name>T</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>9478b84e86d5640550e32a91f2bead4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>num_size</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>8ab1d7eb59b3cff9712df305d0002194</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepDiagMatrix</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>330ee5cf4492426488121c4ca05f7486</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepSymMatrix</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>c51b18c503e68236ece46aa3f0724148</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepMatrix</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>e5e937e96b9a35750588b9dafff40fca</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>16f16459afe3cfd6e5b49699e44aed5a</anchor>
      <arglist>(HepVector &amp;v1, HepVector &amp;v2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend double</type>
      <name>dot</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>6800c4abda031015d1ae2af44bcee205</anchor>
      <arglist>(const HepVector &amp;v1, const HepVector &amp;v2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepVector</type>
      <name>operator+</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>e723ff15b43866062628f2248e429325</anchor>
      <arglist>(const HepVector &amp;v1, const HepVector &amp;v2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepVector</type>
      <name>operator-</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>5757ad41a2509796069086ca018c4c3b</anchor>
      <arglist>(const HepVector &amp;v1, const HepVector &amp;v2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepVector</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>3bd3950e61ccaa43f241803027dccd35</anchor>
      <arglist>(const HepSymMatrix &amp;m1, const HepVector &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepVector</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>07e4d7dd9e165f7e83b2c1a53afa161a</anchor>
      <arglist>(const HepDiagMatrix &amp;m1, const HepVector &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepMatrix</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>a50d5a5b98cbed7ebc1dee42f7ce00a2</anchor>
      <arglist>(const HepVector &amp;m1, const HepMatrix &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepVector</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>296511b4b6cafb29f751ce455b7a0855</anchor>
      <arglist>(const HepMatrix &amp;m1, const HepVector &amp;m2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepVector</type>
      <name>solve</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>6de5424c0206ceb44b3f51d445327b77</anchor>
      <arglist>(const HepMatrix &amp;a, const HepVector &amp;v)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>tridiagonal</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>68c9cbe559e36b1ca6bed122937441db</anchor>
      <arglist>(HepSymMatrix *a, HepMatrix *hsm)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>row_house</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>686774a59d11c80d05beba3cc6597217</anchor>
      <arglist>(HepMatrix *, const HepMatrix &amp;, double, int, int, int, int)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>row_house</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>43939a307e270f025905da5012bed1c6</anchor>
      <arglist>(HepMatrix *, const HepVector &amp;, double, int, int)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>back_solve</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>fac02354a3572dac7614103f8cde6dc9</anchor>
      <arglist>(const HepMatrix &amp;R, HepVector *b)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>col_house</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>cb5ca5c3e089f2cf95a7aebd335f038d</anchor>
      <arglist>(HepMatrix *, const HepMatrix &amp;, double, int, int, int, int)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepVector</type>
      <name>house</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>efc33fc81f53ab3ad085dc147aca7b9a</anchor>
      <arglist>(const HepSymMatrix &amp;a, int row, int col)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepVector</type>
      <name>house</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>00ee39afd53ee2365ed0b9887ef690df</anchor>
      <arglist>(const HepMatrix &amp;a, int row, int col)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>house_with_update</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>bfa3c047ff0b3270a1fec7a6d8d08672</anchor>
      <arglist>(HepMatrix *a, int row, int col)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepSymMatrix</type>
      <name>vT_times_v</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>d449a3207e81b7a926f12fc19d730d4f</anchor>
      <arglist>(const HepVector &amp;v)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend HepVector</type>
      <name>qr_solve</name>
      <anchorfile>classCLHEP_1_1HepVector.html</anchorfile>
      <anchor>e337772a270149d6b63cca31f442240a</anchor>
      <arglist>(HepMatrix *, const HepVector &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::DoubConvException</name>
    <filename>classCLHEP_1_1DoubConvException.html</filename>
    <member kind="function">
      <type></type>
      <name>DoubConvException</name>
      <anchorfile>classCLHEP_1_1DoubConvException.html</anchorfile>
      <anchor>1de5aedf3c147beca8210ba7c4ebfe89</anchor>
      <arglist>(const std::string &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DoubConvException</name>
      <anchorfile>classCLHEP_1_1DoubConvException.html</anchorfile>
      <anchor>c1d2445387a6c8cad4c9142b7cd6db85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>classCLHEP_1_1DoubConvException.html</anchorfile>
      <anchor>0bf1f1a569c086f077378dcae3a032da</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::DoubConv</name>
    <filename>classCLHEP_1_1DoubConv.html</filename>
    <member kind="function" static="yes">
      <type>static std::vector&lt; unsigned long &gt;</type>
      <name>dto2longs</name>
      <anchorfile>classCLHEP_1_1DoubConv.html</anchorfile>
      <anchor>43bc10b4150f8e2d0679951d33a34b64</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>longs2double</name>
      <anchorfile>classCLHEP_1_1DoubConv.html</anchorfile>
      <anchor>301d9ffc315a9bf636fa7611cb3f1d65</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>d2x</name>
      <anchorfile>classCLHEP_1_1DoubConv.html</anchorfile>
      <anchor>b05e31d569ffcd7f16ebf7f2d3007ade</anchor>
      <arglist>(double d)</arglist>
    </member>
    <class kind="union">CLHEP::DoubConv::DB8</class>
  </compound>
  <compound kind="class">
    <name>CLHEP::DRand48Engine</name>
    <filename>classCLHEP_1_1DRand48Engine.html</filename>
    <base>CLHEP::HepRandomEngine</base>
    <member kind="function">
      <type></type>
      <name>DRand48Engine</name>
      <anchorfile>classCLHEP_1_1DRand48Engine.html</anchorfile>
      <anchor>a31ac6ca9e61037a20058bb2fd867fec</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DRand48Engine</name>
      <anchorfile>classCLHEP_1_1DRand48Engine.html</anchorfile>
      <anchor>f26c0e551e11b09db2fde832686509b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DRand48Engine</name>
      <anchorfile>classCLHEP_1_1DRand48Engine.html</anchorfile>
      <anchor>cea8d923885c41d25642b513fc281945</anchor>
      <arglist>(long seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DRand48Engine</name>
      <anchorfile>classCLHEP_1_1DRand48Engine.html</anchorfile>
      <anchor>881810916a32a87531d59ce9084fc0b2</anchor>
      <arglist>(int rowIndex, int colIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DRand48Engine</name>
      <anchorfile>classCLHEP_1_1DRand48Engine.html</anchorfile>
      <anchor>359cd01aae44c4ed712e5d6f3632b5bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>flat</name>
      <anchorfile>classCLHEP_1_1DRand48Engine.html</anchorfile>
      <anchor>33c5f7b3a59b4b46711ff0ffd93c59b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flatArray</name>
      <anchorfile>classCLHEP_1_1DRand48Engine.html</anchorfile>
      <anchor>fc82fff14f5250b17ff0dd3c9b660cac</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchorfile>classCLHEP_1_1DRand48Engine.html</anchorfile>
      <anchor>61be068fca14766ca71891836f8ca640</anchor>
      <arglist>(long seed, int dum=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeeds</name>
      <anchorfile>classCLHEP_1_1DRand48Engine.html</anchorfile>
      <anchor>6a5685ca14e43bf0f77db8e5957d9954</anchor>
      <arglist>(const long *seeds, int dum=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveStatus</name>
      <anchorfile>classCLHEP_1_1DRand48Engine.html</anchorfile>
      <anchor>ef805725c4520d766dd4bc75b01059cf</anchor>
      <arglist>(const char filename[]=&quot;DRand48.conf&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreStatus</name>
      <anchorfile>classCLHEP_1_1DRand48Engine.html</anchorfile>
      <anchor>ecf5385f33e68eef9f3ff130a2618958</anchor>
      <arglist>(const char filename[]=&quot;DRand48.conf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showStatus</name>
      <anchorfile>classCLHEP_1_1DRand48Engine.html</anchorfile>
      <anchor>fe106cc69f6834e906ace88abd13b248</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1DRand48Engine.html</anchorfile>
      <anchor>594db9dd78c6fabd4505ee925623ff46</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1DRand48Engine.html</anchorfile>
      <anchor>12a85a0a8e62ff5204bfd67e0a289ccf</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1DRand48Engine.html</anchorfile>
      <anchor>f2feb7137644e94b9c1bc8a5f64a2449</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1DRand48Engine.html</anchorfile>
      <anchor>ba4c9feabe2442c5879fee949fb846be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned long &gt;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1DRand48Engine.html</anchorfile>
      <anchor>7cedbdfdcc4d2a4db8121168d3f1e96f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1DRand48Engine.html</anchorfile>
      <anchor>7a067282ef3881cd26521fa932e9e382</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1DRand48Engine.html</anchorfile>
      <anchor>3cc09f988db8ac1effcba882779d7f5b</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>beginTag</name>
      <anchorfile>classCLHEP_1_1DRand48Engine.html</anchorfile>
      <anchor>c5fe312c49837cb089bc06f082c1bec4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>engineName</name>
      <anchorfile>classCLHEP_1_1DRand48Engine.html</anchorfile>
      <anchor>12588d29a19fed5377250ea849696131</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>VECTOR_STATE_SIZE</name>
      <anchorfile>classCLHEP_1_1DRand48Engine.html</anchorfile>
      <anchor>68db18af96f21ddcad9bc91df051afc3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::DualRand</name>
    <filename>classCLHEP_1_1DualRand.html</filename>
    <base>CLHEP::HepRandomEngine</base>
    <member kind="function">
      <type></type>
      <name>DualRand</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>71db2ca51fa9cc68b482be108be67482</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DualRand</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>e1a5419a9fe8d113262ab875c0474ba3</anchor>
      <arglist>(long seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DualRand</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>cc6d23f0926a55ed0272ebb893190d01</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DualRand</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>0f77f59656ef234d8078ef2f2acd35f2</anchor>
      <arglist>(int rowIndex, int colIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DualRand</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>0aca0ccb616926c83652a9f407901fb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DualRand</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>38962879199df4d1446d4e15ba70373e</anchor>
      <arglist>(const DualRand &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>DualRand &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>815426a1cd09df1fb5ab63c91350fc13</anchor>
      <arglist>(const DualRand &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>flat</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>e8e076cc401aa5b06fa3daa772a71e1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flatArray</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>c35fd16fa5ccc11982eaac658c14f47a</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>a76327324aced2d6a573908891177ae9</anchor>
      <arglist>(long seed, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeeds</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>0f11cd7e113e6065183727f0658ff564</anchor>
      <arglist>(const long *seeds, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveStatus</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>a258b8f30808c3bc28f5b47fbc8ddfdc</anchor>
      <arglist>(const char filename[]=&quot;DualRand.conf&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreStatus</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>52664580a2eaeac98e7be9a0636e7b69</anchor>
      <arglist>(const char filename[]=&quot;DualRand.conf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showStatus</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>7db6854a661e5b24377f9780968ed54d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator float</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>dbb2d718decf790394ddd41ed2ccca58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>cd1bff1521925c3a98f63891cb6df288</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>17852b3413531b2f76a4dc74189b7b1e</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>98ec30f901cb72a4f5747c905af35f1c</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>646c0c5caf2f96e8c1b389ead51ae6fc</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>19d2b662fd4cabf1db46173822e03bee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned long &gt;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>a1766a42790fe110daa8cc2064ec74d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>f3142cd00c3526dc4dec17bcb17b723b</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>10621914413c48bb6048a866a0c4e5c6</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>beginTag</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>4b4d04ed5decf1e0bdc3dbce3a0a5e46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>engineName</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>e349ffa4136352c12fc54aa5545a44ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>VECTOR_STATE_SIZE</name>
      <anchorfile>classCLHEP_1_1DualRand.html</anchorfile>
      <anchor>503c3ec91942b61f940b4c59574898b0</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">CLHEP::DualRand::IntegerCong</class>
    <class kind="class">CLHEP::DualRand::Tausworthe</class>
  </compound>
  <compound kind="class">
    <name>CLHEP::EngineFactory</name>
    <filename>classCLHEP_1_1EngineFactory.html</filename>
    <member kind="function" static="yes">
      <type>static HepRandomEngine *</type>
      <name>newEngine</name>
      <anchorfile>classCLHEP_1_1EngineFactory.html</anchorfile>
      <anchor>fe0dd2c9b7293f546f3771aa995f90fc</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HepRandomEngine *</type>
      <name>newEngine</name>
      <anchorfile>classCLHEP_1_1EngineFactory.html</anchorfile>
      <anchor>ed8dc556badd2cd562fcfd474e475922</anchor>
      <arglist>(std::vector&lt; unsigned long &gt; const &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::Hurd160Engine</name>
    <filename>classCLHEP_1_1Hurd160Engine.html</filename>
    <base>CLHEP::HepRandomEngine</base>
    <member kind="function">
      <type></type>
      <name>Hurd160Engine</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>7e6d565909c456542a38d3b7f894f6e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hurd160Engine</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>950aee00c23b35b22173a330ed791b37</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hurd160Engine</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>f820200dfca442a19620b72fd2501911</anchor>
      <arglist>(long seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hurd160Engine</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>4d2bb80cbd05c6e4beb5183c45203f5f</anchor>
      <arglist>(int rowIndex, int colIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Hurd160Engine</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>4b8b52d0ab7e0b9d810f50add6e9fe36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hurd160Engine</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>818349a78acdf45203d274ad91585b1f</anchor>
      <arglist>(const Hurd160Engine &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Hurd160Engine &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>6e1f9067148f3b7beb930baaea46d87f</anchor>
      <arglist>(const Hurd160Engine &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>flat</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>f994fe397a5804fcb1ba721f4867dc0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flatArray</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>a0e5ddb932b6d0c7dade8e897358b265</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>a12ee009de43c3c4f0b142314cf6eda0</anchor>
      <arglist>(long seed, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeeds</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>3854ceac4f89afe22143a8a91e8cc709</anchor>
      <arglist>(const long *seeds, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveStatus</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>6dba94baed582ec607773b4e678f775e</anchor>
      <arglist>(const char filename[]=&quot;Hurd160Engine.conf&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreStatus</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>42e6ecaeed05cbc98e91052627185d96</anchor>
      <arglist>(const char filename[]=&quot;Hurd160Engine.conf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showStatus</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>e7f40a93afde12f07ba516cd54b65f7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator float</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>cff688391648bb16530894a9b1bf3007</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>61652dea66f1dda39b067448ad2350a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>834aec8da65467f8ceaea6fa97c36bc7</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>381cc2094b2e86a9a16a1e61634bee92</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>dc38865abdcbecd6627c6738b4467410</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>33cf235337ec98e51830d8f59ef45dd3</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned long &gt;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>4300f2f044a7af6c5ac468c857025a89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>0bbb7f7a1b637bea650e4a27fb870e04</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>8bc7cebce2ddd7c96e055898a9ddb452</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>engineName</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>8f1a3da4de244ef56974259b9b2bfd17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>beginTag</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>a772c98b22395802170149a62ed773db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>VECTOR_STATE_SIZE</name>
      <anchorfile>classCLHEP_1_1Hurd160Engine.html</anchorfile>
      <anchor>11ed3ce7b93a41c573f7c5131e893343</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::Hurd288Engine</name>
    <filename>classCLHEP_1_1Hurd288Engine.html</filename>
    <base>CLHEP::HepRandomEngine</base>
    <member kind="function">
      <type></type>
      <name>Hurd288Engine</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>f199816c7feb27ba2df2b37eff3fedec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hurd288Engine</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>d4bd585e967a516c086bbd70266ee9c9</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hurd288Engine</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>325c1800716d84f3a6c4d08ff7215ba3</anchor>
      <arglist>(long seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hurd288Engine</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>9ed0e5f8e3d0955291f3df3970a6cca7</anchor>
      <arglist>(int rowIndex, int colIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Hurd288Engine</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>25d246918168379d4d85eb8e5f4ea85e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hurd288Engine</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>f6105ce7b3314ba0b43040a03b7ea609</anchor>
      <arglist>(const Hurd288Engine &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Hurd288Engine &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>cc838b94d9682be42c1a63e4b27341b3</anchor>
      <arglist>(const Hurd288Engine &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>flat</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>f1e3fa7738169d45a0105210ce904094</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flatArray</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>3afaf648fd1a33682cc60430b5e8bbf1</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>8d45c6d04b3b8e102726277b28ee26d6</anchor>
      <arglist>(long seed, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeeds</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>37a42bbc5eadaab7544683a592cf2a0e</anchor>
      <arglist>(const long *seeds, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveStatus</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>df2ca9cbd89dd9c7b3edc9c422e78add</anchor>
      <arglist>(const char filename[]=&quot;Hurd288Engine.conf&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreStatus</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>a5c10560470ecd62bbaa70bc1f5763d6</anchor>
      <arglist>(const char filename[]=&quot;Hurd288Engine.conf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showStatus</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>7284566350378012174ec97d3171c264</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator float</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>e9a5336985eef9bdb8b49e3fd624d12d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>ee1c309512e5f6c0870148e492004f2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>3d185b6bfc4a8678bd11d0d4c2015207</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>087355af6b34bccab2522d42699650cc</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>27d9b5ff4dc1d8c2ccb5be82740711c3</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>ba451db6f9d6efcc48158aad519c5227</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned long &gt;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>ebf6d59e8e6e2374e88b59742c922eaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>9f8bb104011eeaa8791e3da40719f4ce</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>13a9e7f7e837858d5266f89ee29e263b</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>beginTag</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>70c1ca4472e43e7cdfa40cdf4b980629</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>engineName</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>8c05afa6a7af94713d482a189f120118</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>VECTOR_STATE_SIZE</name>
      <anchorfile>classCLHEP_1_1Hurd288Engine.html</anchorfile>
      <anchor>d9c67cbb3cd0c6965d71e59ff9b13835</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepJamesRandom</name>
    <filename>classCLHEP_1_1HepJamesRandom.html</filename>
    <base>CLHEP::HepRandomEngine</base>
    <member kind="function">
      <type></type>
      <name>HepJamesRandom</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>20197e6424c09094451ed23053b305f6</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepJamesRandom</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>63a871b2a3e576bdb734071e8ddc0286</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepJamesRandom</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>3d2988cf0ec5d3efd788c922f7271352</anchor>
      <arglist>(long seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepJamesRandom</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>45099c7374662e51ea7702690ebadeef</anchor>
      <arglist>(int rowIndex, int colIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HepJamesRandom</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>93bd7d56992af548f375d12264d8afd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepJamesRandom</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>3340c4a8ca4e9c9fc5cb3765b21ea483</anchor>
      <arglist>(const HepJamesRandom &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>HepJamesRandom &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>920b70bb379c8a4fe4b0ad7b60c55992</anchor>
      <arglist>(const HepJamesRandom &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>flat</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>438dac4de1dda008b5cd6ce094762d0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flatArray</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>02db2895b2704ade6322e92e351da564</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>94321547603802271a14c41d7dd5627f</anchor>
      <arglist>(long seed, int dum=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeeds</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>41f2cfb83be183d6050773935138cd9a</anchor>
      <arglist>(const long *seeds, int dum=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveStatus</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>21a150b8ffcacbbc97adb95476c6eb0b</anchor>
      <arglist>(const char filename[]=&quot;JamesRand.conf&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreStatus</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>cc9d7af663a9b737da648d064af0f079</anchor>
      <arglist>(const char filename[]=&quot;JamesRand.conf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showStatus</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>dfe4140a7517ac4f298b5918ae44d38f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>96d3149ebd3fa257dc2e7908ffc8f0ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>504e87507a5a3252e09bdd0b8ae2f9e2</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>006a1d3c35ffe84b691278bdea7c196a</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>1ec744f6db0f1fdbc12cbcc84b53f1bb</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>b22f6d5db6fae37f0ece1288621d6012</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned long &gt;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>c28c66295d7dd140687af0d4027b9500</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>14affb3982832d2e36e3d7a3fdd8685c</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>46ef0a270b8108df336c61be7d290a4a</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>beginTag</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>8cab18d0b0795edd5cc101eeecd76dd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>engineName</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>28f083cdaa43a458933f1e9b8d76980e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>VECTOR_STATE_SIZE</name>
      <anchorfile>classCLHEP_1_1HepJamesRandom.html</anchorfile>
      <anchor>d6cf407e94aa5a1eb7d4310d5fc34b07</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::MTwistEngine</name>
    <filename>classCLHEP_1_1MTwistEngine.html</filename>
    <base>CLHEP::HepRandomEngine</base>
    <member kind="function">
      <type></type>
      <name>MTwistEngine</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>17de4379af04b616996aaf960b6ad662</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MTwistEngine</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>7702c6ec25a841578ac91f6a0566f881</anchor>
      <arglist>(long seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MTwistEngine</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>829ea2f53aba189751e77f6e1debe7e2</anchor>
      <arglist>(int rowIndex, int colIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MTwistEngine</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>30edffc14b1358a6db102fedf37c19c1</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MTwistEngine</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>4285e73f3d1cce8bd358c84c24ce6fec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MTwistEngine</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>b4ddb72e370ef4c5abc47b4ca5f73ae8</anchor>
      <arglist>(const MTwistEngine &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>MTwistEngine &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>98d28ff6a61201ccd069a40c2bd5f8ba</anchor>
      <arglist>(const MTwistEngine &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>flat</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>c8739af36dbf9bc2fea86ef1e74727b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flatArray</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>2ef52e2b68dae7e64ec3a85418567351</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>bb7a4bc179f0dc4ae2fc494b4a4adf46</anchor>
      <arglist>(long seed, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeeds</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>495f9a5d77a5f11bc46e2a34ac7216bd</anchor>
      <arglist>(const long *seeds, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveStatus</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>47ea264df501c879cb4345f377ec13e4</anchor>
      <arglist>(const char filename[]=&quot;MTwist.conf&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreStatus</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>395d16afb858503fac60ea126c619fc4</anchor>
      <arglist>(const char filename[]=&quot;MTwist.conf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showStatus</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>517fd5a07feb0c5fdaa21ccaa4e288c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator float</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>777f810ba141dcae8e803e6ada3437d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>1c72e46a14a4afe71734ec92f39f9b78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>ed2c0ed64f5d18ab8b5dd7cca7013128</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>2b14ea64e9283d689bf7b3849bd347d9</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>a78ad116bd112ddd59d34556c3a33cbf</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>8c6bd108f2da108baf9a65cd56f5c9ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned long &gt;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>8eb3f95f9d34d095e71ee886203860aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>b1109cb2461c5749e5aabf7dd913142b</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>17996e6efaf68b5fbf60583cf890566a</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>beginTag</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>357e626f9269bcbb806b0c3d71ed15a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>engineName</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>3e22f6725a35ab4201e4912b1bbbc389</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>VECTOR_STATE_SIZE</name>
      <anchorfile>classCLHEP_1_1MTwistEngine.html</anchorfile>
      <anchor>ba2cdd60716ad4534724ce4dd55de32a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::NonRandomEngine</name>
    <filename>classCLHEP_1_1NonRandomEngine.html</filename>
    <base>CLHEP::HepRandomEngine</base>
    <member kind="function">
      <type></type>
      <name>NonRandomEngine</name>
      <anchorfile>classCLHEP_1_1NonRandomEngine.html</anchorfile>
      <anchor>dd155ed682f775e0bc72ac6bb41d6eb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NonRandomEngine</name>
      <anchorfile>classCLHEP_1_1NonRandomEngine.html</anchorfile>
      <anchor>99a9a99aeb352fb9059a79d555cde711</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNextRandom</name>
      <anchorfile>classCLHEP_1_1NonRandomEngine.html</anchorfile>
      <anchor>1922b958548e9cf3befb68d96c703ee5</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomSequence</name>
      <anchorfile>classCLHEP_1_1NonRandomEngine.html</anchorfile>
      <anchor>1527859bc1950826047867674aef59bb</anchor>
      <arglist>(double *s, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomInterval</name>
      <anchorfile>classCLHEP_1_1NonRandomEngine.html</anchorfile>
      <anchor>bc457fdbf07a95b6988f93fcd708b2fa</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>flat</name>
      <anchorfile>classCLHEP_1_1NonRandomEngine.html</anchorfile>
      <anchor>54a9aad7b1fea1d599e90ea0bb164fe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flatArray</name>
      <anchorfile>classCLHEP_1_1NonRandomEngine.html</anchorfile>
      <anchor>ead86ef025a1c9b534b462c8b81003d3</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1NonRandomEngine.html</anchorfile>
      <anchor>70650dfcb5d7d3f5974b363ab247d991</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1NonRandomEngine.html</anchorfile>
      <anchor>5bf54becef0d771d6766d0ce8c084afe</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1NonRandomEngine.html</anchorfile>
      <anchor>1f9bea368e51a77cc902c6ce80eeb548</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1NonRandomEngine.html</anchorfile>
      <anchor>6575943a403374b5a6d7e6ee4e45d8c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned long &gt;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1NonRandomEngine.html</anchorfile>
      <anchor>a5b4e88bd5d93ff887c33cf00e8ff566</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1NonRandomEngine.html</anchorfile>
      <anchor>c13f8722225cef5fd6c41a50b2d60b70</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1NonRandomEngine.html</anchorfile>
      <anchor>27bf1189403b4cf929258103ffab7edb</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>beginTag</name>
      <anchorfile>classCLHEP_1_1NonRandomEngine.html</anchorfile>
      <anchor>31174ade905441f642584117cf72c78a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>engineName</name>
      <anchorfile>classCLHEP_1_1NonRandomEngine.html</anchorfile>
      <anchor>e6584349c047c4ac53fee830fd0fd293</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::RandBinomial</name>
    <filename>classCLHEP_1_1RandBinomial.html</filename>
    <base>CLHEP::HepRandom</base>
    <member kind="function">
      <type></type>
      <name>RandBinomial</name>
      <anchorfile>classCLHEP_1_1RandBinomial.html</anchorfile>
      <anchor>4d9beeb7e0647c84abb0e07bb5eedf46</anchor>
      <arglist>(HepRandomEngine &amp;anEngine, long n=1, double p=0.5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandBinomial</name>
      <anchorfile>classCLHEP_1_1RandBinomial.html</anchorfile>
      <anchor>27e7279a7ae2da1c4e2479d81b49e274</anchor>
      <arglist>(HepRandomEngine *anEngine, long n=1, double p=0.5)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RandBinomial</name>
      <anchorfile>classCLHEP_1_1RandBinomial.html</anchorfile>
      <anchor>027050ce986e40dfc894691bf27445a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandBinomial.html</anchorfile>
      <anchor>8edb60da2f7e1a2ece1dd610478f217a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandBinomial.html</anchorfile>
      <anchor>ecc4550a7d4022bc581db12f718e5a9f</anchor>
      <arglist>(long n, double p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandBinomial.html</anchorfile>
      <anchor>411c4bc4e86942c6e71fc9cb1bbe8ba6</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandBinomial.html</anchorfile>
      <anchor>cdcfe84a5f7c7fd930a42c43b52ecc49</anchor>
      <arglist>(const int size, double *vect, long n, double p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandBinomial.html</anchorfile>
      <anchor>f434e663b77e2c05ab4cb1bbccdb2475</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandBinomial.html</anchorfile>
      <anchor>c0505e1a260c90dc276f0946c3d8b73d</anchor>
      <arglist>(long n, double p)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RandBinomial.html</anchorfile>
      <anchor>ec41da1c28fb67d4bc896038c15c2633</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RandBinomial.html</anchorfile>
      <anchor>43953bb13196f8c86686e64fe9d7b853</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1RandBinomial.html</anchorfile>
      <anchor>d308d47c5367cbd8cb1e88e76e3c6df5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRandomEngine &amp;</type>
      <name>engine</name>
      <anchorfile>classCLHEP_1_1RandBinomial.html</anchorfile>
      <anchor>9f468f7ea147a49056b4eb0461476623</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandBinomial.html</anchorfile>
      <anchor>90ed10382fb6df0cab4d3d0aa52e86f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandBinomial.html</anchorfile>
      <anchor>d92d399bd766b37c644e14213c4f5d4b</anchor>
      <arglist>(long n, double p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandBinomial.html</anchorfile>
      <anchor>773b09c4f8a9dcab478ccff27a1cce8a</anchor>
      <arglist>(const int size, double *vect, long n=1, double p=0.5)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandBinomial.html</anchorfile>
      <anchor>bf7892f4e035f17f235906f5c341dd4d</anchor>
      <arglist>(HepRandomEngine *anEngine)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandBinomial.html</anchorfile>
      <anchor>389230c605c9fc6b89cbab45174874f7</anchor>
      <arglist>(HepRandomEngine *anEngine, long n, double p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandBinomial.html</anchorfile>
      <anchor>cd39d225f7ab3490009f8a1fb8b9163d</anchor>
      <arglist>(HepRandomEngine *anEngine, const int size, double *vect, long n=1, double p=0.5)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>distributionName</name>
      <anchorfile>classCLHEP_1_1RandBinomial.html</anchorfile>
      <anchor>029895ca40cb0267ed7bab60160bd438</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::RandBit</name>
    <filename>classCLHEP_1_1RandBit.html</filename>
    <base>CLHEP::RandFlat</base>
    <member kind="function">
      <type></type>
      <name>RandBit</name>
      <anchorfile>classCLHEP_1_1RandBit.html</anchorfile>
      <anchor>881f07f5fcf988a345226fa87c0c1f75</anchor>
      <arglist>(HepRandomEngine &amp;anEngine)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandBit</name>
      <anchorfile>classCLHEP_1_1RandBit.html</anchorfile>
      <anchor>0004b1d99d12fae23e6662783db0b1ec</anchor>
      <arglist>(HepRandomEngine &amp;anEngine, double width)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandBit</name>
      <anchorfile>classCLHEP_1_1RandBit.html</anchorfile>
      <anchor>009638bebddfffd89c2a4fdf433eba47</anchor>
      <arglist>(HepRandomEngine &amp;anEngine, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandBit</name>
      <anchorfile>classCLHEP_1_1RandBit.html</anchorfile>
      <anchor>00ef2ef06387d91d68fa8b9321380570</anchor>
      <arglist>(HepRandomEngine *anEngine)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandBit</name>
      <anchorfile>classCLHEP_1_1RandBit.html</anchorfile>
      <anchor>bfb1a49ac562688a574c049f2ded1abb</anchor>
      <arglist>(HepRandomEngine *anEngine, double width)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandBit</name>
      <anchorfile>classCLHEP_1_1RandBit.html</anchorfile>
      <anchor>e1133f536694e99f8aa6c1cca8694744</anchor>
      <arglist>(HepRandomEngine *anEngine, double a, double b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RandBit</name>
      <anchorfile>classCLHEP_1_1RandBit.html</anchorfile>
      <anchor>f3d18a9f9875cd2de1763bb7086d4dc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fireBit</name>
      <anchorfile>classCLHEP_1_1RandBit.html</anchorfile>
      <anchor>91bf4c311c19180e86b152455f61136d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RandBit.html</anchorfile>
      <anchor>f667592defef857d8e72a588f889e517</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RandBit.html</anchorfile>
      <anchor>44f2cd6541629ab7e48ee3171b0877c2</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1RandBit.html</anchorfile>
      <anchor>7c6966aa946248bc480b7f190177979e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>shootBit</name>
      <anchorfile>classCLHEP_1_1RandBit.html</anchorfile>
      <anchor>66adcb6f8b99426258dc9371d983b6ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>shootBit</name>
      <anchorfile>classCLHEP_1_1RandBit.html</anchorfile>
      <anchor>cfa6526e6687743a611ed4567fca6ee1</anchor>
      <arglist>(HepRandomEngine *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>distributionName</name>
      <anchorfile>classCLHEP_1_1RandBit.html</anchorfile>
      <anchor>b703d71fe4aef04e0c5722a51a33bc56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>saveFullState</name>
      <anchorfile>classCLHEP_1_1RandBit.html</anchorfile>
      <anchor>aef8e17f1ba9ec50aabc4317e0b64acf</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::istream &amp;</type>
      <name>restoreFullState</name>
      <anchorfile>classCLHEP_1_1RandBit.html</anchorfile>
      <anchor>e3bddf328ef07fd69ccd41be06be6cf4</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>saveDistState</name>
      <anchorfile>classCLHEP_1_1RandBit.html</anchorfile>
      <anchor>18f6d6b001cffdee8a39fccb3d74f03e</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::istream &amp;</type>
      <name>restoreDistState</name>
      <anchorfile>classCLHEP_1_1RandBit.html</anchorfile>
      <anchor>fdb2c057d94493fde6378b67af10b4bd</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::RandBreitWigner</name>
    <filename>classCLHEP_1_1RandBreitWigner.html</filename>
    <base>CLHEP::HepRandom</base>
    <member kind="function">
      <type></type>
      <name>RandBreitWigner</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>b363a264de08bf0a1fdb35ad317ab518</anchor>
      <arglist>(HepRandomEngine &amp;anEngine, double a=1.0, double b=0.2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandBreitWigner</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>7c4b2d52a92541cade9b549197ef7191</anchor>
      <arglist>(HepRandomEngine *anEngine, double a=1.0, double b=0.2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RandBreitWigner</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>6e9c52e858ef5de2dce17346ae7f9dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>134a3c61429a7399e5644fa30e095049</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>89eaf6428312620d51b6b21d23e1b2d9</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>073a227c89fe27bd1f8d3d4968b8f556</anchor>
      <arglist>(double a, double b, double c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fireM2</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>7753f65cc35c65a68131d9e5c9b1b501</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fireM2</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>d8d8b1b578bf708f98d305a12de229e1</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fireM2</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>3cb98fb8e47135fbba2a80ce2beb787e</anchor>
      <arglist>(double a, double b, double c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>d73bb4fd5cd383708f1c902765b65b2b</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>80ff248e50aa7111aca198271e39d5e6</anchor>
      <arglist>(const int size, double *vect, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>fe5eecd5f8c6e7d7a92cdfc3b3656090</anchor>
      <arglist>(const int size, double *vect, double a, double b, double c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>0451416f95d4b982b0b1babd45964bee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>0295e8eb58c30548a0de7d13c016ab33</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>732b45b8ec21a9cccb42153b90037652</anchor>
      <arglist>(double a, double b, double c)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>1f8fc5fe6867659b17065b14ac48b228</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>7a727d73661c5ed78cc8ebe2bebc19fb</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>8c9f9f181812ba10785bbc0dcc8b1828</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRandomEngine &amp;</type>
      <name>engine</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>97f0440aa6aacb025e2c4c3d303ae789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>351cc565f3fa3a22552410850a28564a</anchor>
      <arglist>(double a=1.0, double b=0.2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>b3879ea0ee3d0b63756ba8aff5c2a220</anchor>
      <arglist>(double a, double b, double c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shootM2</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>527c767a787d19791d665d3d5191507e</anchor>
      <arglist>(double a=1.0, double b=0.2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shootM2</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>6872ddb544b32760c56bff76ae354d04</anchor>
      <arglist>(double a, double b, double c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>09c4d9ca8ac89db6bf838c1507f17741</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>81c1b90c99113d3e6decf34a6d9619b2</anchor>
      <arglist>(const int size, double *vect, double a, double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>ad259d8f7a81c93dbb6923df6bf225d3</anchor>
      <arglist>(const int size, double *vect, double a, double b, double c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>7e5ec12ea8599f4431867fd19d56ed0c</anchor>
      <arglist>(HepRandomEngine *anEngine, double a=1.0, double b=0.2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>3c6fd93812d79f08c0d8101497ab753a</anchor>
      <arglist>(HepRandomEngine *anEngine, double a, double b, double c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shootM2</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>1ab07fcaa58085832b118f1741b38fb5</anchor>
      <arglist>(HepRandomEngine *anEngine, double a=1.0, double b=0.2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shootM2</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>26c838ecb1f45a076ca687e68a6a0285</anchor>
      <arglist>(HepRandomEngine *anEngine, double a, double b, double c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>d31c5387234a0d307fbc88b521b9d9b4</anchor>
      <arglist>(HepRandomEngine *anEngine, const int size, double *vect)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>a3ce4d31bdd5b7665ccf443bbb536842</anchor>
      <arglist>(HepRandomEngine *anEngine, const int size, double *vect, double a, double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>15f5bc3c0df9eace88985bc9e8f289b4</anchor>
      <arglist>(HepRandomEngine *anEngine, const int size, double *vect, double a, double b, double c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>distributionName</name>
      <anchorfile>classCLHEP_1_1RandBreitWigner.html</anchorfile>
      <anchor>a8a95013db0fc92d58f8400caf212908</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::RandChiSquare</name>
    <filename>classCLHEP_1_1RandChiSquare.html</filename>
    <base>CLHEP::HepRandom</base>
    <member kind="function">
      <type></type>
      <name>RandChiSquare</name>
      <anchorfile>classCLHEP_1_1RandChiSquare.html</anchorfile>
      <anchor>db3fb939ce8588f6e77b1f7aaa2a8425</anchor>
      <arglist>(HepRandomEngine &amp;anEngine, double a=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandChiSquare</name>
      <anchorfile>classCLHEP_1_1RandChiSquare.html</anchorfile>
      <anchor>fbbb62dcfe2b03962daa983873236294</anchor>
      <arglist>(HepRandomEngine *anEngine, double a=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RandChiSquare</name>
      <anchorfile>classCLHEP_1_1RandChiSquare.html</anchorfile>
      <anchor>b1fbd90ca16617af231142f5355c04b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandChiSquare.html</anchorfile>
      <anchor>11c183df7d37df984cc04b92ab696478</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandChiSquare.html</anchorfile>
      <anchor>34f793ab31fd632895827daadacee021</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandChiSquare.html</anchorfile>
      <anchor>1c3e06ea05fd36c752a3c93fe719b426</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandChiSquare.html</anchorfile>
      <anchor>58a2906e0ccfba5d4d6d3e26f00870c8</anchor>
      <arglist>(const int size, double *vect, double a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandChiSquare.html</anchorfile>
      <anchor>633f963254675a434aa72f7b5653fbe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandChiSquare.html</anchorfile>
      <anchor>6eeea7b5340588b6914f56a74edcbbad</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RandChiSquare.html</anchorfile>
      <anchor>bc0f36cd520ba3334f1b248fade62c3e</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RandChiSquare.html</anchorfile>
      <anchor>61411828ea228fff5f96ad97fd09650f</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1RandChiSquare.html</anchorfile>
      <anchor>add04519cb9981bb84610fb34ff080e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRandomEngine &amp;</type>
      <name>engine</name>
      <anchorfile>classCLHEP_1_1RandChiSquare.html</anchorfile>
      <anchor>ff9e8d53dae9faa498b0b5752f077511</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandChiSquare.html</anchorfile>
      <anchor>f0746fd2f6327686e5a15b8109a90b1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandChiSquare.html</anchorfile>
      <anchor>dc35b5e69738540de9620ad2205c2f3c</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandChiSquare.html</anchorfile>
      <anchor>9d92d9071da533f7a137bd5dad2ca9b4</anchor>
      <arglist>(const int size, double *vect, double a=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandChiSquare.html</anchorfile>
      <anchor>16908458efbaf21e1fe780c7268aeb63</anchor>
      <arglist>(HepRandomEngine *anEngine)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandChiSquare.html</anchorfile>
      <anchor>314d9aca069c24cead721664d77e706b</anchor>
      <arglist>(HepRandomEngine *anEngine, double a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandChiSquare.html</anchorfile>
      <anchor>5f04184be201c6149471ae5993ecaab8</anchor>
      <arglist>(HepRandomEngine *anEngine, const int size, double *vect, double a=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>distributionName</name>
      <anchorfile>classCLHEP_1_1RandChiSquare.html</anchorfile>
      <anchor>b412637909569f179aa448d17c415d03</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::RandEngine</name>
    <filename>classCLHEP_1_1RandEngine.html</filename>
    <base>CLHEP::HepRandomEngine</base>
    <member kind="function">
      <type></type>
      <name>RandEngine</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>1c2b839f7e1a3d395a9226031818020d</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandEngine</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>728a195acecd6fb081ecfa73465c6416</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandEngine</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>4e430b099411ed02ed8bcf1440e77eb6</anchor>
      <arglist>(long seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandEngine</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>120956d8afbc5c620c342f3329007ca5</anchor>
      <arglist>(int rowIndex, int colIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RandEngine</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>b0fe72446ff5d6e157016e8009ed6a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>flat</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>267cfd4ae8c3cd7955f03906a271d54f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flatArray</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>1628f202ffa7656b8322c932792e8fbd</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>847b54f6f7e70ab0f4ed307a4b153623</anchor>
      <arglist>(long seed, int dum=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeeds</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>ffe7438e51aebc17fdced18e33ecfd0d</anchor>
      <arglist>(const long *seeds, int dum=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveStatus</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>9c913203e83dda8065b5caf2572e49eb</anchor>
      <arglist>(const char filename[]=&quot;Rand.conf&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreStatus</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>a6458c7edd86ddf1ff2cab23aa0ccb83</anchor>
      <arglist>(const char filename[]=&quot;Rand.conf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showStatus</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>a56a19e6f3c948a8041eb732b2094b61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>ab7ace45742b3fe0322c3deac4661105</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>52573c9b903ccc2219b3f6d9be741a3f</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>ab7a9e9e7d28fbf87e470085c58f3b30</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>300c73c55659b1087907325958b233fc</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>b96c222877617323fc35d10d0f67482c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned long &gt;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>8765ffca43b74019a71f1fa990e46efb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>d05ca8bf566d08084b49806b900753a6</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>0daf50d20c9a566b49be140d9c274931</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>beginTag</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>e6e11f414a1223f8b36792a1e71c751e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>engineName</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>0113099cbde93a9f3caf05c785f72637</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>VECTOR_STATE_SIZE</name>
      <anchorfile>classCLHEP_1_1RandEngine.html</anchorfile>
      <anchor>e46f6d17fa609c4b212b2eabffdd9f08</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::RandExponential</name>
    <filename>classCLHEP_1_1RandExponential.html</filename>
    <base>CLHEP::HepRandom</base>
    <member kind="function">
      <type></type>
      <name>RandExponential</name>
      <anchorfile>classCLHEP_1_1RandExponential.html</anchorfile>
      <anchor>435ad0480e2a6bd06367cc13a4cd9b6b</anchor>
      <arglist>(HepRandomEngine &amp;anEngine, double mean=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandExponential</name>
      <anchorfile>classCLHEP_1_1RandExponential.html</anchorfile>
      <anchor>a0fae6001192660384de740340385c06</anchor>
      <arglist>(HepRandomEngine *anEngine, double mean=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RandExponential</name>
      <anchorfile>classCLHEP_1_1RandExponential.html</anchorfile>
      <anchor>1708d767ddc5a8628a8b860db80f04bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandExponential.html</anchorfile>
      <anchor>82b63707f3b7b0a10a9176c4f4fcfe92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandExponential.html</anchorfile>
      <anchor>32962ca9988afff96a4225c41a844798</anchor>
      <arglist>(double mean)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandExponential.html</anchorfile>
      <anchor>b7b2c208cf2639af778238d2d862e6a3</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandExponential.html</anchorfile>
      <anchor>37b87f615976707aafe3b6fdcaea105c</anchor>
      <arglist>(const int size, double *vect, double mean)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandExponential.html</anchorfile>
      <anchor>3d6e6967eaa4a9c323becc53d3037349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandExponential.html</anchorfile>
      <anchor>12f275e0bd54eb02d3ec2253740c96a4</anchor>
      <arglist>(double mean)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RandExponential.html</anchorfile>
      <anchor>427a42803e3576e96be549dd9ce03ae9</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RandExponential.html</anchorfile>
      <anchor>8cd089c73477a21546dab1e24e606afe</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1RandExponential.html</anchorfile>
      <anchor>c5d32480762bed2346416b7212d297ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRandomEngine &amp;</type>
      <name>engine</name>
      <anchorfile>classCLHEP_1_1RandExponential.html</anchorfile>
      <anchor>816e9851061b8c49116315af54945534</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandExponential.html</anchorfile>
      <anchor>a30ad72f5667d8da4aac9547a644cee1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandExponential.html</anchorfile>
      <anchor>27be0f7f4ed8f207f2581331f42983b2</anchor>
      <arglist>(double mean)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandExponential.html</anchorfile>
      <anchor>cf98df4a83753b78f8abb57202994c92</anchor>
      <arglist>(const int size, double *vect, double mean=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandExponential.html</anchorfile>
      <anchor>445b4e83a82081b0b55d675c8a3a41aa</anchor>
      <arglist>(HepRandomEngine *anEngine)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandExponential.html</anchorfile>
      <anchor>83a8f4f9f95748542ffd4515b509082d</anchor>
      <arglist>(HepRandomEngine *anEngine, double mean)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandExponential.html</anchorfile>
      <anchor>6e3dfe49a3040b73a5131d901bba0c21</anchor>
      <arglist>(HepRandomEngine *anEngine, const int size, double *vect, double mean=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>distributionName</name>
      <anchorfile>classCLHEP_1_1RandExponential.html</anchorfile>
      <anchor>c0d744d732ba4c4be8b3ef3083a69fe1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::RandFlat</name>
    <filename>classCLHEP_1_1RandFlat.html</filename>
    <base>CLHEP::HepRandom</base>
    <member kind="function">
      <type></type>
      <name>RandFlat</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>439d53962292bae23d06e1ea9cde1fa5</anchor>
      <arglist>(HepRandomEngine &amp;anEngine)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandFlat</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>c714c67851b3f4216ed4a790a9948a30</anchor>
      <arglist>(HepRandomEngine &amp;anEngine, double width)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandFlat</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>44d03b24e3fbc80f6e73fff40d3acc4e</anchor>
      <arglist>(HepRandomEngine &amp;anEngine, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandFlat</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>1de8b819da92f600d9c3773eb35538d8</anchor>
      <arglist>(HepRandomEngine *anEngine)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandFlat</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>44728247cb7cbd2eb88f87b1818b0408</anchor>
      <arglist>(HepRandomEngine *anEngine, double width)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandFlat</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>d4ae6a213b1068567f3d54708ed05f0b</anchor>
      <arglist>(HepRandomEngine *anEngine, double a, double b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RandFlat</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>e1b8bf7ec21d7a274f77f18e319e5f81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>5b14b7c7b4702e7ffa33d68622bfa6ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>06803b49e598219480efb83e482994d8</anchor>
      <arglist>(double width)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>26e01c07c60836d65dfe6d20e0ee4207</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>fireInt</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>85c7c033a1935a956c9883379ba245af</anchor>
      <arglist>(long n)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>fireInt</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>43c3b7347c597cf1a168b7eb3df84c06</anchor>
      <arglist>(long m, long n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fireBit</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>3a803becf53ad901e3f9f7f9ecdcaefc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>737b9ff0198554f4e462841a891609af</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>c5627a170cda45bbdd47d8300cbca583</anchor>
      <arglist>(const int size, double *vect, double lx, double dx)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>05382995ab49dd63966f96613a42fcf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>678148afa422e5ee7a22d17794952458</anchor>
      <arglist>(double width)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>913a198e70e5383c452d4c70e786d5b5</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>8b26ecb8e698da4780c893bb47f1cfbf</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>f4a83ed2ceba339c8c1034a1ec04b0fa</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>421ca5d891d3d9e7d44db90ed50eb1c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRandomEngine &amp;</type>
      <name>engine</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>f1cce5616a239666e7ea927aed5decef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>0377c633cb64658c072906663a26295c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>7712dcdc3b723a1827be76419fbd07d6</anchor>
      <arglist>(double width)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>dfbac239623e6b4ac08d1fb8ed9b7a07</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>shootInt</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>bc09c0da062fd46e0dfaaac0ae055162</anchor>
      <arglist>(long n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>shootInt</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>a42e1a73b7acb6416a0bdcd1fa5431b8</anchor>
      <arglist>(long m, long n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>shootBit</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>67eda573e087bc683f88caade8b4fd82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>1ae4d0a08cc9f992b8bb5aa4db188f00</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>8d0c3754078bd10e92404e2aff5cc274</anchor>
      <arglist>(const int size, double *vect, double lx, double dx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>e9dadaeffc8378d45183ccc06d02b45b</anchor>
      <arglist>(HepRandomEngine *anEngine)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>718241d1320662bfe1e70199dfa1a3ab</anchor>
      <arglist>(HepRandomEngine *anEngine, double width)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>219f938485644bf60fe1be421e23c019</anchor>
      <arglist>(HepRandomEngine *anEngine, double a, double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>shootInt</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>a6af911769a5bff200eeca9a8c42a5f2</anchor>
      <arglist>(HepRandomEngine *anEngine, long n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>shootInt</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>0ca3934d5fb12f581e31f69136232c99</anchor>
      <arglist>(HepRandomEngine *anEngine, long m, long n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>shootBit</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>4cca1756eea65ca231be866250c34133</anchor>
      <arglist>(HepRandomEngine *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>af700a42fb6573bec721a8d00221ec89</anchor>
      <arglist>(HepRandomEngine *anEngine, const int size, double *vect)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>707ed186f01b5ee88fd82be93b1afa9e</anchor>
      <arglist>(HepRandomEngine *anEngine, const int size, double *vect, double lx, double dx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>distributionName</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>9e6669096148a62f0b82cfcce6f5bf68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>saveEngineStatus</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>a91a36f19578001bc562afc8e2d65a3c</anchor>
      <arglist>(const char filename[]=&quot;Config.conf&quot;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>restoreEngineStatus</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>927881fec8b10b8811c9a717c58afdfb</anchor>
      <arglist>(const char filename[]=&quot;Config.conf&quot;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>saveFullState</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>9b286742cd43681bba1500916c64ddc2</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::istream &amp;</type>
      <name>restoreFullState</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>22e1cf4f99fe412a4c4920695a32cbb1</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>saveDistState</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>3565eee207e485e0ddcb31532cef6eb0</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::istream &amp;</type>
      <name>restoreDistState</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>11115c88bd08160a0e7fabba728b17cb</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RandFlat</name>
      <anchorfile>classCLHEP_1_1RandFlat.html</anchorfile>
      <anchor>2102fef6f8263b2135451e6436365f59</anchor>
      <arglist>(const RandFlat &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::RandGamma</name>
    <filename>classCLHEP_1_1RandGamma.html</filename>
    <base>CLHEP::HepRandom</base>
    <member kind="function">
      <type></type>
      <name>RandGamma</name>
      <anchorfile>classCLHEP_1_1RandGamma.html</anchorfile>
      <anchor>0723fc86949a8d9216fceed34030b962</anchor>
      <arglist>(HepRandomEngine &amp;anEngine, double k=1.0, double lambda=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandGamma</name>
      <anchorfile>classCLHEP_1_1RandGamma.html</anchorfile>
      <anchor>46262b70ce67e31b271ddb70026ccacb</anchor>
      <arglist>(HepRandomEngine *anEngine, double k=1.0, double lambda=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RandGamma</name>
      <anchorfile>classCLHEP_1_1RandGamma.html</anchorfile>
      <anchor>dea646dc2c3dad1091770b2c7aaf18d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandGamma.html</anchorfile>
      <anchor>a07e06a02f01b471f6b51acd42130a64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandGamma.html</anchorfile>
      <anchor>bba2607f484e891cf9e73b5c6178feb7</anchor>
      <arglist>(double k, double lambda)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandGamma.html</anchorfile>
      <anchor>c9a481e98d9fdc62b89a620807acae1e</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandGamma.html</anchorfile>
      <anchor>a4714a842c7c78539c7419f5da57c6c5</anchor>
      <arglist>(const int size, double *vect, double k, double lambda)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandGamma.html</anchorfile>
      <anchor>56837555566caee3b60cbbe48b3a36c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandGamma.html</anchorfile>
      <anchor>2c257833f945e23a403f9c4d7c31c885</anchor>
      <arglist>(double k, double lambda)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RandGamma.html</anchorfile>
      <anchor>6ec9ecf2710b5c4f9cb6661a0375f476</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RandGamma.html</anchorfile>
      <anchor>3957fdf8f68e6fd53134687e2dcc6ce7</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1RandGamma.html</anchorfile>
      <anchor>78cffc3ede694af2c61ca415c212e826</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRandomEngine &amp;</type>
      <name>engine</name>
      <anchorfile>classCLHEP_1_1RandGamma.html</anchorfile>
      <anchor>1806d79871c71fb322cefc8c2de55037</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandGamma.html</anchorfile>
      <anchor>e5903f0e42b0bb31ecc3ee4b045ed04f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandGamma.html</anchorfile>
      <anchor>4073fe6996a43175db93c2114528695d</anchor>
      <arglist>(double k, double lambda)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandGamma.html</anchorfile>
      <anchor>fbecb9cd108b592ad24a69dfa157df84</anchor>
      <arglist>(const int size, double *vect, double k=1.0, double lambda=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandGamma.html</anchorfile>
      <anchor>e4bfe3ba8e8a6e0deeb6a222cbbe3c77</anchor>
      <arglist>(HepRandomEngine *anEngine)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandGamma.html</anchorfile>
      <anchor>6bae4d3f47a71264c535c9762186ff9b</anchor>
      <arglist>(HepRandomEngine *anEngine, double k, double lambda)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandGamma.html</anchorfile>
      <anchor>eb537fd30fa303af24a91042d32404fc</anchor>
      <arglist>(HepRandomEngine *anEngine, const int size, double *vect, double k=1.0, double lambda=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>distributionName</name>
      <anchorfile>classCLHEP_1_1RandGamma.html</anchorfile>
      <anchor>77ccbf6baaa9194a2b85fec5cbe4ef8a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::RandGauss</name>
    <filename>classCLHEP_1_1RandGauss.html</filename>
    <base>CLHEP::HepRandom</base>
    <member kind="function">
      <type></type>
      <name>RandGauss</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>634702ed332d76c34cc82bd6d0c9d374</anchor>
      <arglist>(HepRandomEngine &amp;anEngine, double mean=0.0, double stdDev=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandGauss</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>513636f7990562c999b4b78df8e14793</anchor>
      <arglist>(HepRandomEngine *anEngine, double mean=0.0, double stdDev=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RandGauss</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>9f9c72d4c5889b0eff3f8da4683134e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>796cb4644934e5ddf21c15cc13f27ee7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>694de2f72bb8cc7294f481167bb4766c</anchor>
      <arglist>(double mean, double stdDev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>530ec43eb4829dc6eca2b20e5467099e</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>8c91fb057bda9cb73b444217a30611fa</anchor>
      <arglist>(const int size, double *vect, double mean, double stdDev)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>7c47c18263c2bc5b1c429caafd619e54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>e8559cea6d39754595f883aa53c4c611</anchor>
      <arglist>(double mean, double stdDev)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>da5a541cd65a4d1b6c551b22203f7de3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRandomEngine &amp;</type>
      <name>engine</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>e57f92ac5d0f6951843dcabe23aa40d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>7378750a83e50d2cce96a1df1807f76d</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>a56f444a45d3daa26e23aaf9b6acdbf4</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getF</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>2acc5cc7849c6a91da0c1e39eb206411</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setF</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>75dc39063bb2f6c7b09ae3afc77336d7</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>828d4db3b68b161dba86ce2ab0c7c492</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>2bb84fd57c6e91e3871108a919879245</anchor>
      <arglist>(double mean, double stdDev)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>2ba4d018cf0de761b5a28d1a405c71cc</anchor>
      <arglist>(const int size, double *vect, double mean=0.0, double stdDev=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>68aa863c74e1e52fbb7b3ca8f5842001</anchor>
      <arglist>(HepRandomEngine *anEngine)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>e79aadbf4cf4d0603b6eb3ebb8b616a8</anchor>
      <arglist>(HepRandomEngine *anEngine, double mean, double stdDev)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>6a89ce10464aa05af5fa90d238cd333c</anchor>
      <arglist>(HepRandomEngine *anEngine, const int size, double *vect, double mean=0.0, double stdDev=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>distributionName</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>c73b7123b040107f5c7419fa28d9316d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getFlag</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>ce30a2d2b3785790dc45d73c7a1da1d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setFlag</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>e36335645d9589c4178370db6959925a</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>saveEngineStatus</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>83b3734e7a367bf7f1b1b329fbdb4522</anchor>
      <arglist>(const char filename[]=&quot;Config.conf&quot;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>restoreEngineStatus</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>cb2825dd6f41600b3d77d77f5727325d</anchor>
      <arglist>(const char filename[]=&quot;Config.conf&quot;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>saveFullState</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>8a1f61a7bace79f3ba0f08ffcebed166</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::istream &amp;</type>
      <name>restoreFullState</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>6e524f7f1c3386f64e1330efa68a32ec</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>saveDistState</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>7529137ca4b40c43ea7794d6307dc4f2</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::istream &amp;</type>
      <name>restoreDistState</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>be56c4222d968f088dda158aab79f453</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RandGauss</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>45a453e31e4b0345f3f2142ca33be9f3</anchor>
      <arglist>(const RandGauss &amp;d)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>normal</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>a6d692284b8aa8229d1c0f07335d13c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static double</type>
      <name>getVal</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>c7455ca6dc93b13d54fb24b230a4fca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>setVal</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>d976b45dcbc5561f4196d0031e84ebef</anchor>
      <arglist>(double nextVal)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>defaultMean</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>ae536519f94f94da3632661cf7ff1d26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>defaultStdDev</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>3ee328528efb5e8bb357a025158498e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HepRandomEngine *</type>
      <name>localEngine</name>
      <anchorfile>classCLHEP_1_1RandGauss.html</anchorfile>
      <anchor>b6c49e18b7a041ca4a61d821201b0544</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::RandGaussQ</name>
    <filename>classCLHEP_1_1RandGaussQ.html</filename>
    <base>CLHEP::RandGauss</base>
    <member kind="function">
      <type></type>
      <name>RandGaussQ</name>
      <anchorfile>classCLHEP_1_1RandGaussQ.html</anchorfile>
      <anchor>0cf6d2fe5bdb7678658017f711554bc3</anchor>
      <arglist>(HepRandomEngine &amp;anEngine, double mean=0.0, double stdDev=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandGaussQ</name>
      <anchorfile>classCLHEP_1_1RandGaussQ.html</anchorfile>
      <anchor>ec291f40bfc8aee0c3481dd862d436f8</anchor>
      <arglist>(HepRandomEngine *anEngine, double mean=0.0, double stdDev=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RandGaussQ</name>
      <anchorfile>classCLHEP_1_1RandGaussQ.html</anchorfile>
      <anchor>564b5a95f0cbaac23376b0edd69cac23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandGaussQ.html</anchorfile>
      <anchor>aaded7241339ae08a67f1ed9359c4511</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandGaussQ.html</anchorfile>
      <anchor>be05c3782df4b2e3c79c0c6f798d42fb</anchor>
      <arglist>(double mean, double stdDev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandGaussQ.html</anchorfile>
      <anchor>caf0934240db53c22f29c574219a7909</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandGaussQ.html</anchorfile>
      <anchor>aa5eb0fd742ffd00da8bf59a64b2cfc6</anchor>
      <arglist>(const int size, double *vect, double mean, double stdDev)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandGaussQ.html</anchorfile>
      <anchor>2bfc24a19fabfb96f52aa2bb076c8701</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandGaussQ.html</anchorfile>
      <anchor>2ce61238e0502792040fae55b0056b90</anchor>
      <arglist>(double mean, double stdDev)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RandGaussQ.html</anchorfile>
      <anchor>8f12afffe936be68787041b72974c5de</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RandGaussQ.html</anchorfile>
      <anchor>3cfcc9c180c9eb9ccef0b83906a1b79e</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1RandGaussQ.html</anchorfile>
      <anchor>ee10c56a4890b02bb4d8b740abd3b16a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRandomEngine &amp;</type>
      <name>engine</name>
      <anchorfile>classCLHEP_1_1RandGaussQ.html</anchorfile>
      <anchor>a445d0caa775ffb8e71a940162e36ca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandGaussQ.html</anchorfile>
      <anchor>2ef845266a4b8a0ba2109bb7ddda044f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandGaussQ.html</anchorfile>
      <anchor>8acd6e7955e1e623bf91d86d0935c298</anchor>
      <arglist>(double mean, double stdDev)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandGaussQ.html</anchorfile>
      <anchor>635c49887db116ee05884f044a8587de</anchor>
      <arglist>(const int size, double *vect, double mean=0.0, double stdDev=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandGaussQ.html</anchorfile>
      <anchor>98b03a625dbf66513dfa24039b558742</anchor>
      <arglist>(HepRandomEngine *anotherEngine)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandGaussQ.html</anchorfile>
      <anchor>1c5c9ea1e7074aedbabaf69c39082ad9</anchor>
      <arglist>(HepRandomEngine *anotherEngine, double mean, double stdDev)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandGaussQ.html</anchorfile>
      <anchor>8a997953973b01bcba86b60e9003e17a</anchor>
      <arglist>(HepRandomEngine *anotherEngine, const int size, double *vect, double mean=0.0, double stdDev=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>distributionName</name>
      <anchorfile>classCLHEP_1_1RandGaussQ.html</anchorfile>
      <anchor>64bb22b6a7e90399d66f46503759014b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static double</type>
      <name>transformQuick</name>
      <anchorfile>classCLHEP_1_1RandGaussQ.html</anchorfile>
      <anchor>d0da45c2e21a7ea6fd5cb6f147d53bd1</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static double</type>
      <name>transformSmall</name>
      <anchorfile>classCLHEP_1_1RandGaussQ.html</anchorfile>
      <anchor>e2137bbe00ec37507c51cb159771a682</anchor>
      <arglist>(double r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::RandGaussT</name>
    <filename>classCLHEP_1_1RandGaussT.html</filename>
    <base>CLHEP::RandGauss</base>
    <member kind="function">
      <type></type>
      <name>RandGaussT</name>
      <anchorfile>classCLHEP_1_1RandGaussT.html</anchorfile>
      <anchor>cbc57eeaa5b23648f1ce5b5fa5ed79ca</anchor>
      <arglist>(HepRandomEngine &amp;anEngine, double mean=0.0, double stdDev=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandGaussT</name>
      <anchorfile>classCLHEP_1_1RandGaussT.html</anchorfile>
      <anchor>4789546044b52b355575f72c093491b4</anchor>
      <arglist>(HepRandomEngine *anEngine, double mean=0.0, double stdDev=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RandGaussT</name>
      <anchorfile>classCLHEP_1_1RandGaussT.html</anchorfile>
      <anchor>763f7cd751c00bd484f0deb33978f5b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandGaussT.html</anchorfile>
      <anchor>361eea394cbd41f035e297383a3cb087</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandGaussT.html</anchorfile>
      <anchor>68fb70ec0a0202b2c0189451041b37c6</anchor>
      <arglist>(double mean, double stdDev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandGaussT.html</anchorfile>
      <anchor>bfbdad0161adeb4a37652538dd4cfff4</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandGaussT.html</anchorfile>
      <anchor>f65741b2791fa85949ad348d6bb3e9a1</anchor>
      <arglist>(const int size, double *vect, double mean, double stdDev)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandGaussT.html</anchorfile>
      <anchor>c281924278b02a36b9afc508c03034e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandGaussT.html</anchorfile>
      <anchor>f5a0f6fc51a70b8bfa8e13cbcb4aa507</anchor>
      <arglist>(double mean, double stdDev)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RandGaussT.html</anchorfile>
      <anchor>62a4353d03fea181eeabac60df4eeaf6</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RandGaussT.html</anchorfile>
      <anchor>99d7ec90460c35e5e5decc0407f6b504</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1RandGaussT.html</anchorfile>
      <anchor>b373acadc9a2d25824425fca4327aa3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRandomEngine &amp;</type>
      <name>engine</name>
      <anchorfile>classCLHEP_1_1RandGaussT.html</anchorfile>
      <anchor>598a439de0b4bd1b4a6964cbf53383b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandGaussT.html</anchorfile>
      <anchor>5ef055c9dffa40f09ebbc06c8ea0f642</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandGaussT.html</anchorfile>
      <anchor>009f0455bfe48c0571e8d8ea00f781ab</anchor>
      <arglist>(double mean, double stdDev)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandGaussT.html</anchorfile>
      <anchor>aef3abfac637833a155fefce3df2c067</anchor>
      <arglist>(const int size, double *vect, double mean=0.0, double stdDev=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandGaussT.html</anchorfile>
      <anchor>bc89eb421a6697a5701ecdcab5b57ee7</anchor>
      <arglist>(HepRandomEngine *anotherEngine)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandGaussT.html</anchorfile>
      <anchor>c15aba39f4dbdb554527c8e92165b030</anchor>
      <arglist>(HepRandomEngine *anotherEngine, double mean, double stdDev)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandGaussT.html</anchorfile>
      <anchor>bd1d1a81fe3d94816d1ea9d6f06a0921</anchor>
      <arglist>(HepRandomEngine *anotherEngine, const int size, double *vect, double mean=0.0, double stdDev=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>distributionName</name>
      <anchorfile>classCLHEP_1_1RandGaussT.html</anchorfile>
      <anchor>93a198d1b6241d06506b10934f5c4498</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::RandGeneral</name>
    <filename>classCLHEP_1_1RandGeneral.html</filename>
    <base>CLHEP::HepRandom</base>
    <member kind="function">
      <type></type>
      <name>RandGeneral</name>
      <anchorfile>classCLHEP_1_1RandGeneral.html</anchorfile>
      <anchor>2ef4e6c6ffd07e398798c11f01e6dd33</anchor>
      <arglist>(const double *aProbFunc, int theProbSize, int IntType=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandGeneral</name>
      <anchorfile>classCLHEP_1_1RandGeneral.html</anchorfile>
      <anchor>dc00e0db441bcbfa0517ab8f828c447f</anchor>
      <arglist>(HepRandomEngine &amp;anEngine, const double *aProbFunc, int theProbSize, int IntType=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandGeneral</name>
      <anchorfile>classCLHEP_1_1RandGeneral.html</anchorfile>
      <anchor>b17d299a030fe769910af2fb745cb628</anchor>
      <arglist>(HepRandomEngine *anEngine, const double *aProbFunc, int theProbSize, int IntType=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RandGeneral</name>
      <anchorfile>classCLHEP_1_1RandGeneral.html</anchorfile>
      <anchor>b5c4af804e607c0f32440ef6c6f5dfe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandGeneral.html</anchorfile>
      <anchor>0bcbf6a231e3745d7cb5b2b593aa0ebf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandGeneral.html</anchorfile>
      <anchor>d9efcb8a953af97dcd69ebe0dd592483</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandGeneral.html</anchorfile>
      <anchor>0f97f189ca6a9209c6967e53b529ec8c</anchor>
      <arglist>(HepRandomEngine *anEngine)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandGeneral.html</anchorfile>
      <anchor>1df9503cfae44a0fb9fb5911fddf9dce</anchor>
      <arglist>(HepRandomEngine *anEngine, const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandGeneral.html</anchorfile>
      <anchor>7aac1d4801275b1dc8baa4634042d789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandGeneral.html</anchorfile>
      <anchor>a59e15228e9dab61700aa23e89c82910</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandGeneral.html</anchorfile>
      <anchor>4aad9dce13d425603451480c037fa4ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RandGeneral.html</anchorfile>
      <anchor>1674ef0d2493621fecc4afdb70e2e379</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RandGeneral.html</anchorfile>
      <anchor>ba561d690a683ef98a618b153cd675dc</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1RandGeneral.html</anchorfile>
      <anchor>6f756b47a7de0fc5c6f2289ef63f6931</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRandomEngine &amp;</type>
      <name>engine</name>
      <anchorfile>classCLHEP_1_1RandGeneral.html</anchorfile>
      <anchor>11af719083d76cda506b67859d49c83f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>distributionName</name>
      <anchorfile>classCLHEP_1_1RandGeneral.html</anchorfile>
      <anchor>5e2eb3d77b0201cfe4bcde31f6e64e86</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::RandLandau</name>
    <filename>classCLHEP_1_1RandLandau.html</filename>
    <base>CLHEP::HepRandom</base>
    <member kind="function">
      <type></type>
      <name>RandLandau</name>
      <anchorfile>classCLHEP_1_1RandLandau.html</anchorfile>
      <anchor>3683dca85efb1e4d96a9dd11df0e139a</anchor>
      <arglist>(HepRandomEngine &amp;anEngine)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandLandau</name>
      <anchorfile>classCLHEP_1_1RandLandau.html</anchorfile>
      <anchor>d80156c91cb63f689a30eb2a99097d6b</anchor>
      <arglist>(HepRandomEngine *anEngine)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RandLandau</name>
      <anchorfile>classCLHEP_1_1RandLandau.html</anchorfile>
      <anchor>79034229c768fa4af9d31520b77dcc07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RandLandau.html</anchorfile>
      <anchor>a478a7d7d8a765a780f23fe3d94e407d</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RandLandau.html</anchorfile>
      <anchor>7a84514d963597b2ff45807dfb205c7a</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandLandau.html</anchorfile>
      <anchor>b3aa3e8699ea2b2b4f111114b3555c5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandLandau.html</anchorfile>
      <anchor>7c492b8fe3161fa55aaf5329f7c7a103</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandLandau.html</anchorfile>
      <anchor>47ef2be92caf63681965a44595eced57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1RandLandau.html</anchorfile>
      <anchor>e2b6b6e41e3710188ac023d6df1b3c6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRandomEngine &amp;</type>
      <name>engine</name>
      <anchorfile>classCLHEP_1_1RandLandau.html</anchorfile>
      <anchor>e69796b0c57a6d6a633939bb5dd5c089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandLandau.html</anchorfile>
      <anchor>fccdc6b5f503c4944497fdcd101593b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandLandau.html</anchorfile>
      <anchor>cff96e7632bb543c7cfcf43775021b1c</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandLandau.html</anchorfile>
      <anchor>9c7fc60078fae1806db62319d80c127c</anchor>
      <arglist>(HepRandomEngine *anotherEngine)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandLandau.html</anchorfile>
      <anchor>0786842d59ddf0f9a00b2890bb6813c2</anchor>
      <arglist>(HepRandomEngine *anotherEngine, const int size, double *vect)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>distributionName</name>
      <anchorfile>classCLHEP_1_1RandLandau.html</anchorfile>
      <anchor>a1da87c6201f6ed59b5429ad56be0b0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static double</type>
      <name>transform</name>
      <anchorfile>classCLHEP_1_1RandLandau.html</anchorfile>
      <anchor>67b6312a5370bb36dae879a454bc03c6</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static double</type>
      <name>transformSmall</name>
      <anchorfile>classCLHEP_1_1RandLandau.html</anchorfile>
      <anchor>14cf24559cbeba4095fc5108140538c2</anchor>
      <arglist>(double r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepRandom</name>
    <filename>classCLHEP_1_1HepRandom.html</filename>
    <member kind="function">
      <type></type>
      <name>HepRandom</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>ddfadccc024d3e41c6d2fa331217e341</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRandom</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>44d8ba9264c8cc4f4d6ffefd36c7eb56</anchor>
      <arglist>(long seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRandom</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>43fbaeca9eb632ea4c0e05a61a164197</anchor>
      <arglist>(HepRandomEngine &amp;algorithm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRandom</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>b868a1c9af9b8408b7ee16b03040b8d2</anchor>
      <arglist>(HepRandomEngine *algorithm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HepRandom</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>98e59721cd7b9f84e35c638866637de0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>flat</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>d77e0a6d60ea91e46a1d509eab98b82e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flatArray</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>5433a9e9d23f937eb2a97abfb2c4b498</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>flat</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>e6897d05bf4dd02bd12effda456cf194</anchor>
      <arglist>(HepRandomEngine *theNewEngine)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flatArray</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>56ea938f0d1e1468528f4c987900113d</anchor>
      <arglist>(HepRandomEngine *theNewEngine, const int size, double *vect)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>a628243c9a7b77b30453344d2914239a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>4f06ffda6d61554dd4b7f3095689927b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HepRandomEngine &amp;</type>
      <name>engine</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>5ec212bd68ab633a67781102d26adef0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>ab99ddc28abc236e843d92c99e7a934b</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>5a573ddc6a9c41fd6d53c723699eb579</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTheSeed</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>f46560b5bcb9c102c66685a46fad0dde</anchor>
      <arglist>(long seed, int lux=3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getTheSeed</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>592d6fb51173645ba33b50e060b116ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTheSeeds</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>c24c9730f1d7d02525ca9ce6034304d1</anchor>
      <arglist>(const long *seeds, int aux=-1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const long *</type>
      <name>getTheSeeds</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>30b762e81031e286133e0fe75e1b5415</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>getTheTableSeeds</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>bae11ebfacd866eb63eca64468ae2890</anchor>
      <arglist>(long *seeds, int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HepRandom *</type>
      <name>getTheGenerator</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>00f7ca575971da0bc5c3f7ab6d801c56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTheEngine</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>fd8f6c9b90a363ce56368bb46da64f8d</anchor>
      <arglist>(HepRandomEngine *theNewEngine)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HepRandomEngine *</type>
      <name>getTheEngine</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>5789c574f06f16dac2b3c9a36746abb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>saveEngineStatus</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>93a91840ec73cdeb22f13d1ddfa6f11d</anchor>
      <arglist>(const char filename[]=&quot;Config.conf&quot;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>restoreEngineStatus</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>ef7ab600d7aee093dc07add1334936d5</anchor>
      <arglist>(const char filename[]=&quot;Config.conf&quot;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>saveFullState</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>4f4251e15d7c4812020079933ec9bd4c</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::istream &amp;</type>
      <name>restoreFullState</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>6f184e1626d34740b30b78a495eead1b</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>saveDistState</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>a3aaae04dc8eceed17fb73a82448aaa2</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::istream &amp;</type>
      <name>restoreDistState</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>4ea217f460fc9d448fece7cfe9544475</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>saveStaticRandomStates</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>099b54eed77f5b7fd172d293f721a8d2</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::istream &amp;</type>
      <name>restoreStaticRandomStates</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>1fd0be868e155561836fc1b7e6f08e8a</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>showEngineStatus</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>00eb63d98b3d89f52979cc62de762a0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>createInstance</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>c727597ab68bddff87d5bd1e7bd4fa8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>distributionName</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>93aea1455637b4e99000c685e29a731b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const long</type>
      <name>seedTable</name>
      <anchorfile>classCLHEP_1_1HepRandom.html</anchorfile>
      <anchor>9125f498088fcee3c725ab032f4b117a</anchor>
      <arglist>[215][2]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepRandomEngine</name>
    <filename>classCLHEP_1_1HepRandomEngine.html</filename>
    <member kind="function">
      <type></type>
      <name>HepRandomEngine</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>5c55d01b72b5596c6b2838b4eff58bfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HepRandomEngine</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>2d106a336e18a5c1304ad4891ba1d7de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>a11eff8977af9d44aaed1914aee8f757</anchor>
      <arglist>(const HepRandomEngine &amp;engine)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>371254f09bb45003a2ad6e69ee5b40c2</anchor>
      <arglist>(const HepRandomEngine &amp;engine)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>flat</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>743bd49472dc1c6034ad1047a6154329</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flatArray</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>b166b636ad7672b421dd8614b686ce91</anchor>
      <arglist>(const int size, double *vect)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setSeed</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>95416f92d0e6e0d73a1eb09fdedb888f</anchor>
      <arglist>(long seed, int)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setSeeds</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>1ca37cf428fd7e3c19f2353c8088c4e0</anchor>
      <arglist>(const long *seeds, int)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>saveStatus</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>758cd8c2eb27b6dd3b5649ec8211f105</anchor>
      <arglist>(const char filename[]=&quot;Config.conf&quot;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>restoreStatus</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>322cbdcdda185dcfb10336adb959d7dc</anchor>
      <arglist>(const char filename[]=&quot;Config.conf&quot;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>showStatus</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>de2232120734223df27741f9686c341e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>8c97f7c5d621ffc26736b335707bff91</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>f2c8dd37b0fcd127366be99b4e531d6d</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>bfb462c456dd7b2eb21f926ebf3f5388</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>f936301a4e636eece0f7ad65aa6eb639</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; unsigned long &gt;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>08e06883ea880efca3fc37505190ecfc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>058fef0157cc70a5e11b2cc568835a29</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>1a92d31b7eec92a1426c5e8da0c233e1</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getSeed</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>0a5b7a26bd27640c46bc9ab025004b1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const long *</type>
      <name>getSeeds</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>4ed5f5347746dc96849d684c3af7b20f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>operator double</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>623bb45b37a64b12fb0e0d6d9792ecb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>operator float</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>4a07e127564f74ba84505811e8a41a4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>operator unsigned int</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>56f8f837caa51b50ad221d62b142bb29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>beginTag</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>e396c5f2bd9075bb5fb2c632b163b925</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HepRandomEngine *</type>
      <name>newEngine</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>5f91eb88e062c53fdc735cb0fa6c682a</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HepRandomEngine *</type>
      <name>newEngine</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>865ec004535170937feb1e60a19cdbaa</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>checkFile</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>974eace1d79fac2d9031d13c3e009416</anchor>
      <arglist>(std::istream &amp;file, const std::string &amp;filename, const std::string &amp;classname, const std::string &amp;methodname)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>theSeed</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>379e7d95a9e86d96d32873f5d0ed87e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const long *</type>
      <name>theSeeds</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>809d137a76c61bf4291f1439003b89a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double</type>
      <name>exponent_bit_32</name>
      <anchorfile>classCLHEP_1_1HepRandomEngine.html</anchorfile>
      <anchor>aadf3117ee34b34d6dd5c62dc3db7c0c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::RandPoisson</name>
    <filename>classCLHEP_1_1RandPoisson.html</filename>
    <base>CLHEP::HepRandom</base>
    <member kind="function">
      <type></type>
      <name>RandPoisson</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>ff3b28b4e510e98f8f9d9780d2a1c014</anchor>
      <arglist>(HepRandomEngine &amp;anEngine, double m=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandPoisson</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>cd0ef762eb35f8262653d574a881b83b</anchor>
      <arglist>(HepRandomEngine *anEngine, double m=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RandPoisson</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>82d036053dbc369e409d0429af44028f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>f1f4ceafafcd3a7a02d246ef3aab0992</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>1c5936b99e9a46ae9d0011d05e1f41f2</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>6c8a36ad36ba670fc1ceb34e099dc168</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>7ea629853da3ca6319ad5be680b7a17a</anchor>
      <arglist>(double m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>b6be8824ecc75718c8b3bbe13f255a96</anchor>
      <arglist>(const int size, long *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>bd0a98f4064abf94780097518b48079f</anchor>
      <arglist>(const int size, long *vect, double m)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>3a092698398b3f3f0e4d5c7cb0a2fbf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>2c076e633f4860ef90d2d47feab54904</anchor>
      <arglist>(double m)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>24dc6200dfada0ea39757e5e5ce5074c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRandomEngine &amp;</type>
      <name>engine</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>edbbc39589e1f5adb33abefd94371521</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>22e44f3eb8fc527cd8a2930624086a73</anchor>
      <arglist>(double m=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>1d9ac6e5fa8f7f87202432dcc91819b6</anchor>
      <arglist>(const int size, long *vect, double m=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>b2b221f6ce5ba55fc38020bfe36f1cf5</anchor>
      <arglist>(HepRandomEngine *anEngine, double m=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>d8176378d2f4b49874eb9dd2e893f4a0</anchor>
      <arglist>(HepRandomEngine *anEngine, const int size, long *vect, double m=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>distributionName</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>22f00b42df4c96d01d6cf10de85ed4fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RandPoisson</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>d3d0bc364cb5bcede3c652586f616194</anchor>
      <arglist>(const RandPoisson &amp;d)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HepRandomEngine *</type>
      <name>getLocalEngine</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>3f4a33eec20116907f0ae2f927747916</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static double</type>
      <name>getOldMean</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>5ca6474a0053df2b24a6c42a62c6ed2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static double</type>
      <name>getMaxMean</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>6bd90ad85e711a70c4b47f878bc1779d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>setOldMean</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>88129e233e91a961a4df872f3740dcd3</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static double *</type>
      <name>getPStatus</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>6893c9e14c5ad3c0bedcb0c22bac47a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>setPStatus</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>0ffbce9003e7e869b854757732883f08</anchor>
      <arglist>(double sq, double alxm, double g)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>meanMax</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>d078142ea95acc363c85f14434af75d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>defaultMean</name>
      <anchorfile>classCLHEP_1_1RandPoisson.html</anchorfile>
      <anchor>bdc2c11b715923c1c21765b04fe0dc4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::RandPoissonQ</name>
    <filename>classCLHEP_1_1RandPoissonQ.html</filename>
    <base>CLHEP::RandPoisson</base>
    <member kind="function">
      <type></type>
      <name>RandPoissonQ</name>
      <anchorfile>classCLHEP_1_1RandPoissonQ.html</anchorfile>
      <anchor>cc67eb8da9748586009a2bbabd6b9e55</anchor>
      <arglist>(HepRandomEngine &amp;anEngine, double m=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandPoissonQ</name>
      <anchorfile>classCLHEP_1_1RandPoissonQ.html</anchorfile>
      <anchor>74409cdbee4ece09136dac362ba7bb23</anchor>
      <arglist>(HepRandomEngine *anEngine, double m=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RandPoissonQ</name>
      <anchorfile>classCLHEP_1_1RandPoissonQ.html</anchorfile>
      <anchor>739794c4e1779280214dbb2dc270a524</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RandPoissonQ.html</anchorfile>
      <anchor>6ce9417247babbc174297763b614409d</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RandPoissonQ.html</anchorfile>
      <anchor>c8d9bd6e6404b84ca76d40ee82854f7a</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandPoissonQ.html</anchorfile>
      <anchor>6d69303b4663fe8b5f9ad4ce19e75653</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandPoissonQ.html</anchorfile>
      <anchor>c9eb6d36ce03e30aacef270924f038e3</anchor>
      <arglist>(double m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandPoissonQ.html</anchorfile>
      <anchor>3d2787e691ea41fe57eb8c45ff38a978</anchor>
      <arglist>(const int size, long *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandPoissonQ.html</anchorfile>
      <anchor>daa4db5cfdff7edc93782987267c0864</anchor>
      <arglist>(const int size, long *vect, double m)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandPoissonQ.html</anchorfile>
      <anchor>ff03aa56b24e72fa546d90c06b63ea6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandPoissonQ.html</anchorfile>
      <anchor>0f87323a3cc1de0ea1e07df77d1fb501</anchor>
      <arglist>(double m)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1RandPoissonQ.html</anchorfile>
      <anchor>a96275f4fb7e9479c9b9499079990208</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRandomEngine &amp;</type>
      <name>engine</name>
      <anchorfile>classCLHEP_1_1RandPoissonQ.html</anchorfile>
      <anchor>35db5810dc132823226fa2c6bfe27cf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandPoissonQ.html</anchorfile>
      <anchor>ca9a1884512423bec74a55a705534f5b</anchor>
      <arglist>(double m=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandPoissonQ.html</anchorfile>
      <anchor>153ec049156d6f51df1856c70adb7668</anchor>
      <arglist>(const int size, long *vect, double m=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandPoissonQ.html</anchorfile>
      <anchor>e884b64913033674fb4f736fb1d56688</anchor>
      <arglist>(HepRandomEngine *anEngine, double m=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandPoissonQ.html</anchorfile>
      <anchor>a06db91fce0dc4db392b06c5abbdcba6</anchor>
      <arglist>(HepRandomEngine *anEngine, const int size, long *vect, double m=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>distributionName</name>
      <anchorfile>classCLHEP_1_1RandPoissonQ.html</anchorfile>
      <anchor>85898f625af23a55fbfe5f455dc60a5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>tableBoundary</name>
      <anchorfile>classCLHEP_1_1RandPoissonQ.html</anchorfile>
      <anchor>1b22847ef909f3ad846d8b053a1fcc04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>MAXIMUM_POISSON_DEVIATE</name>
      <anchorfile>classCLHEP_1_1RandPoissonQ.html</anchorfile>
      <anchor>be07ff83d3465366d22d08297e2d5de3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::RandPoissonT</name>
    <filename>classCLHEP_1_1RandPoissonT.html</filename>
    <base>CLHEP::RandPoisson</base>
    <member kind="function">
      <type></type>
      <name>RandPoissonT</name>
      <anchorfile>classCLHEP_1_1RandPoissonT.html</anchorfile>
      <anchor>85f600ee29441d491b04e45aa918c31b</anchor>
      <arglist>(HepRandomEngine &amp;anEngine, double m=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandPoissonT</name>
      <anchorfile>classCLHEP_1_1RandPoissonT.html</anchorfile>
      <anchor>acca479c7fa7496ab76e2fb79f0467f9</anchor>
      <arglist>(HepRandomEngine *anEngine, double m=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RandPoissonT</name>
      <anchorfile>classCLHEP_1_1RandPoissonT.html</anchorfile>
      <anchor>089aca5355fad7e199c782ea9139846c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RandPoissonT.html</anchorfile>
      <anchor>f4b3f551947df4684a0a218046e214a2</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RandPoissonT.html</anchorfile>
      <anchor>e9cf9ee1e5f74f62063bd85b0383b593</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandPoissonT.html</anchorfile>
      <anchor>48a452096d3062c6c59f3e83cd205076</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandPoissonT.html</anchorfile>
      <anchor>b73198005265ede07be523e7f1146f03</anchor>
      <arglist>(double m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandPoissonT.html</anchorfile>
      <anchor>4f61d27b48f48739c99888d851f903f0</anchor>
      <arglist>(const int size, long *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandPoissonT.html</anchorfile>
      <anchor>683f0af71f220c8e955995166130dc78</anchor>
      <arglist>(const int size, long *vect, double m)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandPoissonT.html</anchorfile>
      <anchor>9e51202ebd9d0a6faa7e27c6df656ecb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandPoissonT.html</anchorfile>
      <anchor>fd03c66c449af594f5c77401028a911b</anchor>
      <arglist>(double m)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1RandPoissonT.html</anchorfile>
      <anchor>13442b726f5a54b4aca18db44a9e14d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRandomEngine &amp;</type>
      <name>engine</name>
      <anchorfile>classCLHEP_1_1RandPoissonT.html</anchorfile>
      <anchor>eb01e765d678bc1dac09faaa36c26faa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandPoissonT.html</anchorfile>
      <anchor>9e4e979aa26ccd00a144efb0d004d08d</anchor>
      <arglist>(double m=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandPoissonT.html</anchorfile>
      <anchor>2d46e48d9a34f5380db3a4bc95370a48</anchor>
      <arglist>(const int size, long *vect, double m=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandPoissonT.html</anchorfile>
      <anchor>7c4186d00030654a85b845426bf299e1</anchor>
      <arglist>(HepRandomEngine *anEngine, double m=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandPoissonT.html</anchorfile>
      <anchor>de4c59faa4085d376c1863c2bacce98d</anchor>
      <arglist>(HepRandomEngine *anEngine, const int size, long *vect, double m=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>distributionName</name>
      <anchorfile>classCLHEP_1_1RandPoissonT.html</anchorfile>
      <anchor>9a082804371a554b4a81d26e7da2ee62</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::RandStudentT</name>
    <filename>classCLHEP_1_1RandStudentT.html</filename>
    <base>CLHEP::HepRandom</base>
    <member kind="function">
      <type></type>
      <name>RandStudentT</name>
      <anchorfile>classCLHEP_1_1RandStudentT.html</anchorfile>
      <anchor>e82467ffb283dbf1a9bd9d35735923b9</anchor>
      <arglist>(HepRandomEngine &amp;anEngine, double a=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandStudentT</name>
      <anchorfile>classCLHEP_1_1RandStudentT.html</anchorfile>
      <anchor>6b68b2112e74f4f4f21f855cb2784608</anchor>
      <arglist>(HepRandomEngine *anEngine, double a=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RandStudentT</name>
      <anchorfile>classCLHEP_1_1RandStudentT.html</anchorfile>
      <anchor>215f0e283e2689808d951ccf84ab453c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RandStudentT.html</anchorfile>
      <anchor>eb360d5c6c9352dc0f2bac8995308b44</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RandStudentT.html</anchorfile>
      <anchor>ee8fa3e0d12eed78669d5378790e32e9</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandStudentT.html</anchorfile>
      <anchor>9ed29f6118c5caa10c82f348d893aa3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandStudentT.html</anchorfile>
      <anchor>cbb1cec96fb58b07f2b4783e1488779b</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandStudentT.html</anchorfile>
      <anchor>748dd26a23ef41ffb6d42c7b312d97a4</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandStudentT.html</anchorfile>
      <anchor>1b4060474b1f50329a63850446473f5c</anchor>
      <arglist>(const int size, double *vect, double a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandStudentT.html</anchorfile>
      <anchor>b69ce7f150bbf13c2b2f25907dfbf104</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandStudentT.html</anchorfile>
      <anchor>63564538dd88ad115a4a74a7c2281237</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1RandStudentT.html</anchorfile>
      <anchor>9480043cc4a73de36a1dfe6bf95b0ff0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRandomEngine &amp;</type>
      <name>engine</name>
      <anchorfile>classCLHEP_1_1RandStudentT.html</anchorfile>
      <anchor>4e9f9c7a0af2386bf99f17653fd55396</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandStudentT.html</anchorfile>
      <anchor>c8c4f20b29256122fd613cac16e7cb99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandStudentT.html</anchorfile>
      <anchor>7f11e295d0320d8f86e547247adb2c46</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandStudentT.html</anchorfile>
      <anchor>7c9a94d07721f75e8f342386ee5c4f3b</anchor>
      <arglist>(const int size, double *vect, double a=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandStudentT.html</anchorfile>
      <anchor>707e3f2013fe0ad8d61ca9935a48b82e</anchor>
      <arglist>(HepRandomEngine *anEngine)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>shoot</name>
      <anchorfile>classCLHEP_1_1RandStudentT.html</anchorfile>
      <anchor>d86c783e5023bb7daff04f77b1765575</anchor>
      <arglist>(HepRandomEngine *anEngine, double a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shootArray</name>
      <anchorfile>classCLHEP_1_1RandStudentT.html</anchorfile>
      <anchor>b3d87eb948564571b978a5b5aed50c81</anchor>
      <arglist>(HepRandomEngine *anEngine, const int size, double *vect, double a=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>distributionName</name>
      <anchorfile>classCLHEP_1_1RandStudentT.html</anchorfile>
      <anchor>e3a947e65a5f6ec1d2138ab3a2ea6c9c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::RanecuEngine</name>
    <filename>classCLHEP_1_1RanecuEngine.html</filename>
    <base>CLHEP::HepRandomEngine</base>
    <member kind="function">
      <type></type>
      <name>RanecuEngine</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>a5ddbdd16b194cf6fd2bb6ed5e467261</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RanecuEngine</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>9af701fa28dadef06aa5dfcd96fbf9fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RanecuEngine</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>a1773aa7fd29f76a95ec51567ecea9c8</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RanecuEngine</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>f87e246ab09fe5667ecff3e107aafbef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RanecuEngine</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>18b4f41bba43569aa25d187e328f8bd0</anchor>
      <arglist>(const RanecuEngine &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>RanecuEngine &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>1320452806a970f32a0d1ea66df573c1</anchor>
      <arglist>(const RanecuEngine &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>flat</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>d99097a6bc9c5e1650538ecf8bce1e8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flatArray</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>7fd79f5e32c349e817448106ce72638a</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndex</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>82c9ca53f931a0b277f344cddb5fb907</anchor>
      <arglist>(long index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>4b7211963eb8e1137f7e55d267695332</anchor>
      <arglist>(long index, int dum=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeeds</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>d772fa6a63135ccd440f367d86a19240</anchor>
      <arglist>(const long *seeds, int index=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveStatus</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>657795dd21e260bfc4fe9e3b30344a57</anchor>
      <arglist>(const char filename[]=&quot;Ranecu.conf&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreStatus</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>07ee9d49b68c38e2da14b7bc17f38560</anchor>
      <arglist>(const char filename[]=&quot;Ranecu.conf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showStatus</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>66523b054c8bd7a2b937d19067d077fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>92ca1e4a7957947fa07090ec2c90d7ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>c2385eefef324e0b1f7f0e3e06dcfa3b</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>25eab269fb5069cf8068604bec90ad38</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>096c937cf949c34619da54312f4d8b8c</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>90e3448e3eae631d90a78e3de9e8f522</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned long &gt;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>fa4352786e8d09448c5176a424f3cfec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>dcd961cba1c84e2cc092fc0d52245037</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>a5956191c2f2be5b9388820e23fb8fcd</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>beginTag</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>e248dadd44df2dacf6afd034d4b8baec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>engineName</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>28d9b8b4fde69f4239d08e5153c5567f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>ecuyer_a</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>9393edfd8010e86f41f9636465fbffcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>ecuyer_b</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>13347c64567bec9593edd2150bc37360</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>ecuyer_c</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>c7f2af6446006239ad7b830233445728</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>ecuyer_d</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>5586e9814352e77b877fb3223cad306a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>ecuyer_e</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>281a40cda17896e8aeeb7028d7e88a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>ecuyer_f</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>2ecc67fb2d45ea8af4bfe1dcccfa6c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>shift1</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>0c626d89c315be133df7ed67dd82c430</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>shift2</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>b9cc881afee7eecddc35af9334162162</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double</type>
      <name>prec</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>06df9db8079c4d295271c72d3eb3ad8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>VECTOR_STATE_SIZE</name>
      <anchorfile>classCLHEP_1_1RanecuEngine.html</anchorfile>
      <anchor>a0ea39add22a20a5934071fc1a24a42a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::Ranlux64Engine</name>
    <filename>classCLHEP_1_1Ranlux64Engine.html</filename>
    <base>CLHEP::HepRandomEngine</base>
    <member kind="function">
      <type></type>
      <name>Ranlux64Engine</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>8ac7b6a23c15c57fb96b43e97f5d978e</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ranlux64Engine</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>6dce74aaba77f7d3b306d2ffb7ac4519</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ranlux64Engine</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>afa07c0f6c476228418921fb9890ef19</anchor>
      <arglist>(long seed, int lux=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ranlux64Engine</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>afdcc995440f2c7e5e7bf9e59e16f494</anchor>
      <arglist>(int rowIndex, int colIndex, int lux)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ranlux64Engine</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>7a9ced00101bdd51e774530f96991988</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ranlux64Engine</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>c83e241cd0cecd81e3035f8ef62c42f9</anchor>
      <arglist>(const Ranlux64Engine &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Ranlux64Engine &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>d0f43191fb553c01638bbbeeed1da5d6</anchor>
      <arglist>(const Ranlux64Engine &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>flat</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>ac6b9bf162d3bb5e9d3bbf8baede3168</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flatArray</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>a64bf065c5d155089d58cd8acc92d0b1</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>a802bb5ad627135ae8f911f4e37bda2d</anchor>
      <arglist>(long seed, int lux=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeeds</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>0e5bebfb1b02ecf0e57bb4ac8b700592</anchor>
      <arglist>(const long *seeds, int lux=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveStatus</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>f0fc6fc76c49fa3c5b2800a2f8569fde</anchor>
      <arglist>(const char filename[]=&quot;Ranlux64.conf&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreStatus</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>26e0804a44003ccbfe4c9578dff028dd</anchor>
      <arglist>(const char filename[]=&quot;Ranlux64.conf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showStatus</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>db2bad94cd1a39f07e2a8f9fb780151b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLuxury</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>1fe6db03f3a1a31785f39a6eec6e45d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>8bc1e78189b1d4b685ff44e3bad50de4</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>03018eb5b240005caec1b2a654cd89fc</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>1a4d82b4ddb3c31328aef93a3cc6184a</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>14a75dd7cf433a1a7a73286aa0a5fea0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned long &gt;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>63222e7070699a44159d0ba6733881c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>642e963de7c95b7a4e4305cd19c1b1e5</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>63a0e92386e61c897ffeab00c06213c1</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>beginTag</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>ce33524120509378da2d417c8a68acf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>engineName</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>360f3c1e29016f483e2695651c905bb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>VECTOR_STATE_SIZE</name>
      <anchorfile>classCLHEP_1_1Ranlux64Engine.html</anchorfile>
      <anchor>ba87fae7303afbd172a5222bd411e34a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::RanluxEngine</name>
    <filename>classCLHEP_1_1RanluxEngine.html</filename>
    <base>CLHEP::HepRandomEngine</base>
    <member kind="function">
      <type></type>
      <name>RanluxEngine</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>f6c0a8e3dd834e28844e464708f8ad2d</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RanluxEngine</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>b01ff723efc3f3e191e47a3d44fd1ac8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RanluxEngine</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>71e42b3a1a1f39d3b06a8bb47b86e23c</anchor>
      <arglist>(long seed, int lux=3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RanluxEngine</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>d4b6bf49e7321a17a7bbd2e3633a20f0</anchor>
      <arglist>(int rowIndex, int colIndex, int lux)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RanluxEngine</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>91452bd6fe7a91b0b54df485e0969b1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RanluxEngine</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>2c6759dc48c375f6a0b1d99c8a029e0f</anchor>
      <arglist>(const RanluxEngine &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>RanluxEngine &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>4783b3663cdba696d95d67997a910b6f</anchor>
      <arglist>(const RanluxEngine &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>flat</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>1f23cae955a2c0e351e6a9daccd9087b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flatArray</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>180324081bf0819ef2575592008b14fb</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>a0ee56f661eb4fa8a2cd6b476d9d0253</anchor>
      <arglist>(long seed, int lux=3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeeds</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>6a69b5780e5f4d05a7384b29037cb192</anchor>
      <arglist>(const long *seeds, int lux=3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveStatus</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>d2c92f36e0bd918e966011e850cd2d2d</anchor>
      <arglist>(const char filename[]=&quot;Ranlux.conf&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreStatus</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>b8d80f4705e05b314a7e31f2276658b2</anchor>
      <arglist>(const char filename[]=&quot;Ranlux.conf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showStatus</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>e9bb54fd9ced1b63aadc5c0a040f8998</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLuxury</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>6969b142746f6b761d6fa5cca9704c0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>08259a28d8e124d793a20d306db62682</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>4c98f303d36f4a5862da8ea73df8ff6d</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>acb4a3d867fbb02a8526b19fa929d314</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>993a5d399d49a469934dd37e77dfb245</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>14654eee9a89bcfcc5cd05aa07a28e51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned long &gt;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>2e7df777b7ecf489ba4eadc9b3036857</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>1ea0ea1a310a69767e3135092af0993d</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>b523f209845300dad7570b0fd61fd1f1</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>beginTag</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>d7363242a3e6ef296b94f9603eb535ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>engineName</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>c6a4d986d0cc4c41a7c61b681a840e09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>VECTOR_STATE_SIZE</name>
      <anchorfile>classCLHEP_1_1RanluxEngine.html</anchorfile>
      <anchor>08065cdcd6620675956dad024fcffc77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::RanshiEngine</name>
    <filename>classCLHEP_1_1RanshiEngine.html</filename>
    <base>CLHEP::HepRandomEngine</base>
    <member kind="function">
      <type></type>
      <name>RanshiEngine</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>4e2d9f572726e6e538c624d2fd9a1f62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RanshiEngine</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>6596d44fc3567d480500b09b3fcdf47c</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RanshiEngine</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>86e50b7d656518f4d14d35074e2f5487</anchor>
      <arglist>(long seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RanshiEngine</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>e3e51465655f3b0938541ff5efa49d6d</anchor>
      <arglist>(int rowIndex, int colIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RanshiEngine</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>eb29fdbe485c0309ad7982c579ca2433</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RanshiEngine</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>9ce34b81b25b05f123243333da742fc8</anchor>
      <arglist>(const RanshiEngine &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>RanshiEngine &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>cd61974c559f566dbf12995b83af4eb9</anchor>
      <arglist>(const RanshiEngine &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>flat</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>be3f773e3780d9eebbd2899dc0d94a03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flatArray</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>677fde2020531a930291c9cb2cee3854</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>e8ae178af7a3923ad5d5097fb28cf0be</anchor>
      <arglist>(long seed, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeeds</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>9e8fe2743a257f7ba07b180302669e89</anchor>
      <arglist>(const long *seeds, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveStatus</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>30b09ce2f34d5e272fd3baf8fcaf3b72</anchor>
      <arglist>(const char filename[]=&quot;RanshiEngine.conf&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreStatus</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>8da8651c1b323a96178f8c524c295e92</anchor>
      <arglist>(const char filename[]=&quot;RanshiEngine.conf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showStatus</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>99008577c1edc1147867c95e92afb331</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator float</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>e891aa3c308ac37396e71a14fa782c51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>a53d7ca2526fbbf09d30e931965e1d17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>e52e9f26bc0980caa81fba898ef52c57</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>d3b09cc977b3f98d55c7fad8c5aed826</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>3722844b2196eb62b7836e4262b5097f</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>4c74e98f8187f3e9d6bf5c813b0e925e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned long &gt;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>e2b152b6634ac5d3cd7661b6dcd07899</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>e1ec7c125fc82a8bcd7706e7c717e306</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>9790b36d8d817154f6e393445247a94f</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>beginTag</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>d6addb9296e355513d51423683e2fe02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>engineName</name>
      <anchorfile>classCLHEP_1_1RanshiEngine.html</anchorfile>
      <anchor>897dd021fcc74ef2937e68cc857fab1a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepStat</name>
    <filename>classCLHEP_1_1HepStat.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>flatToGaussian</name>
      <anchorfile>classCLHEP_1_1HepStat.html</anchorfile>
      <anchor>8f985b143f67af6d54bd3dcc6f611adc</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>inverseErf</name>
      <anchorfile>classCLHEP_1_1HepStat.html</anchorfile>
      <anchor>366a02f8f9b9d794ce9540d4308ae905</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>erf</name>
      <anchorfile>classCLHEP_1_1HepStat.html</anchorfile>
      <anchor>35ede417b766a694784b962f49dddd70</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>erfQ</name>
      <anchorfile>classCLHEP_1_1HepStat.html</anchorfile>
      <anchor>3058b94c6425357d2e6aaa220e5501f9</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>gammln</name>
      <anchorfile>classCLHEP_1_1HepStat.html</anchorfile>
      <anchor>41619f5d92715245182c1957ff450588</anchor>
      <arglist>(double x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::StaticRandomStates</name>
    <filename>classCLHEP_1_1StaticRandomStates.html</filename>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>save</name>
      <anchorfile>classCLHEP_1_1StaticRandomStates.html</anchorfile>
      <anchor>5cf83cc2597bec1ef30d6071fd78faff</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::istream &amp;</type>
      <name>restore</name>
      <anchorfile>classCLHEP_1_1StaticRandomStates.html</anchorfile>
      <anchor>30b573cfecb2b7df334bf7b0c8f82b8f</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::TripleRand</name>
    <filename>classCLHEP_1_1TripleRand.html</filename>
    <base>CLHEP::HepRandomEngine</base>
    <member kind="function">
      <type></type>
      <name>TripleRand</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>6122fcaf72ce25c765dbea5845df3391</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TripleRand</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>7fc003d5d387fc90c8acb37268d6e36b</anchor>
      <arglist>(long seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TripleRand</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>279244967558b89c4f06cdda881c4653</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TripleRand</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>95790571f57d4a37396079a0242f078f</anchor>
      <arglist>(int rowIndex, int colIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TripleRand</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>ff011f9ad3f6263183570048d7d98c23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TripleRand</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>d97f8e90ca3cea3275a34cf8139dfde4</anchor>
      <arglist>(const TripleRand &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>TripleRand &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>76bc047e0b4702e6e259913f7eafe67a</anchor>
      <arglist>(const TripleRand &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>flat</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>6c82e7191750dd4647e29dee0f8878af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flatArray</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>37a09ab05daff604078ea9467e2b1839</anchor>
      <arglist>(const int size, double *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>9780255991da3e7f4edafd641212125c</anchor>
      <arglist>(long seed, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeeds</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>af4fd6e48bdc09b6ce109a1571e6365e</anchor>
      <arglist>(const long *seeds, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveStatus</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>04540768884e982c09e62e667cacbbfd</anchor>
      <arglist>(const char filename[]=&quot;TripleRand.conf&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreStatus</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>a72a6b20b47c29b02bf9675c354c929e</anchor>
      <arglist>(const char filename[]=&quot;TripleRand.conf&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showStatus</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>bce030ae886a0c8028b74c8d9c31645e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator float</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>62dee8c3934d35d11d048d0a4a448a9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>11d3ba2b8096c5978d4820c421addf79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>9f67e268e4b0b38b245a96532313a000</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>643b7e1809c25dd07fea6946e4736ca2</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>dbeea91144fa0852a418ab7a7cbc09ec</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>543f6204e769ac454bce3e29ffce923e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned long &gt;</type>
      <name>put</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>a12a3ee95de988720fdee5c7635ca27b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>97df90fc5aa46107c3fd9a1efdc5fa13</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getState</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>8f16ff52a1b14b39bc29e67039b6fa01</anchor>
      <arglist>(const std::vector&lt; unsigned long &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>beginTag</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>f6a674f8be40dd982519f2cbdf20488f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>engineName</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>bdf10d2f38b5da62cdb1b950862f9544</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>VECTOR_STATE_SIZE</name>
      <anchorfile>classCLHEP_1_1TripleRand.html</anchorfile>
      <anchor>1637f2b0da656898da5a75dffc7f5f47</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">CLHEP::TripleRand::IntegerCong</class>
    <class kind="class">CLHEP::TripleRand::Tausworthe</class>
  </compound>
  <compound kind="class">
    <name>CLHEP::RandMultiGauss</name>
    <filename>classCLHEP_1_1RandMultiGauss.html</filename>
    <base>CLHEP::HepRandomVector</base>
    <member kind="function">
      <type></type>
      <name>RandMultiGauss</name>
      <anchorfile>classCLHEP_1_1RandMultiGauss.html</anchorfile>
      <anchor>6527fd82e62d0cd4a9089f25dc30c88a</anchor>
      <arglist>(HepRandomEngine &amp;anEngine, const HepVector &amp;mu, const HepSymMatrix &amp;S)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandMultiGauss</name>
      <anchorfile>classCLHEP_1_1RandMultiGauss.html</anchorfile>
      <anchor>f78d67f3630ffc44ec06b723ff4687fb</anchor>
      <arglist>(HepRandomEngine *anEngine, const HepVector &amp;mu, const HepSymMatrix &amp;S)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandMultiGauss</name>
      <anchorfile>classCLHEP_1_1RandMultiGauss.html</anchorfile>
      <anchor>dde8a0b4c7dc43078992c558a48e7e14</anchor>
      <arglist>(HepRandomEngine &amp;anEngine)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandMultiGauss</name>
      <anchorfile>classCLHEP_1_1RandMultiGauss.html</anchorfile>
      <anchor>615d536a95a0ee57fa274b1ec5239ae8</anchor>
      <arglist>(HepRandomEngine *anEngine)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RandMultiGauss</name>
      <anchorfile>classCLHEP_1_1RandMultiGauss.html</anchorfile>
      <anchor>083164d4338357b79a1039d8356cbcf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandMultiGauss.html</anchorfile>
      <anchor>03bfdd1755260f6127e32167e2f79df2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>fire</name>
      <anchorfile>classCLHEP_1_1RandMultiGauss.html</anchorfile>
      <anchor>c68a7cdc669b19873116b8db52413197</anchor>
      <arglist>(const HepVector &amp;mu, const HepSymMatrix &amp;S)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandMultiGauss.html</anchorfile>
      <anchor>14384cec2000307fe26b621200ddfe74</anchor>
      <arglist>(const int size, HepVector *array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fireArray</name>
      <anchorfile>classCLHEP_1_1RandMultiGauss.html</anchorfile>
      <anchor>3a1bc54c07ae79aeead0bdbba8410037</anchor>
      <arglist>(const int size, HepVector *array, const HepVector &amp;mu, const HepSymMatrix &amp;S)</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandMultiGauss.html</anchorfile>
      <anchor>d029ed13642102a722d4e1b2b2d72e40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1RandMultiGauss.html</anchorfile>
      <anchor>f9201d4f0d7f95ca222e116acc6fb774</anchor>
      <arglist>(const HepVector &amp;mu, const HepSymMatrix &amp;S)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepRandomVector</name>
    <filename>classCLHEP_1_1HepRandomVector.html</filename>
    <member kind="function">
      <type></type>
      <name>HepRandomVector</name>
      <anchorfile>classCLHEP_1_1HepRandomVector.html</anchorfile>
      <anchor>943e069694ad01a2b5020e0bf321115e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRandomVector</name>
      <anchorfile>classCLHEP_1_1HepRandomVector.html</anchorfile>
      <anchor>f92dd659f2d619af1643e32146f09af9</anchor>
      <arglist>(long seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRandomVector</name>
      <anchorfile>classCLHEP_1_1HepRandomVector.html</anchorfile>
      <anchor>5d33e6ec5a088fb1419404f483ce03eb</anchor>
      <arglist>(HepRandomEngine &amp;engine)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRandomVector</name>
      <anchorfile>classCLHEP_1_1HepRandomVector.html</anchorfile>
      <anchor>77cb95fe08df181a976d16cc958498a3</anchor>
      <arglist>(HepRandomEngine *engine)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HepRandomVector</name>
      <anchorfile>classCLHEP_1_1HepRandomVector.html</anchorfile>
      <anchor>12aa80f89df724ec5e8f9235d989f23d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>flat</name>
      <anchorfile>classCLHEP_1_1HepRandomVector.html</anchorfile>
      <anchor>7334462209b4ea75d2d8e75a909b9270</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HepVector</type>
      <name>flat</name>
      <anchorfile>classCLHEP_1_1HepRandomVector.html</anchorfile>
      <anchor>deab4a2e47d89adbaa02f8a3e7b113af</anchor>
      <arglist>(HepRandomEngine *theNewEngine)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flatArray</name>
      <anchorfile>classCLHEP_1_1HepRandomVector.html</anchorfile>
      <anchor>9b1f0d94d1b782a5592e133ec9f45c4d</anchor>
      <arglist>(const int size, HepVector *vect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flatArray</name>
      <anchorfile>classCLHEP_1_1HepRandomVector.html</anchorfile>
      <anchor>20b88dd7d31ec53092757693b13b755d</anchor>
      <arglist>(HepRandomEngine *theNewEngine, const int size, HepVector *vect)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HepVector</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepRandomVector.html</anchorfile>
      <anchor>98673d8e3a6a5f51907a87b2c6bb7fe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HepRandomEngine *</type>
      <name>theEngine</name>
      <anchorfile>classCLHEP_1_1HepRandomVector.html</anchorfile>
      <anchor>66bb37c0e31a74688f8e3ec72b607d79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepAxisAngle</name>
    <filename>classCLHEP_1_1HepAxisAngle.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>Scalar</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>b1acb89503ec91e62872b3286667607e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepAxisAngle</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>4aff85563f5c233564aa6cfcf2231fbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepAxisAngle</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>2d86b13cf0be040b6d377da07b55f1ef</anchor>
      <arglist>(const Hep3Vector axis, Scalar delta)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>getAxis</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>cfb1d11838da21053bb2b8169b685805</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>axis</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>c2dfc76d11a6152c87a1d29baba95e1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AA &amp;</type>
      <name>setAxis</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>3a8e66fd88a2c44f7e6fdaec55b9b191</anchor>
      <arglist>(const Hep3Vector axis)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDelta</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>b5020c663f8f9d4e8cb2ed05e9ac1009</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>delta</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>83bb56f0c5bd99c1a86ce9644b3f6b48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AA &amp;</type>
      <name>setDelta</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>ad5efa0c2f44c6d38beca6fe06cca2ba</anchor>
      <arglist>(Scalar delta)</arglist>
    </member>
    <member kind="function">
      <type>AA &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>05f799deaf622343e205da4e50015ea0</anchor>
      <arglist>(const Hep3Vector axis, Scalar delta)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>bf51981609293a708228473bef8cf0bd</anchor>
      <arglist>(const AA &amp;aa) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>c3baf94bf87693b4342ce03f3dd52c4d</anchor>
      <arglist>(const AA &amp;aa) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>092acc292de87d8c84bddb49e81272da</anchor>
      <arglist>(const AA &amp;aa) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>cad1d72249aa65921d7421a6a5ada4cc</anchor>
      <arglist>(const AA &amp;aa) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>db13bbacdc2adfce00007dc656740da5</anchor>
      <arglist>(const AA &amp;aa) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>b5178ff67e6919cdd5a95f38efde3b46</anchor>
      <arglist>(const AA &amp;aa) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>6691588feb5de00e90af618494532ef0</anchor>
      <arglist>(const AA &amp;aa) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>582f92deba266d66cfbc6764f7075f1d</anchor>
      <arglist>(const AA &amp;aa, Scalar epsilon=tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>a43628527940844a754de631b0eec494</anchor>
      <arglist>(const AA &amp;aa) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getTolerance</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>fa1645040c34bcb5f6ce9e5ab553bdad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>setTolerance</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>1ea6ad28d7137b11aed278584c8ee47d</anchor>
      <arglist>(Scalar tol)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>HepAxisAngle</type>
      <name>AA</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>b9ff293af0ebba54cefb93dfdde21c16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>e7a36634d6abd0ef525be86bb300fd8c</anchor>
      <arglist>(const HepAxisAngle &amp;aa) const </arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static Scalar</type>
      <name>tolerance</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>116f5a8acc248cc19c9d4dfabb8e9267</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>56db42e1f25ff8a30fc069a01ae1aa49</anchor>
      <arglist>(std::ostream &amp;os, const AA &amp;aa)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classCLHEP_1_1HepAxisAngle.html</anchorfile>
      <anchor>d33905fcab6a6cab456b95e034e73ec3</anchor>
      <arglist>(std::istream &amp;is, AA &amp;aa)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepBoost</name>
    <filename>classCLHEP_1_1HepBoost.html</filename>
    <member kind="function">
      <type></type>
      <name>HepBoost</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>3a37b709ab6ec4189b92e766c86891ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepBoost</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>9e537ef54f9ae9c6a7f0a4572d2b9701</anchor>
      <arglist>(const HepBoost &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>HepBoost &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>09b94ac6e50416a4bbd6c33f0f2e1f9f</anchor>
      <arglist>(const HepBoost &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>HepBoost &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>7c1731bb2962b0a15b4a9ec9379ff3c2</anchor>
      <arglist>(double betaX, double betaY, double betaZ)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepBoost</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>e57cec37928c4312088d200847094169</anchor>
      <arglist>(double betaX, double betaY, double betaZ)</arglist>
    </member>
    <member kind="function">
      <type>HepBoost &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>df9f2370a5e4eac437d4d863c071946a</anchor>
      <arglist>(const HepRep4x4Symmetric &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepBoost</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>5549762495205365321358187250c09e</anchor>
      <arglist>(const HepRep4x4Symmetric &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>HepBoost &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>ec4b1cea9fc158b46282b6148831ccf8</anchor>
      <arglist>(Hep3Vector direction, double beta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepBoost</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>c4fe0e3d55808283c168e6e9dbe834ce</anchor>
      <arglist>(Hep3Vector direction, double beta)</arglist>
    </member>
    <member kind="function">
      <type>HepBoost &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>9e0145a62af2be6aa406d86a5ced3c94</anchor>
      <arglist>(const Hep3Vector &amp;boost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepBoost</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>c42862613e9b064008b556344dbdfaa9</anchor>
      <arglist>(const Hep3Vector &amp;boost)</arglist>
    </member>
    <member kind="function">
      <type>HepBoost &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>b9b6b44e2cb95d6b7f425ed426fce214</anchor>
      <arglist>(const HepBoostX &amp;boost)</arglist>
    </member>
    <member kind="function">
      <type>HepBoost &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>7e56a54d35dc750b342c3ac56146b0c9</anchor>
      <arglist>(const HepBoostY &amp;boost)</arglist>
    </member>
    <member kind="function">
      <type>HepBoost &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>71a58a8210ce35277e6eac4d1e3931fa</anchor>
      <arglist>(const HepBoostZ &amp;boost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepBoost</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>bd3779ca7877b5bc5bc9c376b0e05bb6</anchor>
      <arglist>(const HepBoostX &amp;boost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepBoost</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>120f453962626b2e6798d0b4f88954f9</anchor>
      <arglist>(const HepBoostY &amp;boost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepBoost</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>8b94bd3cb60a35911c31778d7483c5d2</anchor>
      <arglist>(const HepBoostZ &amp;boost)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>cdb230e123f165467196c3e14ac47c3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gamma</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>cf06ed074b26422c74928cfc3fc0ccb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>boostVector</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>8c90e832a660c28a9f271b203e170eb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>getDirection</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>cff1fe0c3e895249d38f9bc6bef3f4e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>direction</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>10d5eb8bfeda95c1fcb5ea2dff79c9a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xx</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>0bba0bfbb2b765a32ba9ec189a4abdb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xy</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>d6e9a645adfbb6eaf4ea93b889c3b7f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xz</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>b287109070b2bc04a937b291a322bed8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xt</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>b2152376ff4487a36e15b30ba73cef89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yx</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>c56da8ec6750877151377083690278e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yy</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>f8fae7bef066b80077c0bfd727126ebe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yz</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>939ff768282dcec3016a2f9e86a05322</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yt</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>61da0d2312759ee1cc81946bc792801f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zx</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>b41e28b7b5a64528f5e9ab6e06fb9514</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zy</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>cd88b4231b6c621c23468c7673461ae9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zz</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>c8c4cc119cfe4472719ac9c264b2eb9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zt</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>48172a65b9f2f771d5388fe326923f78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tx</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>f214a35ed06f953eecb54dfa7735fe1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ty</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>47edd563188d771070cf849007b5cf27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tz</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>02831fc0fd8914442a75168a1df17664</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tt</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>72d89de78d3a9123be4ddd4c92e124d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col1</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>aeb9f5db074d16f057e1f965de02b858</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col2</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>2c30d8eb8dfe24ce11bc7f5bc1a68867</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col3</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>45392e2ad9c3c003d564bffb58684f8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col4</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>aa90e65003c2aefd7461dcf64e10921f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row1</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>147c219b1ef69c3dcb876f005b63040f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row2</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>f41af825387bb74f302402b2ce00a045</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row3</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>0a40599b749fb19912d3a9999708dcb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row4</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>cc72e3d197ec034bb20fa8d397c3bee9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRep4x4</type>
      <name>rep4x4</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>f6e177e0b60e064f36533e9253419b45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRep4x4Symmetric</type>
      <name>rep4x4Symmetric</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>981888fa3e18c905d662845121c41e2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>8eed2b99867c0aca078d979f05958a03</anchor>
      <arglist>(HepRotation &amp;rotation, HepBoost &amp;boost) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>f2da2a6bd32abab289101a165266b847</anchor>
      <arglist>(HepAxisAngle &amp;rotation, Hep3Vector &amp;boost) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>40d3e0e03afaba5e6b5b7cccb3afb4a9</anchor>
      <arglist>(HepBoost &amp;boost, HepRotation &amp;rotation) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>bbeebf945a204171b537337725dd2592</anchor>
      <arglist>(Hep3Vector &amp;boost, HepAxisAngle &amp;rotation) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>ca2a8bb1b60b57e5d04c56f8432f610c</anchor>
      <arglist>(const HepBoost &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>2f5db7a11eecbdec7167028111c2d543</anchor>
      <arglist>(const HepBoost &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>87e7b44adba997a40d22217ec39e76e0</anchor>
      <arglist>(const HepBoost &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>5bfedf2de7906094a4c8ba49e6e79539</anchor>
      <arglist>(const HepBoost &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>d2fea9c91586ad30be5292627a6f9e22</anchor>
      <arglist>(const HepBoost &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>e466fabd8f543c586c694fd96117c753</anchor>
      <arglist>(const HepBoost &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>dbb872adf7bafedf3a6bf37f622c6393</anchor>
      <arglist>(const HepBoost &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>2b9bf67e18092d7cbc7449efa57a13ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>7910ecb9f0f27566f30dee8d9ed63d7f</anchor>
      <arglist>(const HepBoost &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>0a9084089587d8d886ddaba9a372573e</anchor>
      <arglist>(const HepBoostX &amp;bx) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>af8bbc5d0b7bbd6baff3685ce1c3814c</anchor>
      <arglist>(const HepBoostY &amp;by) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>bc4a20eb8894b3bb45958a567d91d067</anchor>
      <arglist>(const HepBoostZ &amp;bz) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>8623a39a6aa789dbacdd8634f988476f</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>95b26dbcf34751589578f210c81e0388</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>57ab3cbd0c22dc42cbbaeabc8c0879ae</anchor>
      <arglist>(const HepBoost &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>f4341f5dc16fe9fb8255f0b02b210b8d</anchor>
      <arglist>(const HepBoost &amp;b, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>fdf899bf723263257aee3cacd98f9693</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>f274d2b8aeb45b994664db8b5f7a1bec</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>7cb3793dfe98eab495fbcc6b2dcebfa9</anchor>
      <arglist>(const HepRotation &amp;r, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>7e0fe176c74a0675ea944945e622bc18</anchor>
      <arglist>(const HepLorentzRotation &amp;lt, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm2</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>f96a50c78870270337199f50e4013960</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rectify</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>534fe850f3aef00e1ebc184eb440c1d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>3e604d3c3001bf673ac793d85fc8251b</anchor>
      <arglist>(const HepLorentzVector &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>a4a848ed7c2f0fbb391255312933e9b4</anchor>
      <arglist>(const HepLorentzVector &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>45d05c37724db6bd5f00ffcddf04730b</anchor>
      <arglist>(const HepBoost &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>4d9fcce1acb7a3e12889f5b337f31faf</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>633a631cff7bf7028c9d84e9e9cbba5f</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>HepBoost</type>
      <name>inverse</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>2a4fe9e575d602393018a0e12352410a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepBoost &amp;</type>
      <name>invert</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>f3d3097376e77e7dad7777bcd197a176</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>6b0614f110828eba669fee590aea9deb</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getTolerance</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>6e4c4b3423b943311c9c7333ad1bfe0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>setTolerance</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>559184aee355303843f7165c2be79efa</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HepLorentzVector</type>
      <name>vectorMultiplication</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>a94f5d37d6f017c1d2d455972bea7bf7</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HepLorentzRotation</type>
      <name>matrixMultiplication</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>cd38e04f88417e139b7f93968bf59bd5</anchor>
      <arglist>(const HepRep4x4 &amp;m) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HepLorentzRotation</type>
      <name>matrixMultiplication</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>b7698f09f1ab132557bb9ca937b3322d</anchor>
      <arglist>(const HepRep4x4Symmetric &amp;m) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HepBoost</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>5e17c105a5c56e3ae8a3e21b9bcbd5b4</anchor>
      <arglist>(double xx, double xy, double xz, double xt, double yy, double yz, double yt, double zz, double zt, double tt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setBoost</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>4f5a72ad242a4c9c512f070dbd3363d5</anchor>
      <arglist>(double bx, double by, double bz)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HepRep4x4Symmetric</type>
      <name>rep_</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>b93064850d9dc852603f60954828c064</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend HepBoost</type>
      <name>inverseOf</name>
      <anchorfile>classCLHEP_1_1HepBoost.html</anchorfile>
      <anchor>690c1abdd31069e3da3e68e847467c1d</anchor>
      <arglist>(const HepBoost &amp;lt)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepBoostX</name>
    <filename>classCLHEP_1_1HepBoostX.html</filename>
    <member kind="function">
      <type></type>
      <name>HepBoostX</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>6cc0c709f4dfe9844dc23177cbac281a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepBoostX</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>67ded2474e0e3a91676215e70bfc8976</anchor>
      <arglist>(const HepBoostX &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>HepBoostX &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>803e507b48ad909fa97400448693b56d</anchor>
      <arglist>(const HepBoostX &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>HepBoostX &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>b12ac084dd399ebd8419b8e39a657c1c</anchor>
      <arglist>(double beta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepBoostX</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>317d11fde229edc3686b9f23ba7a54b6</anchor>
      <arglist>(double beta)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>8563aac653bac6c1729dae5daea54449</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gamma</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>3663df1ca7e2a1b31d479d875ff9d3ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>boostVector</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>86b127d86e02f8c1fbe01e541ace98a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>getDirection</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>43cced777c4758c6d97a2985085db681</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xx</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>85e9f0c652f599454e684c17bf62d418</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xy</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>926fc80ceaadd40f499493e5dd3959ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xz</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>240b910b9b88382630cbac63e545821a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xt</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>39adba226e62c690a2f8f9ebbfe57527</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yx</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>38ed4f511d2a4baeaf920fae1f79b5d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yy</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>d7d39655ee45a32d04a0f826ce83639c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yz</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>1d05ea92aa454825a959d7c8d1cde9f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yt</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>1e68fea3728b860bbcc5706426ff9fb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zx</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>a95bdc929928b5eb23258074f4d1d689</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zy</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>7cf9a06fb4c64ca0b4bea6c78a4a508b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zz</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>b9a7c36041af448483d7ab0648c004df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zt</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>d1ebc691d2380528c1da740999eb908f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tx</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>197931dc9a1c04e4666c6fc9881ddebc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ty</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>08cd453277529ae182f236e58af05f52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tz</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>aeb1663d6be4a1248aac988423d529a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tt</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>59c7b6ef4d3891522e910e0c6482eec5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col1</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>668aa2acf5f9ec8c20a1b1e6257fa48c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col2</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>b65ee2cfadb4153787db3bd71805443e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col3</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>d4bd4aae525abc678fade49bcd7a3eb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col4</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>fa13408f148fad205d33197c48d1ace2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row1</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>629658f97f8761ef4296d9d22f8a3dd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row2</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>826f21d5c888448a5827a07d5fd9e875</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row3</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>6663c931fa6de687b4932beeaedf3cc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row4</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>fd0225ceefa5a79b129020ef737c4d49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRep4x4</type>
      <name>rep4x4</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>02729216b7f838007300fe2f05909dca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRep4x4Symmetric</type>
      <name>rep4x4Symmetric</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>5bf7d5f6893a9e2998e4963cca7733ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>c291c656f44fb04d5a486aebb90c69d1</anchor>
      <arglist>(HepRotation &amp;rotation, HepBoost &amp;boost) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>0591eb42e85055162bbe4ad9a6c20826</anchor>
      <arglist>(HepAxisAngle &amp;rotation, Hep3Vector &amp;boost) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>bf0a69545333ade94e7f6cc80cc41643</anchor>
      <arglist>(HepBoost &amp;boost, HepRotation &amp;rotation) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>3b349958b404b91236d624e9b1bda9b3</anchor>
      <arglist>(Hep3Vector &amp;boost, HepAxisAngle &amp;rotation) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>f32c961f7090093d6a5e1f2d3b16a371</anchor>
      <arglist>(const HepBoostX &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>39d571d6bb263ebf627cc4a86ccff37e</anchor>
      <arglist>(const HepBoostX &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>8fab847ea7ccc3172eba13284cf0ded9</anchor>
      <arglist>(const HepBoostX &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>7f8d3ead6b178605fc08cf6ac263ab5c</anchor>
      <arglist>(const HepBoostX &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>4bf104b43df41da7a4a86c4427cd52e1</anchor>
      <arglist>(const HepBoostX &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>8f7750d621a53dc9d47cb89316a9aec1</anchor>
      <arglist>(const HepBoostX &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>49abdf188df79e527aea4d002433b702</anchor>
      <arglist>(const HepBoostX &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>2f287c6b644c223b2a0aea2583780723</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>380bae6425e3ae116cf34340fbed408e</anchor>
      <arglist>(const HepBoostX &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>0c2344415a7245d165a93c358b240098</anchor>
      <arglist>(const HepBoost &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>3b7b36682dfdfdd6db24f1c3dd1f9c7c</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>c73119c167312234fdb6316dc22eca53</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>c2878a9f79cdf344d81f0be43dcfed65</anchor>
      <arglist>(const HepBoostX &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>09e8706668919a0f7bb3eb86c3a31973</anchor>
      <arglist>(const HepBoost &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>ba8389f3c83df153b840b52cc6e9526b</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>f475dbffd0d3cd642e2bfdd72a319cc7</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>1bfc90c5c84960afb65fca4a483c0f6b</anchor>
      <arglist>(const HepBoostX &amp;b, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>075ac49b2421d0c99003d9d083ad87ca</anchor>
      <arglist>(const HepBoost &amp;b, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>d29fd7030a366ccf162af97e80d556e7</anchor>
      <arglist>(const HepRotation &amp;r, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>81eed3c4772ba8d59b62252da5d0bf15</anchor>
      <arglist>(const HepLorentzRotation &amp;lt, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm2</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>d48a39f4d85dd816f17848671ccd086b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rectify</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>f1851703d88cf03ade42aa66e294061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>13ac428135317585547bad24544226b3</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>c518f8bbaada66d2caccee763d2f3022</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>HepBoostX</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>49924621305af4e47b1d8510d5b7f64a</anchor>
      <arglist>(const HepBoostX &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>74d09054f09cd1c6035bc3006ca1ea69</anchor>
      <arglist>(const HepBoost &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>cf8f02b325634e7fb587598f1f6d0e9d</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>cb04c52d9ec10cd226fca590a668e942</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>HepBoostX</type>
      <name>inverse</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>3760b8c923d470a38fe76b6fadc1fdf7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepBoostX &amp;</type>
      <name>invert</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>2c0cc2dc00afebfa970d65a8985103ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>b36887f76121f43b047d40b4dc161ee9</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getTolerance</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>88695bc7b1b245776b80dd8e134d8e25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>setTolerance</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>bad6d2b113ac598ca5094e460f4ac23e</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HepLorentzVector</type>
      <name>vectorMultiplication</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>e2a2db5c6c1db68a84b96e95f2fbb6c8</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HepLorentzRotation</type>
      <name>matrixMultiplication</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>1c7428fdb962a31ea716349ab657a409</anchor>
      <arglist>(const HepRep4x4 &amp;m) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HepLorentzRotation</type>
      <name>matrixMultiplication</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>258299ea4b6c1150d142a99838db76b3</anchor>
      <arglist>(const HepRep4x4Symmetric &amp;m) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HepBoostX</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>4f96eff0279c90455b3ba1b858878b90</anchor>
      <arglist>(double beta, double gamma)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>beta_</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>671d9f0cac3f2a456af8672be3a98937</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>gamma_</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>c3cbaa59399c2754ab7c01132b7532ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend HepBoostX</type>
      <name>inverseOf</name>
      <anchorfile>classCLHEP_1_1HepBoostX.html</anchorfile>
      <anchor>e31cedb2b13353f4b25a98e69a44cc82</anchor>
      <arglist>(const HepBoostX &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepBoostY</name>
    <filename>classCLHEP_1_1HepBoostY.html</filename>
    <member kind="function">
      <type></type>
      <name>HepBoostY</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>d0bc2cf3d2d968d1931f8aab3e234dd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepBoostY</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>b52f8b83f35e90d26cc28df09f72fe02</anchor>
      <arglist>(const HepBoostY &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>HepBoostY &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>813dd3931051302b8cd1b344fd47e0ee</anchor>
      <arglist>(const HepBoostY &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>HepBoostY &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>363367988d29b6ad7ff1be9599f41ae6</anchor>
      <arglist>(double beta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepBoostY</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>c304786758a9b2d123644a8eea18bbed</anchor>
      <arglist>(double beta)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>b6a7278d24c213ab1d5143df272577dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gamma</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>3a2b65cd40a777158e73e8d8ea1bd39f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>boostVector</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>bcfef44faa9a6a77df6f57dbb88d3514</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>getDirection</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>368647d25fea27715d5f6b4f33cc0ba5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xx</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>fae8f15d6fc62079ee4dfaf076b76345</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xy</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>8a735828bd7da20551e60564daba47a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xz</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>d291caf40a080464c61a933f2400d18c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xt</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>05a313613dcc992829b2ee653976e5e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yx</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>1365ef5922c1e11c9c30ea1486fd4767</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yy</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>601fb279f47200a3a35579ed14a8eae6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yz</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>8ce2299d9fa89ae901e3f5c67b79a727</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yt</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>55e99cc007cd4c7a3c0abe4f70f7d2f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zx</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>956da11b48e233ba8dc70e7c927ff734</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zy</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>968722b1479e9c7db73487a92a5425a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zz</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>a5489929e2cc3fa4715b52d02f32ccab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zt</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>784bdfd19cc76cf7256c0669a84debe0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tx</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>9bdb06a10f594ebc9e9740255fe60db4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ty</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>dda08cdc2d92a040a8ae3ef0f3422bfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tz</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>c3956fa38efe7472cd62e0046ba73b4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tt</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>77ebb2ebf5f29cff44e2fa122adcc95a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col1</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>6d9de8d0da23a449e6cb483f2df4dec5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col2</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>caedc263491ac940754a8915d3e09cde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col3</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>c4726f764e3f27022826be92e6de464f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col4</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>a17847d71f6363a95a87431d3eb89a36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row1</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>6dafb8822f097c4c6590b9a84d6ac576</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row2</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>9b09d3d43087872ab65b23581773ff3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row3</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>1b292e64c908b8c219e71e17d98152c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row4</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>3311a77435285f3e488bf0577f55d384</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRep4x4</type>
      <name>rep4x4</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>e4f045ca739ae2a5e25d18e42fb9c4a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRep4x4Symmetric</type>
      <name>rep4x4Symmetric</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>50026b60f6a0f398009ea2b7f694b867</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>43b84c6b0cd9530033b3224f58dd4663</anchor>
      <arglist>(HepRotation &amp;rotation, HepBoost &amp;boost) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>33591bf40fe27269dc4a0a918957bbf1</anchor>
      <arglist>(HepAxisAngle &amp;rotation, Hep3Vector &amp;boost) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>f032a4e10f09df0f920fe427c31d5f13</anchor>
      <arglist>(HepBoost &amp;boost, HepRotation &amp;rotation) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>fc0814d186ad5533287239e95a941d4c</anchor>
      <arglist>(Hep3Vector &amp;boost, HepAxisAngle &amp;rotation) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>6afac23d7e2626c3edd4dc4665d4a613</anchor>
      <arglist>(const HepBoostY &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>a721b52a5aca93c2b9ef0c05a8a0c8c2</anchor>
      <arglist>(const HepBoostY &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>bb02dbb0a1f84c62f5c8442d31a8e6f8</anchor>
      <arglist>(const HepBoostY &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>5f06795101db6db8990ed7586cbce110</anchor>
      <arglist>(const HepBoostY &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>86b818df1b205dbf123603d788bf46bd</anchor>
      <arglist>(const HepBoostY &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>8b551cfb40c61649fbf3ef6ed9551abd</anchor>
      <arglist>(const HepBoostY &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>bd695e80c2cd5df25533198af613acbc</anchor>
      <arglist>(const HepBoostY &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>7e3fd3c0be3cef2f2355e56fc7408d08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>996c61ffc9abe6c5c6cf6afb6ac64964</anchor>
      <arglist>(const HepBoostY &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>4d74bdaea86db2459fa67fedc726a405</anchor>
      <arglist>(const HepBoost &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>837d9aebcd963eefa7edfc662dc986b2</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>2f4209251a58e52857cc5a6541c3eff5</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>6a960362eecf64cbe738b2251864f80b</anchor>
      <arglist>(const HepBoostY &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>287d57a7cee650f0266fa05adb2f4762</anchor>
      <arglist>(const HepBoost &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>7acc5d58f9dc576e35e144be5277f2ca</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>661dbd88ed7e68ee92100ec8010f5d6c</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>683f288141511b59a38471812670362d</anchor>
      <arglist>(const HepBoostY &amp;b, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>85e7e7a9836d3dcafd181d509230e0e2</anchor>
      <arglist>(const HepBoost &amp;b, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>004de586bf4e0c7d0175e61b41439907</anchor>
      <arglist>(const HepRotation &amp;r, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>1927d40c2ae0eaa89b8cd172c65c98a4</anchor>
      <arglist>(const HepLorentzRotation &amp;lt, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm2</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>b52ddb5453d893b07ac3bd59559c5bf9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rectify</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>9d6c58fdd55809909df199b05ac342e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>dc3f4776b6cad143e24706dfc9fbf52a</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>ecbbf53086951a0a4767ddbfcd4a7f2b</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>HepBoostY</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>597d2e0ba568c60f642ef8e0a37a44e7</anchor>
      <arglist>(const HepBoostY &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>816884c3d7eedfb5016b6ccd4840db18</anchor>
      <arglist>(const HepBoost &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>fd6b428cb6dc41c36cdb486135060ddd</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>c30febb74bdc787a58bfc3594705ee14</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>HepBoostY</type>
      <name>inverse</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>741409238005f8c78f9e939eea3700c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepBoostY &amp;</type>
      <name>invert</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>4147710936cfdadf261ad3cf000024cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>451a1d650795d05ee8772885c1e760ac</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getTolerance</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>8beee116bd61e6eabfc131a970d5870e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>setTolerance</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>a77f6023fdea21bf4085bc5e52686ade</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HepLorentzVector</type>
      <name>vectorMultiplication</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>fdb9e00aeee21e7531f839feab0af18e</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HepLorentzRotation</type>
      <name>matrixMultiplication</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>a5a2510f3dfa648df44d38c393cb5bea</anchor>
      <arglist>(const HepRep4x4 &amp;m) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HepLorentzRotation</type>
      <name>matrixMultiplication</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>fe0c892fabf84438748166dfaa45d8e3</anchor>
      <arglist>(const HepRep4x4Symmetric &amp;m) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HepBoostY</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>61254e9b3ba5498cffd24bfd24b5f9f2</anchor>
      <arglist>(double beta, double gamma)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>beta_</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>a8b382bef8c455abad2b26e65350c4d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>gamma_</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>6fd43dd36e61a8ce2582a58f73d0ce46</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend HepBoostY</type>
      <name>inverseOf</name>
      <anchorfile>classCLHEP_1_1HepBoostY.html</anchorfile>
      <anchor>794a9ea152af7ad041f905bb7e1e1977</anchor>
      <arglist>(const HepBoostY &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepBoostZ</name>
    <filename>classCLHEP_1_1HepBoostZ.html</filename>
    <member kind="function">
      <type></type>
      <name>HepBoostZ</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>e07bb80468d6a664564db4747b8aa5fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepBoostZ</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>da8fa9832a52a953e68c95fdcf4d7446</anchor>
      <arglist>(const HepBoostZ &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>HepBoostZ &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>267baf516e2f41b0c9cdf705209f0376</anchor>
      <arglist>(const HepBoostZ &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>HepBoostZ &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>d5d069611a0c2d8dee4d94d1a0797ecd</anchor>
      <arglist>(double beta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepBoostZ</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>df38207efeec4cb11a2fa9d6bb8d472b</anchor>
      <arglist>(double beta)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>d51acca1ced59cc24fb4aa164ee3e758</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gamma</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>40fa20f4eb9c6e966d5b0b89f7fc217c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>boostVector</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>ef81201d0d5d19b05b0c6b0f81460536</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>getDirection</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>148fde5958d67ed02b46db6238e9edac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xx</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>ba18be4e4570b73339489a0666aad2c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xy</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>62927c1f0ed8b1a9d1484b1e3b66b66f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xz</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>20ea625c77e3bbde11bd25e19ca58b1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xt</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>53eb505e40a7b1592346e1f686124369</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yx</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>65e95930be83747101acaae775037976</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yy</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>556dc918145e0e82da0863c381c9c7b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yz</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>2a531bd181ad0e5030e9ab0b81e783ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yt</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>e74f24b0331b9c64d957e70515796a64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zx</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>1a940da9b2449ba5a08ef007483a1393</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zy</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>9aa824912508588ea262aee6c3e7d43f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zz</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>3d7af9618f61a11ff4ad6dbd22ede6c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zt</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>113e89d710fa24fdf978dc9f023e386a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tx</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>e5c3cf97df190b96b20090df1df57625</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ty</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>6dc8c458888686302f111a55c1028d6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tz</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>5ca53a0688617ddb06d728f50e03c627</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tt</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>2a44ddd0405b96bdb7f2a7cda0797f7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col1</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>64330df9d7ce7d7f4fc1b2773736dc75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col2</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>dbaa48bfc76b178f8bb471e97f6df714</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col3</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>2abcb063c808406e2d00260ff46c02d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col4</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>b192c624cb7c73ef813073eec7db4035</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row1</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>a1a9fb4e849a5574c7f18f9e6cd019fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row2</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>f1379d5ed71c0c16408f4f7e58c71829</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row3</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>15033e23daf1309eed79a7ca6b330d23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row4</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>5dc1722b6c4fcbf664f06f2e3d33928c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRep4x4</type>
      <name>rep4x4</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>09e33609c9bc3f8c9b5b77ee4eb219f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRep4x4Symmetric</type>
      <name>rep4x4Symmetric</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>39996a1b8ddb4af79ac1600988184c2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>636d9308a0f98344810b90e1c3857327</anchor>
      <arglist>(HepRotation &amp;rotation, HepBoost &amp;boost) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>dda86384a7cc2b87ab38069752781835</anchor>
      <arglist>(HepAxisAngle &amp;rotation, Hep3Vector &amp;boost) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>28c3947344b20a932c4a7a96d5394e0b</anchor>
      <arglist>(HepBoost &amp;boost, HepRotation &amp;rotation) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>30de8963dbdd59c18ea18e6ae7cd6eec</anchor>
      <arglist>(Hep3Vector &amp;boost, HepAxisAngle &amp;rotation) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>2d5cc7e771c9ef682731a4280f66f842</anchor>
      <arglist>(const HepBoostZ &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>f9b78a5c0128280f0ccfec17a9958bc5</anchor>
      <arglist>(const HepBoostZ &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>ac79efd138418abeec0d40d5215014e1</anchor>
      <arglist>(const HepBoostZ &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>3d4fc2d158242333460b0822167b4c1f</anchor>
      <arglist>(const HepBoostZ &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>2f7e4a113131e0072b69733bef0a8d73</anchor>
      <arglist>(const HepBoostZ &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>3d32dd2513d490ab8354302a73f329e8</anchor>
      <arglist>(const HepBoostZ &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>3c00b50e3fdf1168430354236ce31d28</anchor>
      <arglist>(const HepBoostZ &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>6b04a6a5063afe65849984f6892ba8bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>b5392247e81799f72a9e6af56774a57b</anchor>
      <arglist>(const HepBoostZ &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>d09ca9268b0c9108ae66e2d75a86b2f1</anchor>
      <arglist>(const HepBoost &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>0999b1ab594ff7d5968b95f44a31d355</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>d00c0c6438504efdb9a859a733a12e94</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>cadd37a0591758c18ca7065491475111</anchor>
      <arglist>(const HepBoostZ &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>92b3be15eb4e4c69561dee1b1eb59708</anchor>
      <arglist>(const HepBoost &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>e78577204b8e7fc2638560e3f4aa4f71</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>8af92550223dae178c0f469999f6b9cc</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>e060b06ae01579daae64a4424ff0f44a</anchor>
      <arglist>(const HepBoostZ &amp;b, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>da90c1635c1f4d83557b0942d4bb3a93</anchor>
      <arglist>(const HepBoost &amp;b, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>e3e094e0c2f56f1689ba51201f99a1b4</anchor>
      <arglist>(const HepRotation &amp;r, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>3835a81a30b6a812be9bede8b3abd16a</anchor>
      <arglist>(const HepLorentzRotation &amp;lt, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm2</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>46d738a75147bc0364c41b2d15a19ea4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rectify</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>e06692448c5076c8c6a22fa290fa3606</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>6dc941177d848cd50b3260836f26df46</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>88ffe75edf337c3954d8295efe3f8991</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>HepBoostZ</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>a5eb6ac7c5e312fddd9f0e4cb44425fe</anchor>
      <arglist>(const HepBoostZ &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>e9618da367a24399ae7bb7c382a49246</anchor>
      <arglist>(const HepBoost &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>23b1599191daa02faa089557daf57d38</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>f83f67832092c37458c6b13ef79308d5</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>HepBoostZ</type>
      <name>inverse</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>775283ae00c61812c3995acb5a9dff33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepBoostZ &amp;</type>
      <name>invert</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>fd70faf0f7b88615f074eccd653708e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>240614e1b9cb0744c6afe9ac13e189ee</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getTolerance</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>dbf10e525a6b195b45d7790716b28b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>setTolerance</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>3a472a1e287b70cb4b1f01b39eaa2583</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HepLorentzVector</type>
      <name>vectorMultiplication</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>53e16fb033af74a6c4c00062bd07de74</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HepLorentzRotation</type>
      <name>matrixMultiplication</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>fe01004b8a27d97869c5351ef30d81c6</anchor>
      <arglist>(const HepRep4x4 &amp;m) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HepLorentzRotation</type>
      <name>matrixMultiplication</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>db019cc666c5d9177e68c3e575dfc9f8</anchor>
      <arglist>(const HepRep4x4Symmetric &amp;m) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HepBoostZ</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>6faf963345d50b683de4879c81594d10</anchor>
      <arglist>(double beta, double gamma)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>beta_</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>cb215bf6ae4c70086b364db2dfb43ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>gamma_</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>db1bf0ec9e4e1d333a937153848c1c85</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend HepBoostZ</type>
      <name>inverseOf</name>
      <anchorfile>classCLHEP_1_1HepBoostZ.html</anchorfile>
      <anchor>8d8cc1f72c4ed09cca8d5a13ff2dcb8a</anchor>
      <arglist>(const HepBoostZ &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepEulerAngles</name>
    <filename>classCLHEP_1_1HepEulerAngles.html</filename>
    <member kind="function">
      <type></type>
      <name>HepEulerAngles</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>d58f73bf2079cde3bd654865fe155e91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepEulerAngles</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>e4de5074dadccda38fe40d29ae3cfe78</anchor>
      <arglist>(double phi, double theta, double psi)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPhi</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>d460bca5f9deab7a79a8ac369f363b80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phi</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>f285ddf071d5adabd9ed4ee532b99c4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EA &amp;</type>
      <name>setPhi</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>2071b260118352e318b68d66314309a8</anchor>
      <arglist>(double phi)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTheta</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>e447f34a1e6129b973ead88d064ae03c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>theta</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>d19faba80283d8efec9e2799bbd104c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EA &amp;</type>
      <name>setTheta</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>d07335783e60104f1f90de09788cfaa8</anchor>
      <arglist>(double theta)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPsi</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>20d37fee7d1c1b5566b2b8b3f26d65fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>psi</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>24067ef936bd0f927fa59462e34efea0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EA &amp;</type>
      <name>setPsi</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>b78051cfe986f6f5e3bc75e16eda5d97</anchor>
      <arglist>(double psi)</arglist>
    </member>
    <member kind="function">
      <type>EA &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>5f9d0150f8abcc236f0a0e54a044bdb5</anchor>
      <arglist>(double phi, double theta, double psi)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>192f668f6ba43edbbee2b9108b8f2ef7</anchor>
      <arglist>(const EA &amp;ea) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>dae5ff0df350f49ef38dc135412d75e2</anchor>
      <arglist>(const EA &amp;ea) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>bf35386e54235b131b61aafdfd33c42e</anchor>
      <arglist>(const EA &amp;ea) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>1f3d17944b204e2ba0e9658c304fd8e8</anchor>
      <arglist>(const EA &amp;ea) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>1326d38486bb2f8cb93d8fa2ff2bdb17</anchor>
      <arglist>(const EA &amp;ea) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>8352d9633b6199f91336cef79205ab07</anchor>
      <arglist>(const EA &amp;ea) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>8c00118f519668ec6e382005abda3b99</anchor>
      <arglist>(const EA &amp;ea) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>16a63dfc9c3b3b3e7ad2dee6f48dde26</anchor>
      <arglist>(const EA &amp;ea, double epsilon=tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>d636379b654ca63ab64ce6bca4829958</anchor>
      <arglist>(const EA &amp;ea) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getTolerance</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>cdc92bb735513da4edb921f65882d321</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>setTolerance</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>0835afe6df9ecf6cf94c4a583d634cb2</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>HepEulerAngles</type>
      <name>EA</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>19d8c643a349114f0e525c962d9d9b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>d4335487510f3f86e9970c3669e84049</anchor>
      <arglist>(const HepEulerAngles &amp;ex) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>phi_</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>a4778392f549383cdc7dda178b66d529</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>theta_</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>7013051c8e56a42daf52cc3e3bfe1df9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>psi_</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>bcbcef3f7d9749e0ce0dcd6b44ef6c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static double</type>
      <name>tolerance</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>ad14f02ee50055bab1a6fe3d1beb8688</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>8d33fa9851d45df539ee2f6fb27f860a</anchor>
      <arglist>(std::ostream &amp;os, const EA &amp;ea)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classCLHEP_1_1HepEulerAngles.html</anchorfile>
      <anchor>0719c123fab75f4b20d03ef03faf0b7e</anchor>
      <arglist>(std::istream &amp;is, EA &amp;ea)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepLorentzRotation</name>
    <filename>classCLHEP_1_1HepLorentzRotation.html</filename>
    <member kind="function">
      <type></type>
      <name>HepLorentzRotation</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>f96a53573ca338b56dd5030d8945bbdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzRotation</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>5ae9f6f445fee1830b5b346d23a17642</anchor>
      <arglist>(const HepLorentzRotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzRotation</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>8505ec32fa5d305f4e410ce1a6ce2b97</anchor>
      <arglist>(const HepRotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzRotation</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>baf9614e4469ee38a3d4b72b493ea612</anchor>
      <arglist>(const HepRotationX &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzRotation</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>f12fd91fd35f83ffeae04711c9439e67</anchor>
      <arglist>(const HepRotationY &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzRotation</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>d197dd9250cc19433179575c11fa139e</anchor>
      <arglist>(const HepRotationZ &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzRotation</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>9720605aa339c0f6039f704111bace12</anchor>
      <arglist>(const HepBoost &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzRotation</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>45ad66f2d5744a73f9659d7ff792d014</anchor>
      <arglist>(const HepBoostX &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzRotation</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>8fd5c6d45bea9fd1eff05c4089944ada</anchor>
      <arglist>(const HepBoostY &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzRotation</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>2d5cab3139da3d8f33b3aa14a90ef3d1</anchor>
      <arglist>(const HepBoostZ &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>94b45c76f7fd927ad3c78dd4b89d2f36</anchor>
      <arglist>(const HepLorentzRotation &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>e3ba58581ab9fd4cec4ad42c0d0e5af9</anchor>
      <arglist>(const HepRotation &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>8120f3d59c95a1c969fca801eac77bd1</anchor>
      <arglist>(const HepBoost &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>f563d40818c98cf412ce0ad718abb1a6</anchor>
      <arglist>(double bx, double by, double bz)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>2a3c98248d9531342aab6b814eb148b0</anchor>
      <arglist>(const Hep3Vector &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>5946c46f4e0cad34d61d25718bd161b6</anchor>
      <arglist>(const HepRotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>131bfe1f76b65f4909d45dfc74047979</anchor>
      <arglist>(const HepRotationX &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>6430b1cba9a10ed774d952721eef4774</anchor>
      <arglist>(const HepRotationY &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>dba0e12c8193e42c5d97aee1bd1b9822</anchor>
      <arglist>(const HepRotationZ &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>91edd6256b5c5dd978bedc5dd190d791</anchor>
      <arglist>(const HepBoost &amp;boost)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>80f37138c1114782ecc4842042d68191</anchor>
      <arglist>(const HepBoostX &amp;boost)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>5d3c80dee9df8fd93a9f585f432974e9</anchor>
      <arglist>(const HepBoostY &amp;boost)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>a641fb7a98bcaac5c0270eeb228f14dc</anchor>
      <arglist>(const HepBoostZ &amp;boost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzRotation</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>4c4b2a96fbef9dd1ebd35d8179767c17</anchor>
      <arglist>(double bx, double by, double bz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzRotation</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>1ff8fc1c30d9b77ab0b075e7e4d3814d</anchor>
      <arglist>(const Hep3Vector &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>1b8b3122d009139811ed6e69a3609cc1</anchor>
      <arglist>(const HepBoost &amp;B, const HepRotation &amp;R)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzRotation</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>f56286c76817b39066871708cd5ee276</anchor>
      <arglist>(const HepBoost &amp;B, const HepRotation &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>b4bbdd9be0175d7b2b0be6a6c6df9129</anchor>
      <arglist>(const HepRotation &amp;R, const HepBoost &amp;B)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzRotation</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>b910f5226c58bc35231c812bb568639f</anchor>
      <arglist>(const HepRotation &amp;R, const HepBoost &amp;B)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzRotation</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>84e0001b0812eecafb577002016c84f8</anchor>
      <arglist>(const HepLorentzVector &amp;col1, const HepLorentzVector &amp;col2, const HepLorentzVector &amp;col3, const HepLorentzVector &amp;col4)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>652a3cb6fb63c7134d7aa3eefb55564b</anchor>
      <arglist>(const HepLorentzVector &amp;col1, const HepLorentzVector &amp;col2, const HepLorentzVector &amp;col3, const HepLorentzVector &amp;col4)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>setRows</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>6e7b2c11271134db03ee7162a71540e8</anchor>
      <arglist>(const HepLorentzVector &amp;row1, const HepLorentzVector &amp;row2, const HepLorentzVector &amp;row3, const HepLorentzVector &amp;row4)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>910f9345c8eb1516d41c0b141674377d</anchor>
      <arglist>(const HepRep4x4 &amp;rep)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzRotation</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>0946f408c7e5060b6ef9ff178c39d751</anchor>
      <arglist>(const HepRep4x4 &amp;rep)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xx</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>01ee6e92040a23dec810aa847d827c45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xy</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>cd5e780079cc41c9735db3f7a126af99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xz</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>d24fcbab17e71afbf7eb0a8d87d89fb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xt</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>3ee40e02830ba36252039c439fbff86e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yx</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>8896c27415e9bc79f67c3fd1f2faf9b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yy</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>673f57f04593244151e4eca7dc6c0776</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yz</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>273eca5ab4ef27278466665d6a3ae109</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yt</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>a476ed0f4ec28b104dbff83a64cc4770</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zx</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>7795d921695130faa56c16cc0014e8d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zy</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>a7b8d014e7cd0330c284e2b17307df52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zz</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>c81b7f5a9127c0e8495ce765b51977cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zt</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>5738094a25c013466a954cdb39264081</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tx</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>c1a54f671083134c08ed8018a10edc32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ty</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>ea990ebc5eae49502c0918fa7c17f64c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tz</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>7d498fd7527c74d7743e7709fe8bc3fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tt</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>c9b08ba0e036985922c1d4396ee79d86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col1</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>cbee362780e1ef72427197b65f85a605</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col2</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>cbd7a8eadd0b08bf4fc1aa1cb86249eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col3</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>d468d500462d58888dcbe5d38ce37794</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col4</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>28dd829e5ad87c265ffdaf8c15af9348</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row1</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>9995040c7a269d516dfaa96d22701b8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row2</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>c16bd49002e3b5698957cb66aec38382</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row3</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>f1026a80b70dccb79a8772c54ee0cabe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row4</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>4ef069ca7550182d188c7a7deb5c5a54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRep4x4</type>
      <name>rep4x4</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>63b167d50e430a68de9945f841682232</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HepLorentzRotation_row</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>1ebd8c344c38eafeb7e65e6684d6a3e2</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>88e09630d24ec362811d47a7ceff81a6</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>2eb91497ccd3dfd7fd4997e202b4d31d</anchor>
      <arglist>(Hep3Vector &amp;boost, HepAxisAngle &amp;rotation) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>183a1ebb9a9109762b4e7211328e5cff</anchor>
      <arglist>(HepBoost &amp;boost, HepRotation &amp;rotation) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>e55ba2f2baaaff351e4dc39f87e03c93</anchor>
      <arglist>(HepAxisAngle &amp;rotation, Hep3Vector &amp;boost) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>42b68025394e621d20ef1fc6ee5ffb96</anchor>
      <arglist>(HepRotation &amp;rotation, HepBoost &amp;boost) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>67da5c4931d4a920191344996339726e</anchor>
      <arglist>(const HepLorentzRotation &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>4474721bea52f222da500b3493aef39b</anchor>
      <arglist>(const HepLorentzRotation &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>aea5e1bcb528cc61a8711c4052926ec8</anchor>
      <arglist>(const HepLorentzRotation &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>52556df94388b3a9f179dedf6c18d94a</anchor>
      <arglist>(const HepLorentzRotation &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>7c7b404bffe7e20ea2edb002f34fc499</anchor>
      <arglist>(const HepLorentzRotation &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>dea1d51f30c1b95fe2cfcc5724b4070f</anchor>
      <arglist>(const HepLorentzRotation &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>82a101d2b77dfb852e780420399fc674</anchor>
      <arglist>(const HepLorentzRotation &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>9b3450eee5e9ad2fcf398fa86ff897f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>64fc6aa1266e11964c7760a2fae07aeb</anchor>
      <arglist>(const HepBoost &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>305ad2bcf5fcaec63f5b36c64c4ea2d4</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>88b547d97f565bbb8f1b1b612e440112</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>50ab6e18c027d1a63698940a6ccb0cd8</anchor>
      <arglist>(const HepBoost &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>30c6ab8fa77323a6eb91e81d2a9edf65</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>852263183cdc4ff719c951bfd6eeee7e</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>7e84ded52c31f167fec8cf89f7863652</anchor>
      <arglist>(const HepBoost &amp;b, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>b45eeefd3d4224d8140bad0977b09d70</anchor>
      <arglist>(const HepRotation &amp;r, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>9d73c4e33b362da7c4eec9caeb93d712</anchor>
      <arglist>(const HepLorentzRotation &amp;lt, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm2</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>d71f7b3c2774237e8dda1213b49212a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rectify</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>dbea4f08416864194b36406d3d7baeab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>vectorMultiplication</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>b2aec9e6a2f71ad46341547da99022e3</anchor>
      <arglist>(const HepLorentzVector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>8e7e968d8f5deaaa532970f10edd55ed</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>80407ce80392dfea9d2f6d204cfb6672</anchor>
      <arglist>(const HepLorentzVector &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>matrixMultiplication</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>428448422b33e2e5404525ac29237875</anchor>
      <arglist>(const HepRep4x4 &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>30d5a03ec6a41f5cf6431e70d0608f91</anchor>
      <arglist>(const HepBoost &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>a630fc1a2918f31dd591dfdbce3755c9</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>d6ecd31ac26bda9eb7a186d85f850a77</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>operator*=</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>379d9626334eca61b3e95b57b8b34526</anchor>
      <arglist>(const HepBoost &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>operator*=</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>646167cd91024020543174e9df4aa781</anchor>
      <arglist>(const HepRotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>operator*=</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>41805f23a9c4a8947bb9dd92a49aaabb</anchor>
      <arglist>(const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>transform</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>ef64620d94e6eadb480ad017061227c8</anchor>
      <arglist>(const HepBoost &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>transform</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>d71ee8fb6a4323608432c7aac6231a95</anchor>
      <arglist>(const HepRotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>transform</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>3c9589f3cbaab4671dc8c7d5f1f40b61</anchor>
      <arglist>(const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>rotateX</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>210e2dadafcc04aa3ceb3cecc07bae4c</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>rotateY</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>79a5238c68bdfc6b9c641d8d0390d971</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>rotateZ</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>16733db8bb67523310fbd70fbdc06bfc</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>rotate</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>9a1278e7c1d10fd263dec7d516e55d70</anchor>
      <arglist>(double delta, const Hep3Vector &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>rotate</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>72b6eb29091dd312af25431f772d6fcd</anchor>
      <arglist>(double delta, const Hep3Vector *axis)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>boostX</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>6f64167dccf2e61b9f3ce7431780c9a6</anchor>
      <arglist>(double beta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>boostY</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>512d752ab3328d382ad28074d8876a68</anchor>
      <arglist>(double beta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>boostZ</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>c8f842fb5f319a80ad7d9163dca2365b</anchor>
      <arglist>(double beta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>boost</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>738b2f6e2f950055e2a6e0e32cfdad6e</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>boost</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>6510ae4f3fdd4333e5f7a03e8ba9df60</anchor>
      <arglist>(const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation</type>
      <name>inverse</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>8d5791aba953b45eb1779e3c4a7a8cca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzRotation &amp;</type>
      <name>invert</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>ff4c7dfd6b232a3d829320a0ead2f6a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>a3b2a894d6f17de8035667f1fb15f976</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getTolerance</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>e726a07be60bc30b64b1fbc37eaeedfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>setTolerance</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>2c84a512bec3beb68cfa0616da35cc1d</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const HepLorentzRotation</type>
      <name>IDENTITY</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>018118f30c5eae7c040380687359526e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HepLorentzRotation</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>cd2d71efc0840e3e4676f4af7e811c8a</anchor>
      <arglist>(double mxx, double mxy, double mxz, double mxt, double myx, double myy, double myz, double myt, double mzx, double mzy, double mzz, double mzt, double mtx, double mty, double mtz, double mtt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setBoost</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>22781a864e8fa01baea16f24f2d27e69</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mxx</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>96937255ddece44aafcefc7418839ea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mxy</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>ee16107609e44ea746b96e0891af8855</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mxz</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>d5875fa076954e482e4051ceba6d0d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mxt</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>2619e2a9b5142a357c2f56350bb6ca56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myx</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>cc7a1a9d3c46191fbec024449dceb3d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myy</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>48792b1c1b69886b40d8c1945aa85f4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myz</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>49abd3a87aa778b607d8b0d3df96cb67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myt</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>8e3126685f0ec624ee34aae320ae3b56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mzx</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>5c6c4ef638c546dc32434000f6720794</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mzy</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>bf8032e041e7d5c4e8557d25a516bc40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mzz</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>7cfb487115368c091a987627d83e4e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mzt</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>3c36676939004093e72680912cb29afd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mtx</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>8051b202a1df413171bac386921dfda8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mty</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>71ff81b0db0fa82fa82558af1ebddaf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mtz</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>aef9cf76b61a1168570edcb23e22fed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mtt</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>e5fbdded29c69c09491094ec0095ad77</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend HepLorentzRotation</type>
      <name>inverseOf</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation.html</anchorfile>
      <anchor>b8a48f977d5fcd116c251221cb4d0894</anchor>
      <arglist>(const HepLorentzRotation &amp;lt)</arglist>
    </member>
    <class kind="class">CLHEP::HepLorentzRotation::HepLorentzRotation_row</class>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepLorentzRotation::HepLorentzRotation_row</name>
    <filename>classCLHEP_1_1HepLorentzRotation_1_1HepLorentzRotation__row.html</filename>
    <member kind="function">
      <type></type>
      <name>HepLorentzRotation_row</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation_1_1HepLorentzRotation__row.html</anchorfile>
      <anchor>a840ab2cc1dd39091182f68e8aca6f3e</anchor>
      <arglist>(const HepLorentzRotation &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepLorentzRotation_1_1HepLorentzRotation__row.html</anchorfile>
      <anchor>81034391a126d9b5958f7f5df5707043</anchor>
      <arglist>(int) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepLorentzVector</name>
    <filename>classCLHEP_1_1HepLorentzVector.html</filename>
    <member kind="enumvalue">
      <name>X</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>5aff3e40d55be2cf5b683638e128e0b72770e39d6bd2879a1638680056aa9d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Y</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>5aff3e40d55be2cf5b683638e128e0b70969b1feaebce5898efc1dd5c4a20e51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Z</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>5aff3e40d55be2cf5b683638e128e0b71a6b2615677ae5b6cd48e24644b0a71d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>5aff3e40d55be2cf5b683638e128e0b75f1efe60d2b2ad9d1dd72ce83169b19f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_COORDINATES</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>5aff3e40d55be2cf5b683638e128e0b7cfc90f427a15bf06907f434ea78c6cde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIZE</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>5aff3e40d55be2cf5b683638e128e0b77fbad9676d2e1ef934b4be8cad29a49a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzVector</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>d8e108e62298c958a86cbc72adb9b98c</anchor>
      <arglist>(double x, double y, double z, double t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzVector</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>404fa979244fa6c4b39f3e95a27a4104</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzVector</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>b57399afaaa20552c00385bfae032532</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzVector</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>68fbb4e846d99a4c02e5403586587bc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzVector</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>30f57f9fd7f8f3572fbe7631b204524a</anchor>
      <arglist>(const Hep3Vector &amp;p, double e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzVector</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>df712bc002e06a29b50a25defe1d0d6e</anchor>
      <arglist>(double e, const Hep3Vector &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzVector</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>078175b0a1140b2d389378ad8d1b50b5</anchor>
      <arglist>(const HepLorentzVector &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HepLorentzVector</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>4ca62253ea6e60551541e7de3b8badb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Hep3Vector &amp;</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>bb23cf8f080a749c60130325b161e55b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Hep3Vector &amp;</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>8debd3fc9b0581f927f421028d2a0bbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>7accb6710e359a0604df1d119897c429</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>566eaa8184d633b794c069a992054435</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>1df65728ae62f00bf0a9b6991ae4f042</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>t</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>26d2f326469362cf94bc37bb44ed86b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>61313d9dd9f51f22648b240faeb7fb52</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>886118ed8fc9a74077bbb5f8dcb9197b</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZ</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>7ec2e14e832b7f130f06ee01dab1a91c</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setT</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>2727b73674ab15740d38156ce6903aa4</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>px</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>42ea7f1d3b864efbd2c3da5a5642625d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>py</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>a5339620739d73bedfdd848824221d55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pz</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>a4446a4bb6a0196882d9144c4d011143</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>e</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>f7bc7b339695350b833e78b55270db0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPx</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>d72591ce73f06503672bd795ce4b9e29</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPy</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>c698c1fe276017763ae7312ac5b82194</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPz</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>a7793128474258cd24dad6ddceb99059</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setE</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>a2aed47867506981fc03c8b35a4c2488</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>vect</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>609a46bf7d9e939b077bbf539090fdcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVect</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>c7c41120b3f161085e8ee97d18184ff9</anchor>
      <arglist>(const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>theta</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>fac07379c4bf6003befadb2158eb2206</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cosTheta</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>20c4972cbf754fd6e2db33324bc19719</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phi</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>e5a4ec2a5d079ccca896e7d71a52fffc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rho</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>c8e5a617ac991b6794d1271dac972a76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTheta</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>a0799b04624fa4af028aebbe14e57eee</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhi</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>b2b45980203509a0a8f4ea527a33cfc4</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRho</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>1069032d110c51fc5fb1f61a5fcbc8ea</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>5afc616ae358c4218557e9f59c943b75</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>ecaa090b03e8be83ad191b060620500a</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>5cac459ded04b2addac45305f4615277</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>c66222b15610c4ab65e04372296a6449</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>f9fd026262ee49880b7357c09138d91e</anchor>
      <arglist>(const HepLorentzVector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator+</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>8243ffcf01281f3a32fc2f2c6e0a178b</anchor>
      <arglist>(const HepLorentzVector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>operator+=</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>b17c177611b45ede6e9c4c7b2e2c5c64</anchor>
      <arglist>(const HepLorentzVector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator-</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>b7914413c631c3ac09b4386b725ff310</anchor>
      <arglist>(const HepLorentzVector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>operator-=</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>85ad438ead5b7b8e2ff91d902fb5a101</anchor>
      <arglist>(const HepLorentzVector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator-</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>026713201a7464bc84a0c7cfaee30073</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>operator*=</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>696d1e62a9376b0756a15b5cb063ebe3</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>operator/=</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>39d5441bd75d7febacbc1bd18bdb17a9</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>4b41c386a69edeea9c445062fc0f33c5</anchor>
      <arglist>(const HepLorentzVector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>447e3007b104d71925d67d6bcc609b68</anchor>
      <arglist>(const HepLorentzVector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>perp2</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>704c7771b034d2e702fb7a8525ff11e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>perp</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>7efde0f46351773c28bbdfaddf95fa00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerp</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>9cd34add578de4d40d2a9ccde4d975c0</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>perp2</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>fa419968ae39e9c10ce395a2326c5495</anchor>
      <arglist>(const Hep3Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>perp</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>cd18a44fec7e147d94010a1a92945815</anchor>
      <arglist>(const Hep3Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>angle</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>f83aff50e29ce2b5c7a4567f1c57f9f4</anchor>
      <arglist>(const Hep3Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mag2</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>e95e6d401d4a4bc9b08b081cde75caea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>m2</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>589359d2820cc8abbada31aa4245ae7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mag</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>08ea2b7ac45f401f3a2f403b4572c614</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>m</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>04b2e4d17ab720ad641de5ed16682dc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mt2</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>2e4170b5a831430711eabfea0fe7320f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mt</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>226de3b6eb3cd7f6ac1bf7b50d75eb5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>et2</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>00d8e07650f319a3b3bd9c6f607043ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>et</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>eeb1def7b217c0c87d2ddf8c610e5894</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>f4a8349af8e03c13b653f8c26f0615c2</anchor>
      <arglist>(const HepLorentzVector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>e0dc938b9f600e1a5138ae5d0abbc14d</anchor>
      <arglist>(const HepLorentzVector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>invariantMass2</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>f7c9cc5b4f676ce7d41877aa8575b07a</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>invariantMass</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>ccc7d1bc2a0649ee80af28a7ef63cd94</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectMag</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>8599f57eba5597fab813f487e28a6bf6</anchor>
      <arglist>(const Hep3Vector &amp;spatial, double magnitude)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectM</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>3c774ae8eb5b5a7368be99dc2c3309ff</anchor>
      <arglist>(const Hep3Vector &amp;spatial, double mass)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>plus</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>8a37ba59a46300bd80f91e67042a0f23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minus</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>d67d7045ca803b5680745493b8aedac7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>boostVector</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>4bf2074d0469443c61ccac560657d114</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>boost</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>ef9286f1db798d2599af8fed59994da9</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>boost</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>2039ae753139c31ec9a9507cb7061ad2</anchor>
      <arglist>(const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>boostX</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>0b6ba467d05f9c69e1eaff6bff7f5e5b</anchor>
      <arglist>(double beta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>boostY</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>5a311ab6c4ba1ecdbc51074143534ac2</anchor>
      <arglist>(double beta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>boostZ</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>77cf3e6e6c9162d789d9d61560bfce7f</anchor>
      <arglist>(double beta)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rapidity</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>0573f49735d48baed0f4b8ec387c09e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pseudoRapidity</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>aadee49fca2f2b6019ecc25176479dd5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTimelike</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>684774a0c7dccdda85ba2a721fc9917e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSpacelike</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>9eb2c20707a13bd26e81d5d067382a6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLightlike</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>67db7815b90f608a1e9a31e1866cb27e</anchor>
      <arglist>(double epsilon=tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>rotateX</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>1f8ba06a5e74ee5f9273d5042dbec0fc</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>rotateY</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>f972235538e8cc0ba45b07a4f62e4bef</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>rotateZ</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>50b86c98f62d6b6f821f721ee903d2bc</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>rotateUz</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>e33f540b8bfcbdf4126e07ea74eb5434</anchor>
      <arglist>(const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>rotate</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>09f74f0318d2ca002a866bb0017d1f3f</anchor>
      <arglist>(double, const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>operator*=</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>12194537e50466df9d5879e47be5cb7c</anchor>
      <arglist>(const HepRotation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>transform</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>fe02464b601bb406eef13bfa216c413a</anchor>
      <arglist>(const HepRotation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>operator*=</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>85f33868bb3cd34ce0d4aa2a1777698d</anchor>
      <arglist>(const HepLorentzRotation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>transform</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>82e6b4aa8d612dad84a9561a48523174</anchor>
      <arglist>(const HepLorentzRotation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>78d2152637be53ba770453507b374b02</anchor>
      <arglist>(double x, double y, double z, double t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>482f8092be1f318b03a95b59910fd28b</anchor>
      <arglist>(double x, double y, double z, Tcomponent t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzVector</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>47baac296d2d0f057953091191c123b2</anchor>
      <arglist>(double x, double y, double z, Tcomponent t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>563624ea9d1a9b15e91e01dc95e068f3</anchor>
      <arglist>(Tcomponent t, double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzVector</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>aefde38ff09a129ed3ba9133066fb824</anchor>
      <arglist>(Tcomponent t, double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>d53123e8896b619a8cdbba210a40ec18</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>edcff66de68e28dc32199c0483d36982</anchor>
      <arglist>(Tcomponent t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzVector</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>39602a8ee7f165867db750c01ebd2faf</anchor>
      <arglist>(Tcomponent t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>da772284e9a86c1ebbda4bcc2b0af585</anchor>
      <arglist>(const Hep3Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepLorentzVector</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>086c78b84e3566464f408a62ea705994</anchor>
      <arglist>(const Hep3Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>0d6c5583b1a02e19b77dbdf04f9f05e7</anchor>
      <arglist>(const Hep3Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>489ef55ef0a146434dad4d55a92322c3</anchor>
      <arglist>(const Hep3Vector &amp;v, double t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>aa6008377be5d4c2563e2e922e2d6911</anchor>
      <arglist>(double t, const Hep3Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getX</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>b908524f5dcbe95908e09d42f2da0917</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getY</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>4464651ac051cfd6df017523425f51b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getZ</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>a45219c4ce7ee756c6a5a3305f97a44c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getT</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>526e99a3795a8d353d5d0f9367feca15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>v</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>23d0413549d089eb3c440d29d9adadb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>getV</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>2cc6f4f987f14ed631dc059f6e8b3fde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setV</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>94aa8b2546295e4f61c3b5c2791fae28</anchor>
      <arglist>(const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setV</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>1c32b8a731a7f3223b32d826b7ed997c</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRThetaPhi</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>841456778d337bc09879364bfebb9687</anchor>
      <arglist>(double r, double theta, double phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setREtaPhi</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>d4032771547db1e225d5af45277e1d4b</anchor>
      <arglist>(double r, double eta, double phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRhoPhiZ</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>f58057d6273960e93659c91a3ec329ee</anchor>
      <arglist>(double rho, double phi, double z)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>5d99c72a6a24af1966e071abe2ca10fc</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>e7eab6e82b046ad8a2840425ce59ef07</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>738e5aeee36e82184172a0768e595523</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>f2aea231bf3c2d792f9611f2eef8d341</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>bf7c1f817ed84b3b029b7c6c129c5a2c</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>4c9f6f7e36b98bd18355c830aedf8c22</anchor>
      <arglist>(const HepLorentzVector &amp;w, double epsilon=tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>1f9244f325464f17d6808d296e542556</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNearCM</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>0b381e134180160fe42221920fe52c15</anchor>
      <arglist>(const HepLorentzVector &amp;w, double epsilon=tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNearCM</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>b448632865fe5e6b0cc139e45e0e874d</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParallel</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>d9989d460324b3ee35c194b039eeea75</anchor>
      <arglist>(const HepLorentzVector &amp;w, double epsilon=tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howParallel</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>fbdd75ede71324ec2ba1a44b188ca437</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deltaR</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>dc4e9624cab4a34173aba6b7f39eda3b</anchor>
      <arglist>(const HepLorentzVector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howLightlike</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>e5d93376ede017434977f2f70309f447</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>euclideanNorm2</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>949cb8840092177f22ca07c73298ad8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>euclideanNorm</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>2205dcf1c24fffa853e564d6c472038e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>restMass2</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>3f9d79afe78a2a9c3a2cb424d64335e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>invariantMass2</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>d9bead41bc075ae4b08693a66b2ceba0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>restMass</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>54cdb5f67f0e19ce82d6d1e4900d64a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>invariantMass</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>1b398b65fcb47ec5079ef067734480ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>rest4Vector</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>fa520b98441daf07fb75b812c30344e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>0eae6899229eb3b3cfa841c7203db34a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gamma</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>4552eb4c057ede9f2b728d323e99abb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eta</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>b342e3fedce8500ab44d51333280bdd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eta</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>55e439f6239c1938d8baee1533f04d9e</anchor>
      <arglist>(const Hep3Vector &amp;ref) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rapidity</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>85a71ee2432571b5e3101285a531daf8</anchor>
      <arglist>(const Hep3Vector &amp;ref) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>coLinearRapidity</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>f60e4ae5314c5aab2c2c08f192118e20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>findBoostToCM</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>0d2ec97a04d18f92f713c82c0ec767d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>findBoostToCM</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>181e384a31656b164ff28ac536e4589f</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>et2</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>88cd3f8a54c44a64941797d9324b0331</anchor>
      <arglist>(const Hep3Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>et</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>4c708fece676da4d33270fff5d79cb31</anchor>
      <arglist>(const Hep3Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>diff2</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>217cdf42ef06e6152549a46386dbffe3</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>delta2Euclidean</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>ba5e440d177d1ec648cc78082f6d618b</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>plus</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>dcc2e85f03007343e5f0329836b47d72</anchor>
      <arglist>(const Hep3Vector &amp;ref) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minus</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>294cb2f48a1ea26cac503fa23c6c638f</anchor>
      <arglist>(const Hep3Vector &amp;ref) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>rotate</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>8eda76972ec813ed8566c411626c778f</anchor>
      <arglist>(const Hep3Vector &amp;axis, double delta)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>rotate</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>7ec6074baeeb5641116b28c8753c0e44</anchor>
      <arglist>(const HepAxisAngle &amp;ax)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>rotate</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>cf5b7962a758fd695de16843ed4f0559</anchor>
      <arglist>(const HepEulerAngles &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>rotate</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>52a71491cbb3321efd3aad25b86646aa</anchor>
      <arglist>(double phi, double theta, double psi)</arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector &amp;</type>
      <name>boost</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>ef27c3ccbc7bfec0a0d17d72edec7e33</anchor>
      <arglist>(const Hep3Vector &amp;axis, double beta)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ZMpvMetric_t</type>
      <name>setMetric</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>ec74145580e4df6a667dab1d02d5da02</anchor>
      <arglist>(ZMpvMetric_t m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ZMpvMetric_t</type>
      <name>getMetric</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>37d2ae7a6b423abf5344540d7c348e1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getTolerance</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>d531a2db120e65c8bcd3fe64018ad171</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>setTolerance</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>a3fd2896623e0add9e6017ee3333c18c</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="friend">
      <type>friend HepLorentzVector</type>
      <name>rotationXOf</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>ddbd4820ae5e259faa6fdacf925b7110</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double delta)</arglist>
    </member>
    <member kind="friend">
      <type>friend HepLorentzVector</type>
      <name>rotationYOf</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>43f4fa94a3e9ce21d7da60fd378dca1f</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double delta)</arglist>
    </member>
    <member kind="friend">
      <type>friend HepLorentzVector</type>
      <name>rotationZOf</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>f29621e2903e3284e5153027d8a5e62c</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double delta)</arglist>
    </member>
    <member kind="friend">
      <type>friend HepLorentzVector</type>
      <name>rotationOf</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>4543e0d04f827e6643b95472df2c027b</anchor>
      <arglist>(const HepLorentzVector &amp;vec, const Hep3Vector &amp;axis, double delta)</arglist>
    </member>
    <member kind="friend">
      <type>friend HepLorentzVector</type>
      <name>rotationOf</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>41a534c8c69b665201811f983af95cf6</anchor>
      <arglist>(const HepLorentzVector &amp;vec, const HepAxisAngle &amp;ax)</arglist>
    </member>
    <member kind="friend">
      <type>friend HepLorentzVector</type>
      <name>rotationOf</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>2c5a5b9d05ba2fd9a114c68509469c48</anchor>
      <arglist>(const HepLorentzVector &amp;vec, const HepEulerAngles &amp;e)</arglist>
    </member>
    <member kind="friend">
      <type>friend HepLorentzVector</type>
      <name>rotationOf</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>348b30c86ae8516cf7998e60c29ac76a</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double phi, double theta, double psi)</arglist>
    </member>
    <member kind="friend">
      <type>friend HepLorentzVector</type>
      <name>boostXOf</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>194772a6c28b425f885458e870959d93</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double beta)</arglist>
    </member>
    <member kind="friend">
      <type>friend HepLorentzVector</type>
      <name>boostYOf</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>025024a12d891c6b293e8d6b648e350b</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double beta)</arglist>
    </member>
    <member kind="friend">
      <type>friend HepLorentzVector</type>
      <name>boostZOf</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>c57b47a608ce9c01b38e7a48144675d4</anchor>
      <arglist>(const HepLorentzVector &amp;vec, double beta)</arglist>
    </member>
    <member kind="friend">
      <type>friend HepLorentzVector</type>
      <name>boostOf</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>803ddbbf59071f4ae038002e82fc185d</anchor>
      <arglist>(const HepLorentzVector &amp;vec, const Hep3Vector &amp;betaVector)</arglist>
    </member>
    <member kind="friend">
      <type>friend HepLorentzVector</type>
      <name>boostOf</name>
      <anchorfile>classCLHEP_1_1HepLorentzVector.html</anchorfile>
      <anchor>45faed07621b5f28b5ec43c59e727e4e</anchor>
      <arglist>(const HepLorentzVector &amp;vec, const Hep3Vector &amp;axis, double beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::Tcomponent</name>
    <filename>classCLHEP_1_1Tcomponent.html</filename>
    <member kind="function">
      <type></type>
      <name>Tcomponent</name>
      <anchorfile>classCLHEP_1_1Tcomponent.html</anchorfile>
      <anchor>450d1d0594c0b543d5dfbb1f9dd49a29</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>classCLHEP_1_1Tcomponent.html</anchorfile>
      <anchor>fa3ac681a5012601d4326ab6085cac2d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepRotation</name>
    <filename>classCLHEP_1_1HepRotation.html</filename>
    <member kind="function">
      <type></type>
      <name>HepRotation</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>01176fa509216c6e479b3def81847e2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRotation</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>edff03acd154bca457ccea1e4945a512</anchor>
      <arglist>(const HepRotation &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRotation</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>9092d4c0a28e686adf099eb5c76b16cc</anchor>
      <arglist>(const HepRotationX &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRotation</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>4b3073e349ad9dd805b8aa148d76cb1c</anchor>
      <arglist>(const HepRotationY &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRotation</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>858ac79e46dd551bea978569e58290b8</anchor>
      <arglist>(const HepRotationZ &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>99073ec32e9e50b15bc047b354cd46e5</anchor>
      <arglist>(const Hep3Vector &amp;axis, double delta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRotation</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>4300afe7a2c24d030c31a6a79ac4838f</anchor>
      <arglist>(const Hep3Vector &amp;axis, double delta)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>7dd2d26a5c667dde80cc3e34ce920d0a</anchor>
      <arglist>(const HepAxisAngle &amp;ax)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRotation</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>8a4af20e743ff1f4214b8317135b73a8</anchor>
      <arglist>(const HepAxisAngle &amp;ax)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>921f1951449faecd5ca4795e2aa9aea5</anchor>
      <arglist>(double phi, double theta, double psi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRotation</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>191412ffe089d5745c4d51dadbd269c6</anchor>
      <arglist>(double phi, double theta, double psi)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>b5a7cefa423fd9cbca28056eb168b043</anchor>
      <arglist>(const HepEulerAngles &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRotation</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>c15387f98399d19afaeca78d15150467</anchor>
      <arglist>(const HepEulerAngles &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRotation</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>849edc7eeb64609cd7830fda81cce8f8</anchor>
      <arglist>(const Hep3Vector &amp;colX, const Hep3Vector &amp;colY, const Hep3Vector &amp;colZ)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>9b3f9e9824506caf861b336a2a1811bf</anchor>
      <arglist>(const Hep3Vector &amp;colX, const Hep3Vector &amp;colY, const Hep3Vector &amp;colZ)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>setRows</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>60ffbcf3927717ab4df2c9742969cf87</anchor>
      <arglist>(const Hep3Vector &amp;rowX, const Hep3Vector &amp;rowY, const Hep3Vector &amp;rowZ)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>913b59524e6bad17da13e9d163525ad0</anchor>
      <arglist>(const HepRotationX &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>3e80d891ab5d069d9948e4e970288248</anchor>
      <arglist>(const HepRotationY &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>ea197b13aa9e9873cf3fb96c4caf3860</anchor>
      <arglist>(const HepRotationZ &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>a37254d7c271cf4a9b4cdb36d9c05bcb</anchor>
      <arglist>(const HepRotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>da217bf3bd9e1e012f7f90b3d1a5f66c</anchor>
      <arglist>(const HepRotationX &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>9b8f443462a5063d4202e0efc598301f</anchor>
      <arglist>(const HepRotationY &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>1360159d424e5fc0628603a4c952598a</anchor>
      <arglist>(const HepRotationZ &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>b4b289d630cdcb7236abf7f1dbd44feb</anchor>
      <arglist>(const HepRep3x3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRotation</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>93f14d3e6a5df968c940881c920656ac</anchor>
      <arglist>(const HepRep3x3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HepRotation</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>ab3196a433443f73ed7f94002535a61a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>colX</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>810f98326f1fc35235702fbf4f6d94f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>colY</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>31d859d5d5781b9f1637401a1765ad63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>colZ</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>30f50a82d5a9c5d81cda1a264e6d1f70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rowX</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>7a9753b4fcbb0e8cc18b6dec1a11bf5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rowY</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>f742e58df541375a4fcae3019e8cb7d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rowZ</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>c1d8aafb8677fca2a6d08d9be54932b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xx</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>68898f035f42307ac02ad6c6123054a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xy</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>5c31d93557d9ebf6fb37542cca77cf0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xz</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>831f6999c24b6b7aed82b76647fe6f25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yx</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>35949d739c75f1b6eed302b9274a9be4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yy</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>0a9c617c354a8ec029efdc728f51ba6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yz</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>d6551b6a9334cd03e17c3f843faa8a35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zx</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>a7aa78f991faa913e52cb67e9d63375a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zy</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>787bac65deb8cdb0b037a37539720e0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zz</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>61fa07d3fe5f65d4db8ecbe29c1194e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRep3x3</type>
      <name>rep3x3</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>e22354c343861e3be22b2a15074fcb1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HepRotation_row</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>17779a242f477c37371e868e04f76b47</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>4f7c9fe95e4c8a0963c4e89d2fd8c227</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPhi</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>5bf87af345a9782230cc5dd1fa63555a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTheta</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>5913c7334d77e8e50364f5273419d313</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPsi</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>2b93326d10f51bd40e0ea7668a4a4280</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phi</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>535cb0e7fdf14a24a98844b7d245dfa5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>theta</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>263305821b8c21f7860efd241ffb115b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>psi</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>7e7f8b66a88099ec3fa9ba2a8e29bc30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepEulerAngles</type>
      <name>eulerAngles</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>ee9d57bf88d09fe0c817f427a727575b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDelta</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>5051c59492971d08399e6ca2c900bf96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>getAxis</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>1f18a80232a60aec95a3d50610727e38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>delta</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>0256df24d775906664242b741fc15505</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>axis</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>daecfc069c385ea711f4d0b49849dc65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepAxisAngle</type>
      <name>axisAngle</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>cdee8f45c72c7ac698ade4c9414e9652</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAngleAxis</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>ef45c0aa89c6b4fc743600be1ad1e43b</anchor>
      <arglist>(double &amp;delta, Hep3Vector &amp;axis) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phiX</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>4a869590ed3fe24cbcc670c157f59fe1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phiY</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>76cff919ffc84bc2ec96e43b4fad2e4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phiZ</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>e11480d5bb541bf2a421d071c55444de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>thetaX</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>b4dd48a1a63fd390f44b11ad52b15000</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>thetaY</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>e71c128dd908d7bbfacef3e5817e13b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>thetaZ</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>0922cfa91c74b3a95424c5c49d731605</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col1</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>57a37e34301b5d0a26dcaee20975ccbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col2</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>eac1ef57bcdf30fd85441ea1b17769cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col3</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>fc11c665c7c1ca937ad032e53a7dc499</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col4</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>f61d4db408ab3f4f8df07aa5810d4ed2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row1</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>ad0b756d47dab238a6712c726cf804e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row2</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>8a374fd3f09c6f7bf5aefa5717aeecf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row3</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>777238f2b34cbbea792bf841241c05d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row4</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>585ab5aa337664001d4a1872ee53f264</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xt</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>4cb54b80b3116c4d54313f9d2cc561ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yt</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>ecf019393ec76270b9c5a795f34fbb31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zt</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>b429c2588b358dc4f492f428f377bb8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tx</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>3b90fa19e74990ab3c7543c5d3b068a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ty</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>8bc72049230552a2b9d0847d3abaed97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tz</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>d1aff38b93dd8da666dbb2c9056a4add</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tt</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>916df43c8bb8bdab5d0cd2b2cd2b979a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRep4x4</type>
      <name>rep4x4</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>0ec6f42f2490ca803c69ef0b8764fcff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhi</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>cdfb00e2ae3fc8d5eef4f818231801cb</anchor>
      <arglist>(double phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTheta</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>f65bb83574e13fd379dac28c932b5c53</anchor>
      <arglist>(double theta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPsi</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>318f87519c6db189485c7662832cff41</anchor>
      <arglist>(double psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAxis</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>c98bcab3f78aace2df7e9d64569fb91c</anchor>
      <arglist>(const Hep3Vector &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDelta</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>a575c1eb9a69ee80541c1ad2af7d7606</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>6b7b17746086bd8c074310bbb04c150d</anchor>
      <arglist>(HepAxisAngle &amp;rotation, Hep3Vector &amp;boost) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>d90f26bee0dd7156f161b1852f883cff</anchor>
      <arglist>(Hep3Vector &amp;boost, HepAxisAngle &amp;rotation) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>4a4ed35a14ac0f2aef95868138663596</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>a9a8a73eed7708dafa715d9969a50142</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>be5acfeea5b1a6b491f4a9fe7542a1fc</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>2326520151d435bc40f6305de6a20a37</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>d0961fedcbd4d93102cd248c957d11b7</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>345f228792d5ee813aef373d120c0820</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>2a6674488b9cc5c335a5760752d2f793</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>85225573e158a034cd198f372b5280bb</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>ec9002b246b9fa681c54c9d2abf0dbd4</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>4774850b8fa282098ee59780d522e376</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>060f317872b5b1f9d90e88d3dd3dc407</anchor>
      <arglist>(const HepRotation &amp;r, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>2261be0738ad3f66c5ac494944d80469</anchor>
      <arglist>(const HepBoost &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>674d95230a102cbb3822ca684ea4ea90</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>b7785710ba75ef7ae86db19bdd7b79a0</anchor>
      <arglist>(const HepBoost &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>73393479ab9a6575b9111ec689ea2c3e</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>0d059d93e2ca656d3499235d0c56eec1</anchor>
      <arglist>(const HepBoost &amp;lt, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>c70acb7330ea29140ef6825a7f7661f4</anchor>
      <arglist>(const HepLorentzRotation &amp;lt, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm2</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>dbff84d877621336970bdc2502e0ea84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rectify</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>0515dabb9496d2cd16b9f7ee02cbdca8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>14c6b0fca958e01b9c91186d337a977b</anchor>
      <arglist>(const Hep3Vector &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>69670cd85577aa85aff80a43c8c01fcc</anchor>
      <arglist>(const Hep3Vector &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>0b91d303b8f7720bcd2d20acd74f5304</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>6bcb873d74c82be150f5d5c0c6aa0596</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>HepRotation</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>9251611f56c47ffc109f47712fddc4ae</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>HepRotation</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>212275e252594e44c274498c7d024fe1</anchor>
      <arglist>(const HepRotationX &amp;rx) const </arglist>
    </member>
    <member kind="function">
      <type>HepRotation</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>31e484fe360bb537cdc75f3ef6b28e29</anchor>
      <arglist>(const HepRotationY &amp;ry) const </arglist>
    </member>
    <member kind="function">
      <type>HepRotation</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>4ce9ec01eb59990cfc4805e8c5ed2886</anchor>
      <arglist>(const HepRotationZ &amp;rz) const </arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>operator*=</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>5fbf72c98664f9de97cb419c9e7ef631</anchor>
      <arglist>(const HepRotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>transform</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>8a81ae44bb4a4068a52a776081ab1cd4</anchor>
      <arglist>(const HepRotation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>operator*=</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>f4d313b329d1ebfcf22638f303153090</anchor>
      <arglist>(const HepRotationX &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>operator*=</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>ea94a6f8db8d1008b395f2727eb2f5ce</anchor>
      <arglist>(const HepRotationY &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>operator*=</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>2ac7a59f7f62fb37f349ec2b4afebee8</anchor>
      <arglist>(const HepRotationZ &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>transform</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>b7c9b15f6d4483a5276da01ddebbf575</anchor>
      <arglist>(const HepRotationX &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>transform</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>eb2d95a602fbc1a3635ad48a1edf9bc9</anchor>
      <arglist>(const HepRotationY &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>transform</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>6c66d0178440277b093ac8cf6bcb6fae</anchor>
      <arglist>(const HepRotationZ &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>rotateX</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>a48b739800898662cfc79b41f3d68a79</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>rotateY</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>0c286613b0dacf3f0e23a063c065e27f</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>rotateZ</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>bb69a0e082e9b3d048b9a10a0a5f0846</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>rotate</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>94978ccb2b2bfe507ee289b8a13f330b</anchor>
      <arglist>(double delta, const Hep3Vector &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>rotate</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>1bc0e7f1c8ee67a9bcbdf1a7e3a6707c</anchor>
      <arglist>(double delta, const Hep3Vector *axis)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>rotateAxes</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>9b0b18f424393cda9649945f5bf6a5ea</anchor>
      <arglist>(const Hep3Vector &amp;newX, const Hep3Vector &amp;newY, const Hep3Vector &amp;newZ)</arglist>
    </member>
    <member kind="function">
      <type>HepRotation</type>
      <name>inverse</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>3ad63a2341dccc0842435ad5418e7a7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRotation &amp;</type>
      <name>invert</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>ecbefe996d3bf2e19bc4478f1e4d34bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>d303883da892cda0a54d90cff29e5960</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getTolerance</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>dec258a05fdf9a5a59f00f0ef4e3507e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>setTolerance</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>9c558f242f95b536abddf7a6eb61963e</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const HepRotation</type>
      <name>IDENTITY</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>9062cab305aa28fa98ac9fbd76be4d22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HepRotation</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>37331144671b4ef9876cb7fec156ff22</anchor>
      <arglist>(double mxx, double mxy, double mxz, double myx, double myy, double myz, double mzx, double mzy, double mzz)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rxx</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>39cd1adfd849102cb208df3ed6758b4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rxy</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>343ce7b2d8fb0204d9732be9f5232e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rxz</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>9b6c87c339c8e78f3b0a84aa9bf0d2f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ryx</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>07990bfc0911b1ec919c2134174633c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ryy</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>6d38fcb04869439e3b98657c93a90248</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ryz</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>3c69e4a972a3fea8bd0ff3a90f44cf8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rzx</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>4ccdeacb077f22ab69a29598e1007343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rzy</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>fee2035e8b4858e50df2bf7ecbcadd3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rzz</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>cd136bde92b2da15f63d561d01118606</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend HepRotation</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>ee88a3d4909285487bf0de12a0fff928</anchor>
      <arglist>(const HepRotationX &amp;rx, const HepRotation &amp;r)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend HepRotation</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>317844b2e0c8676d08c8343f361f8fc8</anchor>
      <arglist>(const HepRotationY &amp;ry, const HepRotation &amp;r)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend HepRotation</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepRotation.html</anchorfile>
      <anchor>acc3ca99abf2d2d5e0dbc79e8f3c5ad8</anchor>
      <arglist>(const HepRotationZ &amp;rz, const HepRotation &amp;r)</arglist>
    </member>
    <class kind="class">CLHEP::HepRotation::HepRotation_row</class>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepRotation::HepRotation_row</name>
    <filename>classCLHEP_1_1HepRotation_1_1HepRotation__row.html</filename>
    <member kind="function">
      <type></type>
      <name>HepRotation_row</name>
      <anchorfile>classCLHEP_1_1HepRotation_1_1HepRotation__row.html</anchorfile>
      <anchor>070a4bff5d88eb0e5769e176dd96948f</anchor>
      <arglist>(const HepRotation &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1HepRotation_1_1HepRotation__row.html</anchorfile>
      <anchor>dd3564fdd54d1bbcd5d3a66a54833089</anchor>
      <arglist>(int) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::Hep4RotationInterface</name>
    <filename>classCLHEP_1_1Hep4RotationInterface.html</filename>
    <member kind="enumvalue">
      <name>ToleranceTicks</name>
      <anchorfile>classCLHEP_1_1Hep4RotationInterface.html</anchorfile>
      <anchor>73126d9fce346eb7f8b3283e59ac2840aa90e4b7dc61cd3b40aed284ba3a6c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getTolerance</name>
      <anchorfile>classCLHEP_1_1Hep4RotationInterface.html</anchorfile>
      <anchor>a3f60751493d8f98d1b868c10ad41cf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>setTolerance</name>
      <anchorfile>classCLHEP_1_1Hep4RotationInterface.html</anchorfile>
      <anchor>b1a8604e6a5fee09a18fd1d8888cfcb0</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static double</type>
      <name>tolerance</name>
      <anchorfile>classCLHEP_1_1Hep4RotationInterface.html</anchorfile>
      <anchor>514399023f6228dafab56d1024563a2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~Hep4RotationInterface</name>
      <anchorfile>classCLHEP_1_1Hep4RotationInterface.html</anchorfile>
      <anchor>27fc5b2214c7f3b53d34a8b4eba741f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepRotation</name>
      <anchorfile>classCLHEP_1_1Hep4RotationInterface.html</anchorfile>
      <anchor>784dbe340c7f838587af570e0e6a18d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepRotationX</name>
      <anchorfile>classCLHEP_1_1Hep4RotationInterface.html</anchorfile>
      <anchor>74f9fbb8bdfdea72744e98da4e343908</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepRotationY</name>
      <anchorfile>classCLHEP_1_1Hep4RotationInterface.html</anchorfile>
      <anchor>3823737dcd596407e120d06bddc61c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepRotationZ</name>
      <anchorfile>classCLHEP_1_1Hep4RotationInterface.html</anchorfile>
      <anchor>f99fb5978016529eb5da71899bfd11f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepLorentzRotation</name>
      <anchorfile>classCLHEP_1_1Hep4RotationInterface.html</anchorfile>
      <anchor>be4919c5bba2213288e1970f5923b34e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepBoost</name>
      <anchorfile>classCLHEP_1_1Hep4RotationInterface.html</anchorfile>
      <anchor>e81ca10b468c30eb3580df01d1ef4348</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepBoostX</name>
      <anchorfile>classCLHEP_1_1Hep4RotationInterface.html</anchorfile>
      <anchor>4f309bcfc9eb65cbbc3f16bbf61adf5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepBoostY</name>
      <anchorfile>classCLHEP_1_1Hep4RotationInterface.html</anchorfile>
      <anchor>ab800eb4d208fc36345d962d284ec54e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepBoostZ</name>
      <anchorfile>classCLHEP_1_1Hep4RotationInterface.html</anchorfile>
      <anchor>aef408021788f6c27ab82c8cfcdded2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::Hep3RotationInterface</name>
    <filename>classCLHEP_1_1Hep3RotationInterface.html</filename>
    <base>CLHEP::Hep4RotationInterface</base>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepRotation</name>
      <anchorfile>classCLHEP_1_1Hep3RotationInterface.html</anchorfile>
      <anchor>784dbe340c7f838587af570e0e6a18d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepRotationX</name>
      <anchorfile>classCLHEP_1_1Hep3RotationInterface.html</anchorfile>
      <anchor>74f9fbb8bdfdea72744e98da4e343908</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepRotationY</name>
      <anchorfile>classCLHEP_1_1Hep3RotationInterface.html</anchorfile>
      <anchor>3823737dcd596407e120d06bddc61c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HepRotationZ</name>
      <anchorfile>classCLHEP_1_1Hep3RotationInterface.html</anchorfile>
      <anchor>f99fb5978016529eb5da71899bfd11f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CLHEP::HepRep3x3</name>
    <filename>structCLHEP_1_1HepRep3x3.html</filename>
    <member kind="function">
      <type></type>
      <name>HepRep3x3</name>
      <anchorfile>structCLHEP_1_1HepRep3x3.html</anchorfile>
      <anchor>162b62e013873c34d6f098b9316f3260</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRep3x3</name>
      <anchorfile>structCLHEP_1_1HepRep3x3.html</anchorfile>
      <anchor>533baff09b1bd58544eb45987caf49ef</anchor>
      <arglist>(double xx, double xy, double xz, double yx, double yy, double yz, double zx, double zy, double zz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRep3x3</name>
      <anchorfile>structCLHEP_1_1HepRep3x3.html</anchorfile>
      <anchor>084971633d43a34daecdf44cf73c2e99</anchor>
      <arglist>(const double *array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToIdentity</name>
      <anchorfile>structCLHEP_1_1HepRep3x3.html</anchorfile>
      <anchor>b69f0f628d7941a8911a1e35503f6d39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getArray</name>
      <anchorfile>structCLHEP_1_1HepRep3x3.html</anchorfile>
      <anchor>d7ab7efb58d0af0e4eef7903b4a73d62</anchor>
      <arglist>(double *array) const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>xx_</name>
      <anchorfile>structCLHEP_1_1HepRep3x3.html</anchorfile>
      <anchor>e5487951d3f908e4b1896e8751d73cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>xy_</name>
      <anchorfile>structCLHEP_1_1HepRep3x3.html</anchorfile>
      <anchor>ef557c4f5645c2a032abe6f92eb97786</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>xz_</name>
      <anchorfile>structCLHEP_1_1HepRep3x3.html</anchorfile>
      <anchor>de1ea0611850872481324c6c5ab0e310</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>yx_</name>
      <anchorfile>structCLHEP_1_1HepRep3x3.html</anchorfile>
      <anchor>4db8c05bf0059970db6843176245718e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>yy_</name>
      <anchorfile>structCLHEP_1_1HepRep3x3.html</anchorfile>
      <anchor>fa365e0199493e683ace426a4d7f30b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>yz_</name>
      <anchorfile>structCLHEP_1_1HepRep3x3.html</anchorfile>
      <anchor>708bd4d5cdeb4ad0cff2adfa3d917576</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>zx_</name>
      <anchorfile>structCLHEP_1_1HepRep3x3.html</anchorfile>
      <anchor>0ccfbb3d7b049c1e51c113e5aaa37ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>zy_</name>
      <anchorfile>structCLHEP_1_1HepRep3x3.html</anchorfile>
      <anchor>9247512d5d27d209d8e718b1d98343aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>zz_</name>
      <anchorfile>structCLHEP_1_1HepRep3x3.html</anchorfile>
      <anchor>3c35bc63dceeb5a295e82991532cb566</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CLHEP::HepRep4x4</name>
    <filename>structCLHEP_1_1HepRep4x4.html</filename>
    <member kind="function">
      <type></type>
      <name>HepRep4x4</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>e8a40a7e5ab4ba177dfe4b59fed18518</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRep4x4</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>82b5bf2d783bedf9e1d5bc1e2091391b</anchor>
      <arglist>(double xx, double xy, double xz, double xt, double yx, double yy, double yz, double yt, double zx, double zy, double zz, double zt, double tx, double ty, double tz, double tt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRep4x4</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>4703ce9812af8b24747a2a771117f869</anchor>
      <arglist>(const HepRep4x4Symmetric &amp;rep)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRep4x4</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>2fb131cce09e59817faff5a00d50f1fe</anchor>
      <arglist>(const double *array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToIdentity</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>4ab358261b024d6c082352cc5c931095</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getArray</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>8d52666028ae77cc7e75f223a7495632</anchor>
      <arglist>(double *array) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>c3ae7a2d245983a38612f02c0d60feef</anchor>
      <arglist>(HepRep4x4 const &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>7433c41330d472331a9666f4041c63b8</anchor>
      <arglist>(HepRep4x4 const &amp;r) const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>xx_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>7d813754424c9d59e74613bd7c5070ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>xy_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>82ddb078f381e30fa16e8c1ae7a66ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>xz_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>9040422e528500185467527df12d9a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>xt_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>8a396234c69e0183b2f1f38bed970ca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>yx_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>5650a7435c2e87001efecd40c0774f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>yy_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>8dde844ffb06bea911259b00ccdf4496</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>yz_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>a039c7bcc902199849d4e142abf6de30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>yt_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>f157f01bafde8178c29a92d624431e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>zx_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>70d8393930b2906733c313a5c987b748</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>zy_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>d16df8d578c78441856e83f858ab402f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>zz_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>f8f22e4f829bb733efc29412ca58f937</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>zt_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>b9fc144153509fdd289e7a3038f925e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>tx_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>6dc6a2c4eec80c97920099c09b9b4bf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ty_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>4dff611919c483f2822fe98d08c2226e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>tz_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>5911f467d2744dc9aa46e7072a76a7e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>tt_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4.html</anchorfile>
      <anchor>3596350dd64cee04bd4caeaa4ba5a09c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CLHEP::HepRep4x4Symmetric</name>
    <filename>structCLHEP_1_1HepRep4x4Symmetric.html</filename>
    <member kind="function">
      <type></type>
      <name>HepRep4x4Symmetric</name>
      <anchorfile>structCLHEP_1_1HepRep4x4Symmetric.html</anchorfile>
      <anchor>52509cd167d91de413ab54a8be1db70e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRep4x4Symmetric</name>
      <anchorfile>structCLHEP_1_1HepRep4x4Symmetric.html</anchorfile>
      <anchor>cf97cf9275bfcd0f0d0fbc99878c2b35</anchor>
      <arglist>(double xx, double xy, double xz, double xt, double yy, double yz, double yt, double zz, double zt, double tt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRep4x4Symmetric</name>
      <anchorfile>structCLHEP_1_1HepRep4x4Symmetric.html</anchorfile>
      <anchor>b130025d8e60ba4ee9b9545b58dd4a44</anchor>
      <arglist>(const double *array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToIdentity</name>
      <anchorfile>structCLHEP_1_1HepRep4x4Symmetric.html</anchorfile>
      <anchor>53250e2f4740ac41894e38d00f24ba22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getArray</name>
      <anchorfile>structCLHEP_1_1HepRep4x4Symmetric.html</anchorfile>
      <anchor>dd324d771d70831016b0785c03e5db90</anchor>
      <arglist>(double *array) const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>xx_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4Symmetric.html</anchorfile>
      <anchor>11cf6e516ac6e3f521a3fa13ef801732</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>xy_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4Symmetric.html</anchorfile>
      <anchor>4394ea76a739a937f8b50784767c969a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>xz_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4Symmetric.html</anchorfile>
      <anchor>177e969a43b9d8ed871cfce7415c8936</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>xt_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4Symmetric.html</anchorfile>
      <anchor>7b4e34d48c76b67ec8b0c7758da66c6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>yy_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4Symmetric.html</anchorfile>
      <anchor>20017687a9211bc6864dcf36c9ef9b01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>yz_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4Symmetric.html</anchorfile>
      <anchor>02acb30a4e57c4fe3b504eafe3854429</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>yt_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4Symmetric.html</anchorfile>
      <anchor>d650719da002e6636f2895b340e23be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>zz_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4Symmetric.html</anchorfile>
      <anchor>e88a9c058e73fc7621aa793845cabec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>zt_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4Symmetric.html</anchorfile>
      <anchor>d679d22ad7ef8d366b059921dbed047b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>tt_</name>
      <anchorfile>structCLHEP_1_1HepRep4x4Symmetric.html</anchorfile>
      <anchor>5f6d3e50571d59543515eac65aaadfc6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepRotationX</name>
    <filename>classCLHEP_1_1HepRotationX.html</filename>
    <member kind="function">
      <type></type>
      <name>HepRotationX</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>e4fc388aa973ee88610aef6a3f29b314</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRotationX</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>a08bbe252fa90c7c1806d3bbd680b6d4</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRotationX</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>1706593ed2e5b70c91033c3401c6af9b</anchor>
      <arglist>(const HepRotationX &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type>HepRotationX &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>82a99708ea99c826fb3bc364713b59d1</anchor>
      <arglist>(const HepRotationX &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotationX &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>911a0a1e0287f4e11592be99a8127e36</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HepRotationX</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>d2e80785e689c9d789c73576b34be8af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>colX</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>239a81f10a376f69d554bbe0f21cf4bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>colY</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>67ca2b1c82b68698f3614fcc0b09b7e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>colZ</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>16bf487d35e59a5a48e170f6b2ef049e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rowX</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>f3802766cb29a73454e4d9fc65d7e346</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rowY</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>73db5852c28e10b405c4d23e37743363</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rowZ</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>d6c1c2b8893f1cf70edef3313a17d33d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xx</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>823104867aaa75fa8dd2b49a73443a58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xy</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>8531f2c6cc76f40993b5cd4a6d430546</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xz</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>f9a07a47f9076aa5845503998e5b3fb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yx</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>6233e92961041b3ddfe446f3f67b5bd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yy</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>30997821319e0f96cbf776e8c5fa0231</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yz</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>26a9f52c46464c868b72bd9fd67c64a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zx</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>3f1ce75152ed1c89f26516d1889fbbe3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zy</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>f9d75cefcf6664f0f64e86d9e3d7eab2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zz</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>3f9c8a6ae42b995acd419cf3a926ce48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRep3x3</type>
      <name>rep3x3</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>a44f4748b6a3c0f0b16d6628ba6fe9c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPhi</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>360957acd87503a33397d8ec2e00d46c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTheta</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>46a59581647192aa35a202e19df2aa7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPsi</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>a7db1d62b31d88584c7c13834dde4133</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phi</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>8d0d01cd519b5dfd7d0c1d936beaa3a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>theta</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>cf36557b79fc0641bc800fc7dc45d6c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>psi</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>48db6f0fa47b778991f7b43c916264b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepEulerAngles</type>
      <name>eulerAngles</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>3f7ce25ced5f6603adb423a2479c46ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDelta</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>55bb45bbad957f5f3e6d1e27a828fbad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>getAxis</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>c6b004b4659128a247050f89cb3bcc2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>delta</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>b82ce6a951137bb4467610db4428e9b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>axis</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>3248941ea8bacc28665712122560107b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepAxisAngle</type>
      <name>axisAngle</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>27ddc1cbe17c6fdd2319daaf843ec4b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAngleAxis</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>3161f8b74a67c5da57b9c2f64c3f973c</anchor>
      <arglist>(double &amp;delta, Hep3Vector &amp;axis) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phiX</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>8ad3bdd889276d4cf704fb8fac1d0106</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phiY</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>fbc0aa09cab688bc566ea1b9f2f3e8db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phiZ</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>be19b786ab433266a63e1e2bdca2cadb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>thetaX</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>62e0b546ba1fcae64678a29a8597b226</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>thetaY</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>55d2b7b3bb0b68c86e87a5bb88aaf9da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>thetaZ</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>b479ff1022c377689c2673e11be151ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col1</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>da1900c91fe7cbe32d59b6ca08d53d58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col2</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>1c114a357139e1c7d5e8149896d4b014</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col3</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>586c011f5593847a5cd1da20ebc7529e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col4</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>2ea8bcb8a56907051374f337da39f9f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row1</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>913a40f9032920e5349c5a8b60245ae1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row2</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>c52adb055f6f4fcbe0f0d4d966a3bc56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row3</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>b6660d5b1adf0b5371838e2b44a47453</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row4</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>cdaeaf600e35e3e5611218102017cd6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xt</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>34ee44a1d883156249d15f6ebfb1c69b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yt</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>d05d75db34a6f4644e24423776355e64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zt</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>2e31978becb56fc103bd00d027b786c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tx</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>518bc1155933c410107f7d6312a64e45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ty</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>43008ddcb9455e7b3f7ec743da2c836c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tz</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>8363fc6b3bf02ef449cd44107fb4e7a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tt</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>de54f7bc6417512b02e357518134e0ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRep4x4</type>
      <name>rep4x4</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>e77105b0189cdd3022fe9b40dab3d12a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDelta</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>7769cc0702ba6def83be8845777c49a1</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>824946d9d3e7550b752b0bb0a371d0ab</anchor>
      <arglist>(HepAxisAngle &amp;rotation, Hep3Vector &amp;boost) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>b11d4d7387200217fe73fbe947d45abd</anchor>
      <arglist>(Hep3Vector &amp;boost, HepAxisAngle &amp;rotation) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>2fede35aec82cabb281abfcbea37970c</anchor>
      <arglist>(HepRotation &amp;rotation, HepBoost &amp;boost) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>fed466fe4cd304b570881b3f297a3299</anchor>
      <arglist>(HepBoost &amp;boost, HepRotation &amp;rotation) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>a92dfdd1caf24fbac850fff14f78aa39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>0e1e5c02062f4b6c8898503397d37129</anchor>
      <arglist>(const HepRotationX &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>462c51823e2a917f59ac0942c749cace</anchor>
      <arglist>(const HepRotationX &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>9c254b601e0adeaa973bc87f24a7b1d2</anchor>
      <arglist>(const HepRotationX &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>4fa406ba3e1c1c7d5d92ebf4fc8fd7fe</anchor>
      <arglist>(const HepRotationX &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>541a45b6e023436a19d1ac9112a53dbc</anchor>
      <arglist>(const HepRotationX &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>9f3a112a6710b7faa362fdaf9c83c132</anchor>
      <arglist>(const HepRotationX &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>34503fbed2e11b442a45535473aa2551</anchor>
      <arglist>(const HepRotationX &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>984352a300cc0997fb0c543c39741904</anchor>
      <arglist>(const HepRotationX &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>28cd0a8553baee56056988e64ec62a69</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>f2820f26516d44aa1aeb3dd943d1fad1</anchor>
      <arglist>(const HepRotationX &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>49fd544246f7ae9c36bed4371ee7a4df</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>857d5249599b14ef9d1af0591aca5a06</anchor>
      <arglist>(const HepRotationX &amp;r, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>7ca162491c9fff4e323121eacf6f232d</anchor>
      <arglist>(const HepRotation &amp;r, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>90cc516f5e703a662010f615334c8fe8</anchor>
      <arglist>(const HepBoost &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>68bcdf676e5e33998f1f74c92d641d8f</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>ced4799670bdf9e3c1836366d910cbd2</anchor>
      <arglist>(const HepBoost &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>6f0ebd2864cfb32aaec46e5fbabb8a38</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>053cf5e5da6dfc8f3baada26037c7374</anchor>
      <arglist>(const HepBoost &amp;lt, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>e4e83d5b4f68716abcdc8b382a3c161a</anchor>
      <arglist>(const HepLorentzRotation &amp;lt, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm2</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>825f331750f0524a7997b8a76d9e3a35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rectify</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>2a5b58d378dcfe0a6665abc9221a98f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>34a1532cb3bd7a87312bc883a105b39f</anchor>
      <arglist>(const Hep3Vector &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>ef536df8ba992adac00222787651c503</anchor>
      <arglist>(const Hep3Vector &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>aef425449f3f98c2ecf898b4ca5c2892</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>769e0e4429d057116f57885d464886da</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>HepRotationX</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>f8da94124fd0f72f61cef5ad78cfec73</anchor>
      <arglist>(const HepRotationX &amp;rx) const </arglist>
    </member>
    <member kind="function">
      <type>HepRotationX &amp;</type>
      <name>operator*=</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>a7e2a8389c76b4b7499740afa873e424</anchor>
      <arglist>(const HepRotationX &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotationX &amp;</type>
      <name>transform</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>36954789716cc0107b6ccacee97c7eae</anchor>
      <arglist>(const HepRotationX &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotationX</type>
      <name>inverse</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>303920e76226ec8135069b0aafa88ed0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRotationX &amp;</type>
      <name>invert</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>f137f521e62c9969a9227d0aa1dde006</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>4aa743201a351c5da705472ee8e77f74</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getTolerance</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>89264bc8f856ac25c1ce82f26985e591</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>setTolerance</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>7eba399e0621e9faa1b0ef6b24ff1ca1</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HepRotationX</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>0ac6ede8b2d44717c4be84a518cc2ad3</anchor>
      <arglist>(double dd, double ss, double cc)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static double</type>
      <name>proper</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>1832d06d5c43c9cb2be78a001d5ab3c7</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>d</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>e1b2b5ef6da5f07e266919f57dbe0db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>s</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>662e7fdf54b3cc0151734513ddda1391</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>c</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>659d7e6193daaa8c49ddb1c13ae15c4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend HepRotationX</type>
      <name>inverseOf</name>
      <anchorfile>classCLHEP_1_1HepRotationX.html</anchorfile>
      <anchor>0fd3e25160d39d68fd932f4753c2fac5</anchor>
      <arglist>(const HepRotationX &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepRotationY</name>
    <filename>classCLHEP_1_1HepRotationY.html</filename>
    <member kind="function">
      <type></type>
      <name>HepRotationY</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>fcb76f9f07780a9d0e0dec4baa768f33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRotationY</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>66201ed713744cfe7cf09d69e56c615c</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRotationY</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>22b16f184e15eb74bba524c2cdccd461</anchor>
      <arglist>(const HepRotationY &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type>HepRotationY &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>38986eaf1c2f79bc40727f0846b6a490</anchor>
      <arglist>(const HepRotationY &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotationY &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>76cc3b5ecfb8edb6a0b6d5f1f518f1d0</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HepRotationY</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>32a3dc3e2e28a8d82f3629168919dc5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>colX</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>577a65de155a6ab38d1525ec18f30ceb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>colY</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>02b5be01937e66feac96f95f850e11a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>colZ</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>fc1e5d16b1b5367dbe9216db46c74216</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rowX</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>3dc191e331fa0f0c64ed7f7b046375ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rowY</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>fd6e1ce94c2cd2b26af80494f4f904e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rowZ</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>287122bc2c33c1f73b58ab06924c0bf9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xx</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>6bad30936dc0301a8faf5efab86b6475</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xy</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>a2e3588a878ac7f4eeeff5154004f0fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xz</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>fcf953337654f2d0b8266b1df355c3ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yx</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>3f40d647aa1cad326c93b4e527478c7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yy</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>a584e5afd638b22fe31085d7977147d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yz</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>0af7660ac3c662f946cb3c9511ca29cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zx</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>81635ff238a082f74a0afe1f11f50a99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zy</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>44687b04657f01c316c8740b311dc1a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zz</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>405456f167f12d5f6039fb80cc2606cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRep3x3</type>
      <name>rep3x3</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>73d508929071d73bea08e52d84cce4b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPhi</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>2cdb9dd2e23cc373583d7414183fc3fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTheta</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>7bbae080ebff6576faed811b74fb1354</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPsi</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>d5ca1138bc9aeb652d09d3d960dc8e4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phi</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>9a097dcb2fe54087edbfd1f9ec8a52b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>theta</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>9fe0ea32e94d911abe5a2ac134931a5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>psi</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>b91aa2f49f777dd1157555f25128431c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepEulerAngles</type>
      <name>eulerAngles</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>5c4cf7bf21adf90f0e4aa0b4fc0bf242</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDelta</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>3bac1cd70e22baa77ee582589431fc18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>getAxis</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>e8d98557e021be36ab65f4eb68dc0879</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>delta</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>b60504c20536badce2e8f353e5b4fa55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>axis</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>8ee95667e7eac0f587ff41de24a021a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepAxisAngle</type>
      <name>axisAngle</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>7efdac08f8f68aecd77c08ea9d461b33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAngleAxis</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>600ef0f07f49db07fdd7f5dd2b1c73b6</anchor>
      <arglist>(double &amp;delta, Hep3Vector &amp;axis) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phiX</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>8a37c8fc9e68598fd8f037fb5b3d368c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phiY</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>5f832605d5403459b5ffa79d0d59cc55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phiZ</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>b81743eac0dc4c14bf5219d60453db5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>thetaX</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>873e69f652244459608f29b11eeca5ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>thetaY</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>7375678d14bda45d2e01a78c46777159</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>thetaZ</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>4bee1a074ee3f64f03fa5b4e17fc70bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col1</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>5f008f01ffaca8a1f915fdcebb970af1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col2</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>b3066b21ac5feac5759c6bd9f11ae839</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col3</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>dd7f8957d9811f740be3438065ca78d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col4</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>9862621de2bc222f65a07a89ab1777ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row1</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>26e0e76b2fcc474392e9f17a1aaed9f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row2</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>f4802f7dfb6e7f196c1a9961a9056fe1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row3</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>e7a8cff748d39f10532d9c457ed6c4d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row4</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>c2642caf98f9e83e64ae8fcaf07eedea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xt</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>6a5e3d8e980beaa5ea7d8ef65bb79eba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yt</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>93880181e29495e72106450361eb1b8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zt</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>c9ea4c89e078d5d2d624fb0219917f11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tx</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>378bebe9e793ad3e8bc69d908083cf9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ty</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>0d1bd5cbbe09d7ea07bdf7adaf767127</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tz</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>b0d95eeef4c811e836f03e2d2d94a918</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tt</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>72f66f54f8f661b204c5d333c2c387de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRep4x4</type>
      <name>rep4x4</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>d8430d7ad0d166976de234eb76fd0dd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDelta</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>0d68f80d347eb6b16040488848790630</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>f315171b58dbdce28ad205341e11412f</anchor>
      <arglist>(HepAxisAngle &amp;rotation, Hep3Vector &amp;boost) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>b5097181680f5d539ae010f72cd6d93e</anchor>
      <arglist>(Hep3Vector &amp;boost, HepAxisAngle &amp;rotation) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>b24b40c67b268cc8ab8625ba725a2964</anchor>
      <arglist>(HepRotation &amp;rotation, HepBoost &amp;boost) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>3fec8ae1a5e304c5645a3e468abb9d61</anchor>
      <arglist>(HepBoost &amp;boost, HepRotation &amp;rotation) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>1b07f88c92d386a657ab7935e9374edf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>e8faa9c58df1be378f43d21bf626c7da</anchor>
      <arglist>(const HepRotationY &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>19fb229937fb3b4458525f6bd553682a</anchor>
      <arglist>(const HepRotationY &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>2f18bcf9d782d7262c395453fac8ce9d</anchor>
      <arglist>(const HepRotationY &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>13635633f56504a7f701bc1f407bda15</anchor>
      <arglist>(const HepRotationY &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>ace94a1063d2273b7ad2b14a2e760d16</anchor>
      <arglist>(const HepRotationY &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>97c4b80837ca6998916ff8e11983a2b4</anchor>
      <arglist>(const HepRotationY &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>040a3988126071ea0c9d2c3b0488c856</anchor>
      <arglist>(const HepRotationY &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>342b0de0bf63d64365e9cd6e8b5cba3e</anchor>
      <arglist>(const HepRotationY &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>a1512f11478bc84ac7c69fc58e16b3ca</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>e51f63f08547c8c7ff38f0b339cd0975</anchor>
      <arglist>(const HepRotationY &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>b827ca7a15046bf60210beefc51de70f</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>0b90b315d7edcdcb0b5cbb9750f4dd62</anchor>
      <arglist>(const HepRotationY &amp;r, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>25587d01798606b45222c7c766649329</anchor>
      <arglist>(const HepRotation &amp;r, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>c42ffe510f97bd58f8cfe5a98d9a3704</anchor>
      <arglist>(const HepBoost &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>39338e1ae0a728729c886a5183b05ed3</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>addfb515d169739a3c70f1f6b31cd851</anchor>
      <arglist>(const HepBoost &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>107433635b56ef00ab8ea9c5cb73e54a</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>1c88c44c635f11ea36dcc57cf6336b5a</anchor>
      <arglist>(const HepBoost &amp;lt, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>0ebc317264fe70c1f4c33d46a78bd201</anchor>
      <arglist>(const HepLorentzRotation &amp;lt, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm2</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>fa9b37be08bcfb014c396be367d41b53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rectify</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>190242530b5f24ab18899c11a70fbe64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>f943df47aa33c160acafae95cede9abb</anchor>
      <arglist>(const Hep3Vector &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>ea0171bb0d569a387e381c23a23196c1</anchor>
      <arglist>(const Hep3Vector &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>24d634ab640dcab3508d86e6ecc9380e</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>26d261d542da7dbed9553a9589b5dacd</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>HepRotationY</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>9b1144b6a0964d39f7e4b3eb0d34eb0d</anchor>
      <arglist>(const HepRotationY &amp;ry) const </arglist>
    </member>
    <member kind="function">
      <type>HepRotationY &amp;</type>
      <name>operator*=</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>10572b48c81d939e7942d887f0b94869</anchor>
      <arglist>(const HepRotationY &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotationY &amp;</type>
      <name>transform</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>f0080d32266b2b96a291b241dad41b83</anchor>
      <arglist>(const HepRotationY &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotationY</type>
      <name>inverse</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>9f1ad1dd8c18c30d8953c029288702ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRotationY &amp;</type>
      <name>invert</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>e91828f860157f2ea93855c3209374b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>5f12132cfbf32f2755e012926fa1efb5</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getTolerance</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>6d6361541be122234fd4d620821b3eda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>setTolerance</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>1dc3af9c6a9fd699bcd73359cb75eae1</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HepRotationY</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>d649d0d708d863f5c870ccfc10622807</anchor>
      <arglist>(double dd, double ss, double cc)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static double</type>
      <name>proper</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>93c2c709a41e4f134493ff0e8b19c370</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>d</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>eff9b4015181b2dae752ba99dc190b61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>s</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>79c8a8a803e7fe3f5ecf3c431034381d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>c</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>b07915b5f3d3fe6bd66895e28ddd54d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend HepRotationY</type>
      <name>inverseOf</name>
      <anchorfile>classCLHEP_1_1HepRotationY.html</anchorfile>
      <anchor>e836af8261ea4ad22f128be51ef3af99</anchor>
      <arglist>(const HepRotationY &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::HepRotationZ</name>
    <filename>classCLHEP_1_1HepRotationZ.html</filename>
    <member kind="function">
      <type></type>
      <name>HepRotationZ</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>1d613969e8dead038fcbc442347676a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRotationZ</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>284104fd8ef3e5c2a762b961094d44fc</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HepRotationZ</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>0f0b358955a4ff595523e7074c15acbe</anchor>
      <arglist>(const HepRotationZ &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type>HepRotationZ &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>f3189749efc6c136ab40f0e70c380acf</anchor>
      <arglist>(const HepRotationZ &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotationZ &amp;</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>1a7051317aeb7751142f62fbe8abfe85</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HepRotationZ</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>d5050e2db8c44ecda8f8b31d071c43fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>colX</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>22814ec9e0cb84a4ea94da7303b1bcd5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>colY</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>82a5f54051adf4af37d7b0b718bbab39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>colZ</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>67e24ec3cde44b03ff0924337d0fb4cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rowX</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>06969c957beaf566e2d0334c5b04af3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rowY</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>8c1ae35a20aa154f42038111790be012</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>rowZ</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>18238d2250d3fbc099fc700c2eb546d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xx</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>4a96728ba2960a936090cb55b1dffc07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xy</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>8a293e83bf09dc79429b0fc5574bd40a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xz</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>1958bf548a78a3f393bbf6fb3ea4f515</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yx</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>fbb375737687507d0bbd1d43921d7469</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yy</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>f15dc579d53b1f565a280b85b2aadee9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yz</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>c4b7f2037afa05222a3d426c87bc2e2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zx</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>720170da423005e70d9f67ef3aa3f7ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zy</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>2894b0fc0dcb97784221ab1835a9f05d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zz</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>e22eda11ce11d2c0ad3f6c5bc044a5e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRep3x3</type>
      <name>rep3x3</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>e3fda42eb30de440c78beeadb9c0be50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPhi</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>d0a87970de0fa94c25fa43046d3913a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTheta</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>1fb076435fd9f1ba210b4287de13362c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPsi</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>6c2c7c5cb5cdc8473017a91e2871d7a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phi</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>ce702c9901fca32245cc9a5f32f7b398</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>theta</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>cb9dbc8f6f777754234274137be18ff9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>psi</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>88d3bce51400865b788712ae22f5d862</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepEulerAngles</type>
      <name>eulerAngles</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>2733ab69eff5fc005cf61723bbb7324c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDelta</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>05f5bb4fc3e6874eb89624d7a176a625</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>getAxis</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>efe86ac41470d0ac2b538e4e21131699</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>delta</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>5c9aa0c559e5feab64b9f98954fe84b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>axis</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>f3a47a9ecafbc8384a81aa3b7fef6ff7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepAxisAngle</type>
      <name>axisAngle</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>4bce93b62b4aa4398ffbf6dd063582e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAngleAxis</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>0ff217cad076603bd0e4a1ccd8acd05e</anchor>
      <arglist>(double &amp;delta, Hep3Vector &amp;axis) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phiX</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>9c7102c111386a137db3d40acea1da9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phiY</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>bccad10f00bce2a6cefd7d0917021755</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phiZ</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>07d84d2ef81c4d8d05fc63fc169c6c19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>thetaX</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>385307e7e63cb5d014c4e3494a8c1b71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>thetaY</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>a14407aa5273f1f37caf242f8f5cc1c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>thetaZ</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>96e7e0afe087b65c3cb75814a69c37ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col1</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>af51fddf6b7b0dd7997bd56f7169f799</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col2</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>653b77bc36da876b2f5adba46550efbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col3</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>f5f6dadad00830e0fc40351e21461bd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>col4</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>707493c605a6d51d2fedf0bf817a5ff7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row1</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>bce9671097ede75b4d32596a1a695ac6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row2</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>308e42638d8d4974de07c241b7db918f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row3</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>162682b421319e18b10b00da19dc55b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>row4</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>4e100742278e3c5ef1bfe20fbf0d7361</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xt</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>58a4706daa476e7236c856789f98803d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yt</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>75675d26a7fcb5949fb1d6f696aa47d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zt</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>9f9f0a54c03513fe033a7fba36ad2b6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tx</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>471dd6b575549f45d3eddee99df14336</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ty</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>b20250222b04890331583e08668701fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tz</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>27e4f35f4e3a37d1be75068a6f172bb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tt</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>450bba406d434b4b5b52ca42403e83c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRep4x4</type>
      <name>rep4x4</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>510872c74cc48cfe09cbd4fb5af9dfa0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDelta</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>9b6d707d26b50ee1ef8ec3063efe9663</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>795b94efc01e9ef378ab37d787d93029</anchor>
      <arglist>(HepAxisAngle &amp;rotation, Hep3Vector &amp;boost) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>f71e7772c54a70266dcda57bf1df6018</anchor>
      <arglist>(Hep3Vector &amp;boost, HepAxisAngle &amp;rotation) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>b46096be08d23583545844e447284dd2</anchor>
      <arglist>(HepRotation &amp;rotation, HepBoost &amp;boost) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>c10b8f8619ad9106b979e89153f992bf</anchor>
      <arglist>(HepBoost &amp;boost, HepRotation &amp;rotation) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>e3fbb70868b4fa399f25b83117f5e14d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>5d15768c73ca7d2be63677cd2f9a8317</anchor>
      <arglist>(const HepRotationZ &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>310c4d22fbc8814ea0db69255971e90b</anchor>
      <arglist>(const HepRotationZ &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>e46049f9e0ee3b53f697d6b0f8f29ae6</anchor>
      <arglist>(const HepRotationZ &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>1cd36a064de511200d1248e014bd4191</anchor>
      <arglist>(const HepRotationZ &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>6e57ab8c80aabb72150ed9a484196f87</anchor>
      <arglist>(const HepRotationZ &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>c488b9438a6162ac785a3dd4f53b54c0</anchor>
      <arglist>(const HepRotationZ &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>c171d36482f8f1c5ad87a75ea77286de</anchor>
      <arglist>(const HepRotationZ &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>03e5c738e0db00d96473ae9d34dd8dd0</anchor>
      <arglist>(const HepRotationZ &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>8013acdb3aa3d855053f8c2d0ec00b20</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>b9a4de1392afd5ac91f6c725f824afe0</anchor>
      <arglist>(const HepRotationZ &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>5e6bce30e95996a3c9de2536e1fbb921</anchor>
      <arglist>(const HepRotation &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>56149a746a1110a34c4d8eee426bfc9d</anchor>
      <arglist>(const HepRotationZ &amp;r, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>104e1198f348fa342151be36626c1275</anchor>
      <arglist>(const HepRotation &amp;r, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>4ef50b8eb2dd8a77744fa0a142a23b00</anchor>
      <arglist>(const HepBoost &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>4a9e7756d5ed5a6745d9e663d3c8f5e4</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>aca08194ec3081282033e03050037c2f</anchor>
      <arglist>(const HepBoost &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>a3e4a7286a572ad2233668f0ffcc0ae1</anchor>
      <arglist>(const HepLorentzRotation &amp;lt) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>200fd8a0b2f9d24c15bbdde17cff0153</anchor>
      <arglist>(const HepBoost &amp;lt, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>fa1bcbe5e637f9d5fa90632ee776ae4c</anchor>
      <arglist>(const HepLorentzRotation &amp;lt, double epsilon=Hep4RotationInterface::tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm2</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>7448306bd88eb47a208d1b15094d9b83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rectify</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>4b4096a7235e06e3d8ef8dd720a4c6fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>b2908e54a86391f83de103a60ac3ba13</anchor>
      <arglist>(const Hep3Vector &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>cf7a1afe84ffde225a8dd2b2a79891d4</anchor>
      <arglist>(const Hep3Vector &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>30f189395c4878abb01e441cb4cc3b15</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>HepLorentzVector</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>c9636643b7ef2d09e2cc2f1b37c748d0</anchor>
      <arglist>(const HepLorentzVector &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>HepRotationZ</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>9f09712fb29791e15b878198c86087b4</anchor>
      <arglist>(const HepRotationZ &amp;rz) const </arglist>
    </member>
    <member kind="function">
      <type>HepRotationZ &amp;</type>
      <name>operator*=</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>a59009384789f06c917ea48ca4c370b3</anchor>
      <arglist>(const HepRotationZ &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotationZ &amp;</type>
      <name>transform</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>1e1c50ce046a91121fa0d88bd7a2eca1</anchor>
      <arglist>(const HepRotationZ &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HepRotationZ</type>
      <name>inverse</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>2bb73bbbc24535ec35771905c1123039</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HepRotationZ &amp;</type>
      <name>invert</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>5444cbe6d2e76c104a69db133e2b49ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>55688c8f17cfa3fcfff1e22c8cc870b7</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getTolerance</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>6cae1b0888f1b217cf08eecefb17b475</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>setTolerance</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>c59759065897e0a7b790a7a4ba517299</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HepRotationZ</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>fed1add091149011901ef24ea486157f</anchor>
      <arglist>(double dd, double ss, double cc)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static double</type>
      <name>proper</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>e18bedd3ae86f813518d23c0555c0dd8</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>d</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>ae8f3e8d3540168dc3f181b13592fd79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>s</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>2bb2c82e5197b81473d6cc9d4eabe36a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>c</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>476338c5c2afd523b6b3437caf9e0d8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend HepRotationZ</type>
      <name>inverseOf</name>
      <anchorfile>classCLHEP_1_1HepRotationZ.html</anchorfile>
      <anchor>372240eb76d82eb6c3d2de14a0b851dc</anchor>
      <arglist>(const HepRotationZ &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::Hep3Vector</name>
    <filename>classCLHEP_1_1Hep3Vector.html</filename>
    <member kind="enumvalue">
      <name>X</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>759ca40189a75a7e187a52b3a9cc8ade0696d0dac44032f9e78424943d76083e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Y</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>759ca40189a75a7e187a52b3a9cc8ade9e240ccf813b759e5ff7adb4bde91b4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Z</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>759ca40189a75a7e187a52b3a9cc8ade104fa6c3dafe12b529b53b998c5b626d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_COORDINATES</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>759ca40189a75a7e187a52b3a9cc8ade5a99030dc208f72132934c4ca56c7c9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIZE</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>759ca40189a75a7e187a52b3a9cc8adef8928699e74a16f3aa48e4cd79095f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ToleranceTicks</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>4efe192585641226fd6efeaebfd9ff8e3b2183f35726db729818ad29a6dc94ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hep3Vector</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>18cd7d6102c169b8a4c24370d0309800</anchor>
      <arglist>(double x=0.0, double y=0.0, double z=0.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hep3Vector</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>38c330e75350b847fd544c3c1f9086ba</anchor>
      <arglist>(const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Hep3Vector</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>cfd40eb7a2d84c8e99cf86e2cd4358a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>ea820d89ff7aad9d210352772648faae</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>3691537f2b123a2d8303556a14a45c6d</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>49e71ae4d8a4125866fc3c212e0c9a82</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>03c0a03b87e60a370ce94960e134de8f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>86646a7299d9b55d1ee3a27b578d30ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>86ef096e76d7db9e0ea8e10eb742a576</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>2dcfdfeae86f250117ea40f086bb231a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>d8884887834eeae070b4495de82a73c1</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>509fe8a8faa83d10fcd741aaba240893</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZ</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>86f1045eb36c8f912c9931f9a4b8b321</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>bd8b55ba393986873db4fe1a9b709ff9</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phi</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>441a34886b5dc98abb4543f1daf504a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>theta</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>08a0f09b25bf69cc78fcd8ad328e763c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cosTheta</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>838bfe2cb9c867a036c58154f6c92c6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cos2Theta</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>f613debf3ddceb58de896adea7da88a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mag2</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>7aa4cc075d04401cf3aadb8bd30f4aa2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mag</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>eef00a2607300d7c8e7fb8fd6e520102</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhi</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>ddc83dfe68d0ea17503d92a2e653e5d4</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTheta</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>822e3f042a8f7374b1bbf1936f2a46ce</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMag</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>c214bdb220757a1a83c4fceab1cae48f</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>perp2</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>79b76879f0fa8398b71e57c9691bb33d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>perp</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>8ab4ef6700b595ca06b949b58a3fe65a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerp</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>2ffa987bf1d663865fd80ce9f398da09</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCylTheta</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>e4e0cdd6d00dafd8dba5eb7610927d14</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>perp2</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>87a17cc1b6db22b66cda7e0c910e1038</anchor>
      <arglist>(const Hep3Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>perp</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>260741be75204b203188e31018e70fab</anchor>
      <arglist>(const Hep3Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>767535ebf1d1c5db5b15ad215c2aa5b6</anchor>
      <arglist>(const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>d7eef69585ce765c79fa3c21c1bb2698</anchor>
      <arglist>(const Hep3Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>9ad9b393770819f3d88fdd0d69b5e09f</anchor>
      <arglist>(const Hep3Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>a5acf50f6246e56603966fb948661c89</anchor>
      <arglist>(const Hep3Vector &amp;, double epsilon=tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>40b3c03f3590b4fa60520d0ed8ceba29</anchor>
      <arglist>(const Hep3Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deltaR</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>de00be2b5a771280434b4019deb3798a</anchor>
      <arglist>(const Hep3Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector &amp;</type>
      <name>operator+=</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>eac073f95ccc646075cdd5691134da4e</anchor>
      <arglist>(const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector &amp;</type>
      <name>operator-=</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>09c6c9757a22d2b5eb517adcf87d92a7</anchor>
      <arglist>(const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>operator-</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>98fc2cf809152cd8c9c5eb032431793b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector &amp;</type>
      <name>operator*=</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>9e7292a4b02d500b75015e1c71a8a538</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector &amp;</type>
      <name>operator/=</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>ffab583cb39b38da81d2399f028aab54</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>unit</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>e4a83ec7ab138bcf10beda58dfa76baf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>orthogonal</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>aeefd99d2e17b87ddd10554614c7a290</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>3b24b40b735f0f3fd9ff2bf60c3046d4</anchor>
      <arglist>(const Hep3Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>cross</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>c839b0dd2e408ee8fbbc453dfeb906f2</anchor>
      <arglist>(const Hep3Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>angle</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>206d1f838c9dd54364628a56febb13ea</anchor>
      <arglist>(const Hep3Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pseudoRapidity</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>aa57d10d81b5d90c6bc8b1dcf8586272</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEta</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>1b6b5fe485b27e3b351c54873ec94ea8</anchor>
      <arglist>(double p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCylEta</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>64ba5d946968fa3312bb3d805736d1da</anchor>
      <arglist>(double p)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector &amp;</type>
      <name>rotateX</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>5b61bc5cf5899097f54ba24ff77995d3</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector &amp;</type>
      <name>rotateY</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>4d75e8d4b9db3c332374fc6d02750470</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector &amp;</type>
      <name>rotateZ</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>bd9dfee2d7a4f597fccbaa6f8ad143e8</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector &amp;</type>
      <name>rotateUz</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>da4364f96df2afbe1b2fd70decb229ed</anchor>
      <arglist>(const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector &amp;</type>
      <name>rotate</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>4ae6201e053d4c72e33c78c53482f750</anchor>
      <arglist>(double, const Hep3Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector &amp;</type>
      <name>operator*=</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>9c354db1669d9ac0b2256c0694e3a833</anchor>
      <arglist>(const HepRotation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector &amp;</type>
      <name>transform</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>3e876e0836bf9ca702feec24e78ea558</anchor>
      <arglist>(const HepRotation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRThetaPhi</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>6f6371835190f944de8bab67e5bf86c1</anchor>
      <arglist>(double r, double theta, double phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setREtaPhi</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>d89ef4afb7d8e8d2bba0c757c69dd723</anchor>
      <arglist>(double r, double eta, double phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRhoPhiZ</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>67e9dfbb02871f7437549fdcc998a24d</anchor>
      <arglist>(double rho, double phi, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRhoPhiTheta</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>dc413c9d783d1ebfce26a3271ebcc990</anchor>
      <arglist>(double rho, double phi, double theta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRhoPhiEta</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>31c3408500f1a345861dd0d429524586</anchor>
      <arglist>(double rho, double phi, double eta)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getX</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>3613549b742e2eb4a24fe65491e25cca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getY</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>8ffa37518294768554dfc7c44b57ee57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getZ</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>c078905f29dfb5db508223cfd6a5c68a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getR</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>e3bb258425d2e5e6fbc5c1db79826b6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTheta</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>a645920ac8465254ec756aa41649e409</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPhi</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>8b04f1edff78922ead03ac79dcf1982e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>r</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>81fbadf6ac5bc43af98d6364262dda53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rho</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>923d82f6605a047654178f6ed35eaeae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRho</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>3a4b86c97bb04900304e9c1aefbcdcfc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eta</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>eb5762eebf9069f056c6931917dbd506</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEta</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>7c729a89a32a40d7dbbf7c528666dc2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setR</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>7b3c3cebc1841f52ec899218bafe74a0</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRho</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>e99c406e4c543a45882d2edd393d88ff</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>a42b0c45cb010916fa13781a81af1bb7</anchor>
      <arglist>(const Hep3Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>bcd235dd4026a898b7172af7bf1aef9a</anchor>
      <arglist>(const Hep3Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>8a0a75438ae8c27db719c4559afc17c4</anchor>
      <arglist>(const Hep3Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>fc99ef6782ccc3f3f62cf80fa7fdbf45</anchor>
      <arglist>(const Hep3Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>fdf6307948429c465f11d5834791c0a0</anchor>
      <arglist>(const Hep3Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>diff2</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>6e9543c5e257ba8302958e068ca88a9d</anchor>
      <arglist>(const Hep3Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParallel</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>23123dbe67469bbb3a1ef5842c1b28ec</anchor>
      <arglist>(const Hep3Vector &amp;v, double epsilon=tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrthogonal</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>8c41ad20b997cfe9862af8d1a453f141</anchor>
      <arglist>(const Hep3Vector &amp;v, double epsilon=tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howParallel</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>74d669f72bcaffc7659b8be7660efc81</anchor>
      <arglist>(const Hep3Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howOrthogonal</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>ef66f5b3faa7c4ffbc43ccf5b68d38d7</anchor>
      <arglist>(const Hep3Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>ae6737815deea53cb307b2861ca4e9a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gamma</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>8e3fa5213b34d7a877b74b44d579e314</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>coLinearRapidity</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>c5f3a240307562f694253ae12ac6dab5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>angle</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>450be83259e0ef9f174b2d3c99b0d136</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>theta</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>2ce96fe98508ea56522cb952fdb8f007</anchor>
      <arglist>(const Hep3Vector &amp;v2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cosTheta</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>a042daf21729ae2ea048401a892b58bf</anchor>
      <arglist>(const Hep3Vector &amp;v2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cos2Theta</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>ab886ab186b54c69788285e41902fed3</anchor>
      <arglist>(const Hep3Vector &amp;v2) const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>project</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>ed15e39f9eafcfa92245d5be90fef855</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>project</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>482fcaa10251f473b7092cad3e17d8c5</anchor>
      <arglist>(const Hep3Vector &amp;v2) const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>perpPart</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>4954005a73b7a849e85546445a5e29d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector</type>
      <name>perpPart</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>2988bbf1989468f6396712c65c34191f</anchor>
      <arglist>(const Hep3Vector &amp;v2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rapidity</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>3421446aedc13aff96806a7a947e65b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rapidity</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>25d6ffafed5099cbc3784eb35e382cb6</anchor>
      <arglist>(const Hep3Vector &amp;v2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eta</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>695e356c63993f6bf2154e387fc05e68</anchor>
      <arglist>(const Hep3Vector &amp;v2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>polarAngle</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>b06236565dc36622ef0b3fc4ae8e5a1d</anchor>
      <arglist>(const Hep3Vector &amp;v2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deltaPhi</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>f2ab32671a367979e586d9ea936e26b7</anchor>
      <arglist>(const Hep3Vector &amp;v2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>azimAngle</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>d7a96416b2b7c73c1cfb1112016cd7a9</anchor>
      <arglist>(const Hep3Vector &amp;v2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>polarAngle</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>f68a6c342d7d3000c2a810bc6d9f11ab</anchor>
      <arglist>(const Hep3Vector &amp;v2, const Hep3Vector &amp;ref) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>azimAngle</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>f50c39732ca8b93355fd100287d8a608</anchor>
      <arglist>(const Hep3Vector &amp;v2, const Hep3Vector &amp;ref) const </arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector &amp;</type>
      <name>rotate</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>f7a719380ce3b73ae8ebe77e3ee7a057</anchor>
      <arglist>(const Hep3Vector &amp;axis, double delta)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector &amp;</type>
      <name>rotate</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>14f961c07bc5d4dfc6cea97eaac0dcf9</anchor>
      <arglist>(const HepAxisAngle &amp;ax)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector &amp;</type>
      <name>rotate</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>2cebc0ce1d785b4b7b557da462828920</anchor>
      <arglist>(const HepEulerAngles &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Hep3Vector &amp;</type>
      <name>rotate</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>64162142e08998eda9305d3cfb6b9ad9</anchor>
      <arglist>(double phi, double theta, double psi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>setTolerance</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>ca45a40cb63a91647dd3087019120c0c</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getTolerance</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>85323d1c2deb65650473c28ebc1e74b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setSpherical</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>6a695daf2cc6024075cf50ec4c237b02</anchor>
      <arglist>(double r, double theta, double phi)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setCylindrical</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>bb959898943ab669a95ee1d6ed4c3a8c</anchor>
      <arglist>(double r, double phi, double z)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>negativeInfinity</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>9f1f9911a588a13d8935166ec9d9f122</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dx</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>74b12975803aa24fa0a086db6fba3613</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dy</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>91e11b76654c58394d28913c8a7dbd55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dz</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>24f1cf21be49cb71feeb8e1673519ec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static double</type>
      <name>tolerance</name>
      <anchorfile>classCLHEP_1_1Hep3Vector.html</anchorfile>
      <anchor>4333711fd8ab5a6b21f1540dfc9b49ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CLHEP::Hep2Vector</name>
    <filename>classCLHEP_1_1Hep2Vector.html</filename>
    <member kind="enumvalue">
      <name>X</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>628058bf4b7650978b5511432f2f2924ff0f3bac7af4178e434b9c7d56da8201</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Y</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>628058bf4b7650978b5511432f2f2924dc97c94119324f59783fa7e0bc38521b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_COORDINATES</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>628058bf4b7650978b5511432f2f2924418376c2a66648eaeb8f878edc688250</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIZE</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>628058bf4b7650978b5511432f2f2924037e812f7974b27156e5b4923646e665</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMpvToleranceTicks</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>6db8e89f3c28da07f1d2d3e99a3e8ec5b90c90d84c3de38532fc335c02f5a9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hep2Vector</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>fabdfc70ec79c3ceda9fbf7111c7f34e</anchor>
      <arglist>(double x=0.0, double y=0.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hep2Vector</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>ddc01b5fa932ca84df84f851e6bbb31b</anchor>
      <arglist>(const Hep2Vector &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hep2Vector</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>9091fdedcce98d2f75e45475b4b6b376</anchor>
      <arglist>(const Hep3Vector &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Hep2Vector</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>8622e9e1ffc609ff6a77efca7f215535</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>b26c6f014e107086e697c86cb1c24dae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>cf0b1799f84792d758f7d955658cdb1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>ca568627094275296bfd2ad99fca8d44</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>894be4d3e09597de11d4ce760388b975</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>6bed577c7514833b2ada8274b887c7a6</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>d55b19105ca392df64e36a59c5c6a9a6</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>5cb7a99413fdbcec3b3fadff0a69bfb0</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>491a213201a8bf8ea22b33993092f627</anchor>
      <arglist>(double y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>ac621c71ccc508d091f0b815b38455e0</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>phi</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>3f02a8aa1bfa2ae74e90f4671fd48438</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mag2</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>d33f1fbd621a3cee7d3d160a12aaf432</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mag</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>2dc5d3a0e834740dd639db9fa26bd2d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>r</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>4542ee9cdcf7dc77d47083b3a624d949</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhi</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>89ca9363f0263b39cbafe23fbc90880f</anchor>
      <arglist>(double phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMag</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>2eaa10bda80b721e240e22a6dcaec34f</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setR</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>67fe6c514355b78cbd8f61bb6ed44c08</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPolar</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>a035295f62c3a84bcec433c4e07575f9</anchor>
      <arglist>(double r, double phi)</arglist>
    </member>
    <member kind="function">
      <type>Hep2Vector &amp;</type>
      <name>operator=</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>d0c16f9c129cc304134ad961d9187177</anchor>
      <arglist>(const Hep2Vector &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>b9e7accc49ab371b765a16232407532f</anchor>
      <arglist>(const Hep2Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>4c60961f546f986649705a549e089bf4</anchor>
      <arglist>(const Hep2Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>7fda52848c93a8b480253963dc1413d6</anchor>
      <arglist>(const Hep2Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>5af1f09f601130e14b65e3be6532bc84</anchor>
      <arglist>(const Hep2Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>a0041d08ce9b7dcab46631a8d1b4be67</anchor>
      <arglist>(const Hep2Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>e28c251dcb9173caa2cfbb112fd31c2d</anchor>
      <arglist>(const Hep2Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>ee87c17bfaab07a2fd4dcfad43babb92</anchor>
      <arglist>(const Hep2Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howNear</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>6305a0bb58dc85d6e7d7178d51a0fa95</anchor>
      <arglist>(const Hep2Vector &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>7a28a6a6774c4ba5048e881d8dbb9d97</anchor>
      <arglist>(const Hep2Vector &amp;p, double epsilon=tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howParallel</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>25197b3c16c524b3c6eee00816f4295f</anchor>
      <arglist>(const Hep2Vector &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParallel</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>1ef6bc247b1210b04a40743ee0bd2624</anchor>
      <arglist>(const Hep2Vector &amp;p, double epsilon=tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>howOrthogonal</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>d5cdc68d85648c80389bef1612bb2433</anchor>
      <arglist>(const Hep2Vector &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrthogonal</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>cccb9145f6c448b34e036f84981837b0</anchor>
      <arglist>(const Hep2Vector &amp;p, double epsilon=tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>Hep2Vector &amp;</type>
      <name>operator+=</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>0f57d1566b7f0bb77764b9eabac4516a</anchor>
      <arglist>(const Hep2Vector &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Hep2Vector &amp;</type>
      <name>operator-=</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>f574dbbe4a693b5a1f563442e8ccd961</anchor>
      <arglist>(const Hep2Vector &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Hep2Vector</type>
      <name>operator-</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>70d5afcaac692ae0eaeb930aef60cbf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep2Vector &amp;</type>
      <name>operator*=</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>b9ead9cd0c5f949c6018d2dee44f34d6</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>Hep2Vector</type>
      <name>unit</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>9f105372c11fd46d12cfe026022dc1f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hep2Vector</type>
      <name>orthogonal</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>196a775b9ab2b32095923995715dce74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>21fbeabdb4434731f06d2462deaa8c27</anchor>
      <arglist>(const Hep2Vector &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>angle</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>82815296f23a28c7f0c76a192dd10a9b</anchor>
      <arglist>(const Hep2Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>f298af20dc32ea086fd6c78903fd380f</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Hep3Vector</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>700a17dae11ab2370e90655e45536e1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getTolerance</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>5196dc899ae371e33e834ecee288968b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>setTolerance</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>7cb5e2d4d6ba70d75828711a0b0c8950</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>15084db8df6812f1d7caf86a5776fc25</anchor>
      <arglist>(std::ostream &amp;, const Hep2Vector &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend double</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>8b13dcc5cb0241708c9085adcc7f85b4</anchor>
      <arglist>(const Hep2Vector &amp;a, const Hep2Vector &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend Hep2Vector</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>1d97a0c310a7eafa386eaeca3dca8513</anchor>
      <arglist>(const Hep2Vector &amp;p, double a)</arglist>
    </member>
    <member kind="friend">
      <type>friend Hep2Vector</type>
      <name>operator*</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>b0cc1b4d701956e462d3384564c89db4</anchor>
      <arglist>(double a, const Hep2Vector &amp;p)</arglist>
    </member>
    <member kind="friend">
      <type>friend Hep2Vector</type>
      <name>operator/</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>fc3dc48a65de6aa8f84ab3307ccc0f24</anchor>
      <arglist>(const Hep2Vector &amp;p, double a)</arglist>
    </member>
    <member kind="friend">
      <type>friend Hep2Vector</type>
      <name>operator+</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>8be6151f9dae4cd2d2c9826e6dac3b27</anchor>
      <arglist>(const Hep2Vector &amp;a, const Hep2Vector &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend Hep2Vector</type>
      <name>operator-</name>
      <anchorfile>classCLHEP_1_1Hep2Vector.html</anchorfile>
      <anchor>4bf31f7360ef660f517f88e7fb8d9a2a</anchor>
      <arglist>(const Hep2Vector &amp;a, const Hep2Vector &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Genfun</name>
    <filename>namespaceGenfun.html</filename>
    <class kind="class">Genfun::Abs</class>
    <class kind="class">Genfun::AbsFunction</class>
    <class kind="class">Genfun::AbsFunctional</class>
    <class kind="class">Genfun::AbsParameter</class>
    <class kind="class">Genfun::ACos</class>
    <class kind="class">Genfun::AnalyticConvolution</class>
    <class kind="class">Genfun::Argument</class>
    <class kind="class">Genfun::ArrayFunction</class>
    <class kind="class">Genfun::ASin</class>
    <class kind="class">Genfun::AssociatedLaguerre</class>
    <class kind="class">Genfun::AssociatedLegendre</class>
    <class kind="class">Genfun::ATan</class>
    <class kind="class">Genfun::BivariateGaussian</class>
    <class kind="class">Genfun::ConstMinusFunction</class>
    <class kind="class">Genfun::ConstMinusParameter</class>
    <class kind="class">Genfun::ConstOverFunction</class>
    <class kind="class">Genfun::ConstOverParameter</class>
    <class kind="class">Genfun::ConstPlusFunction</class>
    <class kind="class">Genfun::ConstPlusParameter</class>
    <class kind="class">Genfun::ConstTimesFunction</class>
    <class kind="class">Genfun::ConstTimesParameter</class>
    <class kind="class">Genfun::Cos</class>
    <class kind="class">Genfun::CumulativeChiSquare</class>
    <class kind="class">Genfun::DefiniteIntegral</class>
    <class kind="class">Genfun::DoubleParamToArgAdaptor</class>
    <class kind="class">Genfun::Erf</class>
    <class kind="class">Genfun::Exp</class>
    <class kind="class">Genfun::Exponential</class>
    <class kind="class">Genfun::FixedConstant</class>
    <class kind="class">Genfun::FloatingConstant</class>
    <class kind="class">Genfun::FunctionComposition</class>
    <class kind="class">Genfun::FunctionConvolution</class>
    <class kind="class">Genfun::FunctionDifference</class>
    <class kind="class">Genfun::FunctionDirectProduct</class>
    <class kind="class">Genfun::FunctionNegation</class>
    <class kind="class">Genfun::FunctionNoop</class>
    <class kind="class">Genfun::FunctionNumDeriv</class>
    <class kind="class">Genfun::FunctionPlusParameter</class>
    <class kind="class">Genfun::FunctionProduct</class>
    <class kind="class">Genfun::FunctionQuotient</class>
    <class kind="class">Genfun::FunctionSum</class>
    <class kind="class">Genfun::FunctionTimesParameter</class>
    <class kind="class">Genfun::Gaussian</class>
    <class kind="class">Genfun::IncompleteGamma</class>
    <class kind="class">Genfun::Landau</class>
    <class kind="class">Genfun::LikelihoodFunctional</class>
    <class kind="class">Genfun::Ln</class>
    <class kind="class">Genfun::LogGamma</class>
    <class kind="class">Genfun::LogisticFunction</class>
    <class kind="class">Genfun::Mod</class>
    <class kind="class">Genfun::Parameter</class>
    <class kind="class">Genfun::ParameterDifference</class>
    <class kind="class">Genfun::ParameterNegation</class>
    <class kind="class">Genfun::ParameterProduct</class>
    <class kind="class">Genfun::ParameterQuotient</class>
    <class kind="class">Genfun::ParameterSum</class>
    <class kind="class">Genfun::ParamToArgAdaptor</class>
    <class kind="class">Genfun::PeriodicRectangular</class>
    <class kind="class">Genfun::Power</class>
    <class kind="class">Genfun::Psi2Hydrogen</class>
    <class kind="class">Genfun::PtRelFcn</class>
    <class kind="class">Genfun::PuncturedSmearedExp</class>
    <class kind="class">Genfun::RCBase</class>
    <class kind="class">Genfun::Rectangular</class>
    <class kind="class">Genfun::ReverseExponential</class>
    <class kind="class">Genfun::RKIntegrator</class>
    <class kind="class">Genfun::Sigma</class>
    <class kind="class">Genfun::Sin</class>
    <class kind="class">Genfun::SphericalBessel</class>
    <class kind="class">Genfun::SphericalNeumann</class>
    <class kind="class">Genfun::Sqrt</class>
    <class kind="class">Genfun::Square</class>
    <class kind="class">Genfun::Tan</class>
    <class kind="class">Genfun::TrivariateGaussian</class>
    <class kind="class">Genfun::Variable</class>
    <class kind="class">Genfun::X_</class>
    <namespace>Genfun::EllipticIntegral</namespace>
    <namespace>Genfun::FractionalOrder</namespace>
    <namespace>Genfun::IntegralOrder</namespace>
    <member kind="typedef">
      <type>FunctionNoop</type>
      <name>Derivative</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>1cf3cb0e92ceeae93b4039d1f94a556d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const AbsFunction &amp;</type>
      <name>GENFUNCTION</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>e675b24415ef3794cc4d972883346330</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const AbsParameter &amp;</type>
      <name>GENPARAMETER</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>d31219672a371acddf83da0a4d23522f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Argument &gt;</type>
      <name>ArgumentList</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>a700049d4d57bab580af1430b402dc01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FunctionProduct</type>
      <name>operator*</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>6ea72342bf3600846fe3f77db6b44999</anchor>
      <arglist>(const AbsFunction &amp;op1, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionSum</type>
      <name>operator+</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>6309714fc7fbb8f038df55e1b251db38</anchor>
      <arglist>(const AbsFunction &amp;op1, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionDifference</type>
      <name>operator-</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>e039d3ab5ec673bf49caa75d244bf1c5</anchor>
      <arglist>(const AbsFunction &amp;op1, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionQuotient</type>
      <name>operator/</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>0d326e4a0993616acfc421c40b4c8e7d</anchor>
      <arglist>(const AbsFunction &amp;op1, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionNegation</type>
      <name>operator-</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>256731da53cfcdc5a123c956d9873864</anchor>
      <arglist>(const AbsFunction &amp;op1)</arglist>
    </member>
    <member kind="function">
      <type>ConstTimesFunction</type>
      <name>operator*</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>7b45eb6282401656d5e07dea4d4c99e2</anchor>
      <arglist>(double c, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ConstPlusFunction</type>
      <name>operator+</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>90e3356b0756953b36df636d0d1f335e</anchor>
      <arglist>(double c, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ConstMinusFunction</type>
      <name>operator-</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>dd8782afbba0e593969a1a4ed474c3b9</anchor>
      <arglist>(double c, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ConstOverFunction</type>
      <name>operator/</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>b221cb784756fb4d6d633808daf4031a</anchor>
      <arglist>(double c, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ConstTimesFunction</type>
      <name>operator*</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>eae5794de90f6f7b45bf245a68ccc6d2</anchor>
      <arglist>(const AbsFunction &amp;op2, double c)</arglist>
    </member>
    <member kind="function">
      <type>ConstPlusFunction</type>
      <name>operator+</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>09cdb7dd5516a17669df0cb790beb5dc</anchor>
      <arglist>(const AbsFunction &amp;op2, double c)</arglist>
    </member>
    <member kind="function">
      <type>ConstPlusFunction</type>
      <name>operator-</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>cf85ec6ff6cf06f83d5c7972b37b5aec</anchor>
      <arglist>(const AbsFunction &amp;op2, double c)</arglist>
    </member>
    <member kind="function">
      <type>ConstTimesFunction</type>
      <name>operator/</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>1856d4ae054bb9dd853c94436a0edbc7</anchor>
      <arglist>(const AbsFunction &amp;op2, double c)</arglist>
    </member>
    <member kind="function">
      <type>FunctionTimesParameter</type>
      <name>operator*</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>63537d7aca717ef5a8b4ebdc3697ee4b</anchor>
      <arglist>(const AbsFunction &amp;op1, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionPlusParameter</type>
      <name>operator+</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>7f1d492175fbe109aecd763ab6e7f75d</anchor>
      <arglist>(const AbsFunction &amp;op1, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionPlusParameter</type>
      <name>operator-</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>92154d6e421c9e2e8c536db50dba406e</anchor>
      <arglist>(const AbsFunction &amp;op1, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionTimesParameter</type>
      <name>operator/</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>f685b18de0d4a3ea553e3d0dbfd60edc</anchor>
      <arglist>(const AbsFunction &amp;op1, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionTimesParameter</type>
      <name>operator*</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>28c4222aaede11cfa9e001156da3f80c</anchor>
      <arglist>(const AbsParameter &amp;op1, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionPlusParameter</type>
      <name>operator+</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>75b5672e3ac94c0cd754bb9037aee453</anchor>
      <arglist>(const AbsParameter &amp;op1, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionPlusParameter</type>
      <name>operator-</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>8503dfc6ca147bfe024abf84e66b4986</anchor>
      <arglist>(const AbsParameter &amp;op1, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionTimesParameter</type>
      <name>operator/</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>ebce116d078e5e158ad0b6348d846da8</anchor>
      <arglist>(const AbsParameter &amp;op1, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>FunctionConvolution</type>
      <name>convolve</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>a2dd0a951892c6939bcb49ceb1d06bd5</anchor>
      <arglist>(const AbsFunction &amp;op1, const AbsFunction &amp;op2, double x0, double x1)</arglist>
    </member>
    <member kind="function">
      <type>FunctionDirectProduct</type>
      <name>operator%</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>4328e69f8cf804e2f8a3a647eed372b0</anchor>
      <arglist>(const AbsFunction &amp;op1, const AbsFunction &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ConstTimesParameter</type>
      <name>operator*</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>83ebbf124242c189d7665810764c2bda</anchor>
      <arglist>(double c, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ConstPlusParameter</type>
      <name>operator+</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>50eb96c1c2cc2884e6cbb3d4169a88cf</anchor>
      <arglist>(double c, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ConstMinusParameter</type>
      <name>operator-</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>88cf3b849561923b6b05801742c747fe</anchor>
      <arglist>(double c, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ConstOverParameter</type>
      <name>operator/</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>87bac85fd0cf06b4d9a9b3c1dc0b7b0a</anchor>
      <arglist>(double c, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ConstTimesParameter</type>
      <name>operator*</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>e0f2922312010123e96b759a598ce206</anchor>
      <arglist>(const AbsParameter &amp;op2, double c)</arglist>
    </member>
    <member kind="function">
      <type>ConstPlusParameter</type>
      <name>operator+</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>64105b503cd39fb018f53ab78ff87584</anchor>
      <arglist>(const AbsParameter &amp;op2, double c)</arglist>
    </member>
    <member kind="function">
      <type>ConstPlusParameter</type>
      <name>operator-</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>06bc4598a5b0606e0a93c7ced7b84b69</anchor>
      <arglist>(const AbsParameter &amp;op2, double c)</arglist>
    </member>
    <member kind="function">
      <type>ConstTimesParameter</type>
      <name>operator/</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>33430780a191c814f1fe26cd3c413d73</anchor>
      <arglist>(const AbsParameter &amp;op2, double c)</arglist>
    </member>
    <member kind="function">
      <type>ParameterProduct</type>
      <name>operator*</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>be0173a869aca33a4120377fcb2bb553</anchor>
      <arglist>(const AbsParameter &amp;op1, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ParameterSum</type>
      <name>operator+</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>f12482210599cad10433583bc4db0c80</anchor>
      <arglist>(const AbsParameter &amp;op1, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ParameterDifference</type>
      <name>operator-</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>c157887f959f77d531f5993cf0af5375</anchor>
      <arglist>(const AbsParameter &amp;op1, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ParameterQuotient</type>
      <name>operator/</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>c95bf9bae1109ab317614c79d4f27d55</anchor>
      <arglist>(const AbsParameter &amp;op1, const AbsParameter &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>ParameterNegation</type>
      <name>operator-</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>b460ec3f9ca30bb9aadd1429715510e5</anchor>
      <arglist>(const AbsParameter &amp;op1)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>1c7b9509451aa1eb5ae47d3d3efda3c6</anchor>
      <arglist>(std::ostream &amp;os, const Argument &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceGenfun.html</anchorfile>
      <anchor>2b79b1ed5154e208795dc1a9e390fd8d</anchor>
      <arglist>(std::ostream &amp;o, const Parameter &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::Abs</name>
    <filename>classGenfun_1_1Abs.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>Abs</name>
      <anchorfile>classGenfun_1_1Abs.html</anchorfile>
      <anchor>246479d4011910d273541d7d3ca1ddb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Abs</name>
      <anchorfile>classGenfun_1_1Abs.html</anchorfile>
      <anchor>a7676ba7a51ab7edc12bc6e4da135afc</anchor>
      <arglist>(const Abs &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Abs</name>
      <anchorfile>classGenfun_1_1Abs.html</anchorfile>
      <anchor>dbf3e17040372bf604385de5c2abf1e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Abs.html</anchorfile>
      <anchor>983b2aaefa095a16defdbd5c4af67c14</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Abs.html</anchorfile>
      <anchor>ecb675dbe82298ea98891a0ed90d966c</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::AbsFunction</name>
    <filename>classGenfun_1_1AbsFunction.html</filename>
    <member kind="function">
      <type></type>
      <name>AbsFunction</name>
      <anchorfile>classGenfun_1_1AbsFunction.html</anchorfile>
      <anchor>767d7176f12c119a25e935e9b8586f81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbsFunction</name>
      <anchorfile>classGenfun_1_1AbsFunction.html</anchorfile>
      <anchor>7f1bf7b52b9c2e9e6be0d398defcc621</anchor>
      <arglist>(const AbsFunction &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbsFunction</name>
      <anchorfile>classGenfun_1_1AbsFunction.html</anchorfile>
      <anchor>c12ae9a2c6fcd569d63c451f123956a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dimensionality</name>
      <anchorfile>classGenfun_1_1AbsFunction.html</anchorfile>
      <anchor>bdb6c4381f08bdf95c91c1827dc7b54f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1AbsFunction.html</anchorfile>
      <anchor>fe72af9d243ae07d702117e16b7c42e9</anchor>
      <arglist>(double argument) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1AbsFunction.html</anchorfile>
      <anchor>3e87b59e983d589d4f2e71b58c1c8af9</anchor>
      <arglist>(const Argument &amp;argument) const =0</arglist>
    </member>
    <member kind="function">
      <type>AbsFunction *</type>
      <name>clone</name>
      <anchorfile>classGenfun_1_1AbsFunction.html</anchorfile>
      <anchor>9ba818e139dda83e085b3572d43ce042</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FunctionComposition</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1AbsFunction.html</anchorfile>
      <anchor>15dbdac3aaa5251b82eb2e6e3315a89d</anchor>
      <arglist>(const AbsFunction &amp;f) const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>derivative</name>
      <anchorfile>classGenfun_1_1AbsFunction.html</anchorfile>
      <anchor>7c793620ac39bc195361aa502126b914</anchor>
      <arglist>(const Variable &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>prime</name>
      <anchorfile>classGenfun_1_1AbsFunction.html</anchorfile>
      <anchor>32918fe0334388b7a7a696378a2fb80b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1AbsFunction.html</anchorfile>
      <anchor>2b17a4d841212b4fee5af8c724d658de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1AbsFunction.html</anchorfile>
      <anchor>11485dfd9ed5575e70ce702aaa1f5237</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::AbsFunctional</name>
    <filename>classGenfun_1_1AbsFunctional.html</filename>
    <member kind="function">
      <type></type>
      <name>AbsFunctional</name>
      <anchorfile>classGenfun_1_1AbsFunctional.html</anchorfile>
      <anchor>4ef268fcdc274dd734a121f972c48437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbsFunctional</name>
      <anchorfile>classGenfun_1_1AbsFunctional.html</anchorfile>
      <anchor>3d8788b55b2c240b97c945edf199a982</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>operator[]</name>
      <anchorfile>classGenfun_1_1AbsFunctional.html</anchorfile>
      <anchor>0d508567beb661f94d31e4cef6d74518</anchor>
      <arglist>(const AbsFunction &amp;function) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::AbsParameter</name>
    <filename>classGenfun_1_1AbsParameter.html</filename>
    <member kind="function">
      <type></type>
      <name>AbsParameter</name>
      <anchorfile>classGenfun_1_1AbsParameter.html</anchorfile>
      <anchor>a5c35bac720398ef047186eb611118c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbsParameter</name>
      <anchorfile>classGenfun_1_1AbsParameter.html</anchorfile>
      <anchor>bf75e8b057e90525f62257b88ec41138</anchor>
      <arglist>(const AbsParameter &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbsParameter</name>
      <anchorfile>classGenfun_1_1AbsParameter.html</anchorfile>
      <anchor>3fb650ba3f073f7f3c42c095d57bedda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>classGenfun_1_1AbsParameter.html</anchorfile>
      <anchor>659d39be41e90fbe6a24b16b97bdff7f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>AbsParameter *</type>
      <name>clone</name>
      <anchorfile>classGenfun_1_1AbsParameter.html</anchorfile>
      <anchor>e7daa4c655e0f2df37ae9d9c88209d86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Parameter *</type>
      <name>parameter</name>
      <anchorfile>classGenfun_1_1AbsParameter.html</anchorfile>
      <anchor>8ca4c312cafd563e497643b42ef58db6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Parameter *</type>
      <name>parameter</name>
      <anchorfile>classGenfun_1_1AbsParameter.html</anchorfile>
      <anchor>563918ef35f2132985b2320a9c96431d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::ACos</name>
    <filename>classGenfun_1_1ACos.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>ACos</name>
      <anchorfile>classGenfun_1_1ACos.html</anchorfile>
      <anchor>83c6f5c0f44498870c9f5ebdd15711aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ACos</name>
      <anchorfile>classGenfun_1_1ACos.html</anchorfile>
      <anchor>7186356e8ece68e771eff8ad0b9a4eec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACos</name>
      <anchorfile>classGenfun_1_1ACos.html</anchorfile>
      <anchor>baa636e5abf09b6c0fc2fd631f195afd</anchor>
      <arglist>(const ACos &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1ACos.html</anchorfile>
      <anchor>c1bf4d409b963425c90cb416b0b108e9</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1ACos.html</anchorfile>
      <anchor>4c16f425535ea73d40153ea76e9ec892</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1ACos.html</anchorfile>
      <anchor>37b55206739ea12bc561e3aeb7b5d0fa</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1ACos.html</anchorfile>
      <anchor>7d467d55fb087ace62fd0936125a4256</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::AnalyticConvolution</name>
    <filename>classGenfun_1_1AnalyticConvolution.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>classGenfun_1_1AnalyticConvolution.html</anchorfile>
      <anchor>6cae2e17ae052fd70a4529c4c54c8ce9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIXED</name>
      <anchorfile>classGenfun_1_1AnalyticConvolution.html</anchorfile>
      <anchor>6cae2e17ae052fd70a4529c4c54c8ce9ee06a6a0b81aa1dd60f4ddd97e3b2fa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNMIXED</name>
      <anchorfile>classGenfun_1_1AnalyticConvolution.html</anchorfile>
      <anchor>6cae2e17ae052fd70a4529c4c54c8ce94f33624bcbcad2240cb43a77a78dbecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SMEARED_EXP</name>
      <anchorfile>classGenfun_1_1AnalyticConvolution.html</anchorfile>
      <anchor>6cae2e17ae052fd70a4529c4c54c8ce9597b447d66e85bbf509af403e995e020</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SMEARED_COS_EXP</name>
      <anchorfile>classGenfun_1_1AnalyticConvolution.html</anchorfile>
      <anchor>6cae2e17ae052fd70a4529c4c54c8ce9fdbb3eeb242492bfca109b4fef14c86d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SMEARED_SIN_EXP</name>
      <anchorfile>classGenfun_1_1AnalyticConvolution.html</anchorfile>
      <anchor>6cae2e17ae052fd70a4529c4c54c8ce979f8eee059d5d5c089d2c1da1b304d9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SMEARED_NEG_EXP</name>
      <anchorfile>classGenfun_1_1AnalyticConvolution.html</anchorfile>
      <anchor>6cae2e17ae052fd70a4529c4c54c8ce94fd41a878f507587ec3c4b6fb3523824</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnalyticConvolution</name>
      <anchorfile>classGenfun_1_1AnalyticConvolution.html</anchorfile>
      <anchor>7af0a48c96d7169a9621843de4e6ee03</anchor>
      <arglist>(Type=SMEARED_EXP)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnalyticConvolution</name>
      <anchorfile>classGenfun_1_1AnalyticConvolution.html</anchorfile>
      <anchor>1b13f057964f3cd9f4237f3f7f029633</anchor>
      <arglist>(const AnalyticConvolution &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AnalyticConvolution</name>
      <anchorfile>classGenfun_1_1AnalyticConvolution.html</anchorfile>
      <anchor>759df8463f33db8dbe241c5b9489e860</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1AnalyticConvolution.html</anchorfile>
      <anchor>d186c1dbfd3dab2b2aa1f083adccc76f</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1AnalyticConvolution.html</anchorfile>
      <anchor>95e5373c02a38bcc28e6d38fb4dc90ac</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>frequency</name>
      <anchorfile>classGenfun_1_1AnalyticConvolution.html</anchorfile>
      <anchor>99885195e10e44d4923a55ad2126c9dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>frequency</name>
      <anchorfile>classGenfun_1_1AnalyticConvolution.html</anchorfile>
      <anchor>dfbcdf57f8e7ef520da5b1970f8d6ba4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>lifetime</name>
      <anchorfile>classGenfun_1_1AnalyticConvolution.html</anchorfile>
      <anchor>1018b16a37e30c06862e8c6881f82428</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>lifetime</name>
      <anchorfile>classGenfun_1_1AnalyticConvolution.html</anchorfile>
      <anchor>03b79e952b5b57e615e773c92762667e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>sigma</name>
      <anchorfile>classGenfun_1_1AnalyticConvolution.html</anchorfile>
      <anchor>34eed4b0f3a280bc7f3f28da582c1daa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>sigma</name>
      <anchorfile>classGenfun_1_1AnalyticConvolution.html</anchorfile>
      <anchor>d203480cef5be14882217636a9d2733f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>offset</name>
      <anchorfile>classGenfun_1_1AnalyticConvolution.html</anchorfile>
      <anchor>1507ee3b37033466d16e44268432ba3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>offset</name>
      <anchorfile>classGenfun_1_1AnalyticConvolution.html</anchorfile>
      <anchor>bb62ddca0deb591270bd0bb0ab160429</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::Argument</name>
    <filename>classGenfun_1_1Argument.html</filename>
    <member kind="function">
      <type></type>
      <name>Argument</name>
      <anchorfile>classGenfun_1_1Argument.html</anchorfile>
      <anchor>0cfac9652713b678f0249603d05c1966</anchor>
      <arglist>(int ndim=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Argument</name>
      <anchorfile>classGenfun_1_1Argument.html</anchorfile>
      <anchor>8d8998f579458abad064b13c3eec3a4d</anchor>
      <arglist>(const Argument &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const Argument &amp;</type>
      <name>operator=</name>
      <anchorfile>classGenfun_1_1Argument.html</anchorfile>
      <anchor>34d82cbd5d6ab7264e6dbf79068bf64a</anchor>
      <arglist>(const Argument &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Argument</name>
      <anchorfile>classGenfun_1_1Argument.html</anchorfile>
      <anchor>0d0a269c6e7dd9f929d6379578b7f0ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classGenfun_1_1Argument.html</anchorfile>
      <anchor>b5fff9deb9e44a506b1952fce72f6ab8</anchor>
      <arglist>(int I)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classGenfun_1_1Argument.html</anchorfile>
      <anchor>4f9f20adf8eb776241b0dd9cddf2edb8</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>dimension</name>
      <anchorfile>classGenfun_1_1Argument.html</anchorfile>
      <anchor>ae23e11f6f11577277af8fcd61fd58d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classGenfun_1_1Argument.html</anchorfile>
      <anchor>142c32217bc4a162ab64e332a6bffe47</anchor>
      <arglist>(std::ostream &amp;o, const Argument &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::ArrayFunction</name>
    <filename>classGenfun_1_1ArrayFunction.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>ArrayFunction</name>
      <anchorfile>classGenfun_1_1ArrayFunction.html</anchorfile>
      <anchor>103dba1e94a27ae29fa8a136cb1a03ee</anchor>
      <arglist>(const double *begin, const double *end)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArrayFunction</name>
      <anchorfile>classGenfun_1_1ArrayFunction.html</anchorfile>
      <anchor>d810c02f3d4a97364b236ff96005756a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayFunction</name>
      <anchorfile>classGenfun_1_1ArrayFunction.html</anchorfile>
      <anchor>00c354049d4cdd64f63a4dbdb5f3f571</anchor>
      <arglist>(const ArrayFunction &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1ArrayFunction.html</anchorfile>
      <anchor>de7d980e387cdacf600e1eda6db429b2</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1ArrayFunction.html</anchorfile>
      <anchor>aee1f711a112380e50032153b720de78</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::ASin</name>
    <filename>classGenfun_1_1ASin.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>ASin</name>
      <anchorfile>classGenfun_1_1ASin.html</anchorfile>
      <anchor>93969732572aebdf4757e6a1d35e133e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ASin</name>
      <anchorfile>classGenfun_1_1ASin.html</anchorfile>
      <anchor>23d451a766216878ec717ed9cb731b9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ASin</name>
      <anchorfile>classGenfun_1_1ASin.html</anchorfile>
      <anchor>c94d025bd1fc3e766258993556e9548f</anchor>
      <arglist>(const ASin &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1ASin.html</anchorfile>
      <anchor>e5f218065802b7451745f19e9ce40282</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1ASin.html</anchorfile>
      <anchor>f4fc29e464fb8ed79166ffeacb37ba59</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1ASin.html</anchorfile>
      <anchor>27c476780930a72f2131579703a9c6fd</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1ASin.html</anchorfile>
      <anchor>140819ca8c81c6aa4cfc0b13b5fe457d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::AssociatedLaguerre</name>
    <filename>classGenfun_1_1AssociatedLaguerre.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>AssociatedLaguerre</name>
      <anchorfile>classGenfun_1_1AssociatedLaguerre.html</anchorfile>
      <anchor>f93ea7ee237e5a1109c0825e1fda1b71</anchor>
      <arglist>(unsigned int n, unsigned int k)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AssociatedLaguerre</name>
      <anchorfile>classGenfun_1_1AssociatedLaguerre.html</anchorfile>
      <anchor>7239f4a39fa504e93791d025235bafe2</anchor>
      <arglist>(const AssociatedLaguerre &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AssociatedLaguerre</name>
      <anchorfile>classGenfun_1_1AssociatedLaguerre.html</anchorfile>
      <anchor>f5e3b7a8c0afe5e8c78db99fbf9a406b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1AssociatedLaguerre.html</anchorfile>
      <anchor>108e1554d589a13f4bdcbf3c6af130ce</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1AssociatedLaguerre.html</anchorfile>
      <anchor>d018146bd50fab5ea3ae5f445a6cf9c3</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>n</name>
      <anchorfile>classGenfun_1_1AssociatedLaguerre.html</anchorfile>
      <anchor>c7c0822959cf8af5ab6733a4e5bdb3a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>k</name>
      <anchorfile>classGenfun_1_1AssociatedLaguerre.html</anchorfile>
      <anchor>52d5064c4da66b9ac145c198311b74be</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::AssociatedLegendre</name>
    <filename>classGenfun_1_1AssociatedLegendre.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>AssociatedLegendre</name>
      <anchorfile>classGenfun_1_1AssociatedLegendre.html</anchorfile>
      <anchor>0a192259a2022da48806d1f2a61f0546</anchor>
      <arglist>(unsigned int l, unsigned int m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AssociatedLegendre</name>
      <anchorfile>classGenfun_1_1AssociatedLegendre.html</anchorfile>
      <anchor>6e3551f1f18fab8d35c1828e6a770853</anchor>
      <arglist>(const AssociatedLegendre &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AssociatedLegendre</name>
      <anchorfile>classGenfun_1_1AssociatedLegendre.html</anchorfile>
      <anchor>89a10b35b95b379542deab9f68799234</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1AssociatedLegendre.html</anchorfile>
      <anchor>aa5be1942f6a3db88e37de95cdd5a2af</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1AssociatedLegendre.html</anchorfile>
      <anchor>6aa08de74685747c2c9e81812c273823</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>l</name>
      <anchorfile>classGenfun_1_1AssociatedLegendre.html</anchorfile>
      <anchor>b6e0d62a8241e4af0a8542e141b98714</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>m</name>
      <anchorfile>classGenfun_1_1AssociatedLegendre.html</anchorfile>
      <anchor>b583a821ba0ea1c4fd28d61325dc1886</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::ATan</name>
    <filename>classGenfun_1_1ATan.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>ATan</name>
      <anchorfile>classGenfun_1_1ATan.html</anchorfile>
      <anchor>9919b75b21e36ba771a3abd8ce519865</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ATan</name>
      <anchorfile>classGenfun_1_1ATan.html</anchorfile>
      <anchor>2c5836593c421c6ee058754743101391</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ATan</name>
      <anchorfile>classGenfun_1_1ATan.html</anchorfile>
      <anchor>24a3f0cfb406ab8438d27d6fd37e8da4</anchor>
      <arglist>(const ATan &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1ATan.html</anchorfile>
      <anchor>d6fe85608621bd47e3a35dc0e18aa0d9</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1ATan.html</anchorfile>
      <anchor>844467c8245269ce119e53623d83cfeb</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1ATan.html</anchorfile>
      <anchor>36e1a58c261a5e24d2d36929ef192beb</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1ATan.html</anchorfile>
      <anchor>73ffa0e3b056404dde6c8279dbe8bafa</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::BivariateGaussian</name>
    <filename>classGenfun_1_1BivariateGaussian.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>BivariateGaussian</name>
      <anchorfile>classGenfun_1_1BivariateGaussian.html</anchorfile>
      <anchor>3f5d67f6eff3e2e34cc5c5f5d3987921</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BivariateGaussian</name>
      <anchorfile>classGenfun_1_1BivariateGaussian.html</anchorfile>
      <anchor>e98e0f540bafb1d916d70b024870a844</anchor>
      <arglist>(const BivariateGaussian &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BivariateGaussian</name>
      <anchorfile>classGenfun_1_1BivariateGaussian.html</anchorfile>
      <anchor>8cbaed0d6183761909bd9e1f55ca01d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1BivariateGaussian.html</anchorfile>
      <anchor>99300f2de8f37935a61753123a57e2b3</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1BivariateGaussian.html</anchorfile>
      <anchor>689f8bd70d577fd19c3002e3595b7b07</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dimensionality</name>
      <anchorfile>classGenfun_1_1BivariateGaussian.html</anchorfile>
      <anchor>0806b5b623d8f27f55746c4d0c38fcfb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>mean0</name>
      <anchorfile>classGenfun_1_1BivariateGaussian.html</anchorfile>
      <anchor>b8df534293bb9de37606837f1e0d8d06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>mean0</name>
      <anchorfile>classGenfun_1_1BivariateGaussian.html</anchorfile>
      <anchor>9a8de643e72e523488e384b3d470ea3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>mean1</name>
      <anchorfile>classGenfun_1_1BivariateGaussian.html</anchorfile>
      <anchor>3a45b68831ea8c3ca37df0b0a7da6306</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>mean1</name>
      <anchorfile>classGenfun_1_1BivariateGaussian.html</anchorfile>
      <anchor>af1fcdfc74ed7cc04469319dd016c935</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>sigma0</name>
      <anchorfile>classGenfun_1_1BivariateGaussian.html</anchorfile>
      <anchor>9ad3f172c26afe1410c377e407b6ee92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>sigma0</name>
      <anchorfile>classGenfun_1_1BivariateGaussian.html</anchorfile>
      <anchor>65d76aa8bf12330803bffc09e157a305</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>sigma1</name>
      <anchorfile>classGenfun_1_1BivariateGaussian.html</anchorfile>
      <anchor>e5cdf9c8affc31a0f9376d3d4b665877</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>sigma1</name>
      <anchorfile>classGenfun_1_1BivariateGaussian.html</anchorfile>
      <anchor>1179c15b82ceb29a9ede4ae35f2ae45b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>corr01</name>
      <anchorfile>classGenfun_1_1BivariateGaussian.html</anchorfile>
      <anchor>876eb9caea8a5829b50556f9f50b75cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>corr01</name>
      <anchorfile>classGenfun_1_1BivariateGaussian.html</anchorfile>
      <anchor>1b170ef87c5877dde68ad6e46549c813</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::ConstMinusFunction</name>
    <filename>classGenfun_1_1ConstMinusFunction.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>ConstMinusFunction</name>
      <anchorfile>classGenfun_1_1ConstMinusFunction.html</anchorfile>
      <anchor>bebeb2d37d5b7c245f1c17ce85ec7621</anchor>
      <arglist>(double constant, const AbsFunction *arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMinusFunction</name>
      <anchorfile>classGenfun_1_1ConstMinusFunction.html</anchorfile>
      <anchor>45a7c2faf350660d2ae4f98ab338ec2a</anchor>
      <arglist>(const ConstMinusFunction &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstMinusFunction</name>
      <anchorfile>classGenfun_1_1ConstMinusFunction.html</anchorfile>
      <anchor>17341e950cb0443f2b9f267013e7eee7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1ConstMinusFunction.html</anchorfile>
      <anchor>fc510aa379256eabd0c2ea3de0ad94f4</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1ConstMinusFunction.html</anchorfile>
      <anchor>f69490d029d583145343da97408a2693</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dimensionality</name>
      <anchorfile>classGenfun_1_1ConstMinusFunction.html</anchorfile>
      <anchor>d20e8b93be98bc62eb653f4dfde3d3b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1ConstMinusFunction.html</anchorfile>
      <anchor>dce54ed1c73c3ee1d35dd239a2cc21c1</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1ConstMinusFunction.html</anchorfile>
      <anchor>3937f5b70091217b5ac11a5378d709b0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::ConstMinusParameter</name>
    <filename>classGenfun_1_1ConstMinusParameter.html</filename>
    <base>Genfun::AbsParameter</base>
    <member kind="function">
      <type></type>
      <name>ConstMinusParameter</name>
      <anchorfile>classGenfun_1_1ConstMinusParameter.html</anchorfile>
      <anchor>f49a10a52f512a08e81540088ff5c848</anchor>
      <arglist>(double, const AbsParameter *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMinusParameter</name>
      <anchorfile>classGenfun_1_1ConstMinusParameter.html</anchorfile>
      <anchor>e2743dd5089ac4ace8d23ae7582406ca</anchor>
      <arglist>(const ConstMinusParameter &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstMinusParameter</name>
      <anchorfile>classGenfun_1_1ConstMinusParameter.html</anchorfile>
      <anchor>a5e2219feea961f41b4b18ed1e31dd78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>classGenfun_1_1ConstMinusParameter.html</anchorfile>
      <anchor>e090cb8aa68a49c047701a4f344bd251</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::ConstOverFunction</name>
    <filename>classGenfun_1_1ConstOverFunction.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>ConstOverFunction</name>
      <anchorfile>classGenfun_1_1ConstOverFunction.html</anchorfile>
      <anchor>9d632d0c4632262e8871308d96550656</anchor>
      <arglist>(double constant, const AbsFunction *arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstOverFunction</name>
      <anchorfile>classGenfun_1_1ConstOverFunction.html</anchorfile>
      <anchor>dc888cea965f1c91fbdc92633d72c7dd</anchor>
      <arglist>(const ConstOverFunction &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstOverFunction</name>
      <anchorfile>classGenfun_1_1ConstOverFunction.html</anchorfile>
      <anchor>d27a60837fe2495b80beeb90d61326ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1ConstOverFunction.html</anchorfile>
      <anchor>6e22ae63e09c9ec282179a0d55a66015</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1ConstOverFunction.html</anchorfile>
      <anchor>7683200d74fcb1d9ba4ea27ba4c973a6</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dimensionality</name>
      <anchorfile>classGenfun_1_1ConstOverFunction.html</anchorfile>
      <anchor>4bf6343a37596fee72fb93d4c990d10e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1ConstOverFunction.html</anchorfile>
      <anchor>af13e9d1121a76e687bfb527c553feaf</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1ConstOverFunction.html</anchorfile>
      <anchor>b0a47ab733a3b6b0e836aeda2d9a8b0f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::ConstOverParameter</name>
    <filename>classGenfun_1_1ConstOverParameter.html</filename>
    <base>Genfun::AbsParameter</base>
    <member kind="function">
      <type></type>
      <name>ConstOverParameter</name>
      <anchorfile>classGenfun_1_1ConstOverParameter.html</anchorfile>
      <anchor>6fa48ff1f8ebfd85f07be2ec05cd0800</anchor>
      <arglist>(double, const AbsParameter *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstOverParameter</name>
      <anchorfile>classGenfun_1_1ConstOverParameter.html</anchorfile>
      <anchor>ed478ecc3b1f314f4f61a0cd0cfcdff1</anchor>
      <arglist>(const ConstOverParameter &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstOverParameter</name>
      <anchorfile>classGenfun_1_1ConstOverParameter.html</anchorfile>
      <anchor>13dc997faa61159021976e801c962d25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>classGenfun_1_1ConstOverParameter.html</anchorfile>
      <anchor>1b42b38371b18e57a9796e895a492d15</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::ConstPlusFunction</name>
    <filename>classGenfun_1_1ConstPlusFunction.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>ConstPlusFunction</name>
      <anchorfile>classGenfun_1_1ConstPlusFunction.html</anchorfile>
      <anchor>bdb9bb0dad8e410d901f378ffc591ec8</anchor>
      <arglist>(double constant, const AbsFunction *arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstPlusFunction</name>
      <anchorfile>classGenfun_1_1ConstPlusFunction.html</anchorfile>
      <anchor>e3551d7cc2b2f34236f878843414d078</anchor>
      <arglist>(const ConstPlusFunction &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstPlusFunction</name>
      <anchorfile>classGenfun_1_1ConstPlusFunction.html</anchorfile>
      <anchor>d460e27803655b7ce5d816a8c04a3578</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1ConstPlusFunction.html</anchorfile>
      <anchor>3d14141abf4c0167bc62b3672efa439b</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1ConstPlusFunction.html</anchorfile>
      <anchor>32d2f3bea6d8a191acb72dc094d3b8ad</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dimensionality</name>
      <anchorfile>classGenfun_1_1ConstPlusFunction.html</anchorfile>
      <anchor>8c49d7d778e5130d89e22c9a3c7d1249</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1ConstPlusFunction.html</anchorfile>
      <anchor>b7028c5bb71202c51edae565e6983405</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1ConstPlusFunction.html</anchorfile>
      <anchor>bb00169fbdd3ff234ed5825e4ab5dcf4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::ConstPlusParameter</name>
    <filename>classGenfun_1_1ConstPlusParameter.html</filename>
    <base>Genfun::AbsParameter</base>
    <member kind="function">
      <type></type>
      <name>ConstPlusParameter</name>
      <anchorfile>classGenfun_1_1ConstPlusParameter.html</anchorfile>
      <anchor>a967e9d3168883ae896563b5422afd63</anchor>
      <arglist>(double, const AbsParameter *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstPlusParameter</name>
      <anchorfile>classGenfun_1_1ConstPlusParameter.html</anchorfile>
      <anchor>4c5501cd4df178c772e31ba812e29f81</anchor>
      <arglist>(const ConstPlusParameter &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstPlusParameter</name>
      <anchorfile>classGenfun_1_1ConstPlusParameter.html</anchorfile>
      <anchor>eddeb1d34a3ed51c79eeb727234e8902</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>classGenfun_1_1ConstPlusParameter.html</anchorfile>
      <anchor>622dd696f97b7617081b944f74877781</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::ConstTimesFunction</name>
    <filename>classGenfun_1_1ConstTimesFunction.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>ConstTimesFunction</name>
      <anchorfile>classGenfun_1_1ConstTimesFunction.html</anchorfile>
      <anchor>d1cf7732629774c91abeadea61ececf3</anchor>
      <arglist>(double constant, const AbsFunction *arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstTimesFunction</name>
      <anchorfile>classGenfun_1_1ConstTimesFunction.html</anchorfile>
      <anchor>d88a125a6530de2e3a6995797b3f96a2</anchor>
      <arglist>(const ConstTimesFunction &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstTimesFunction</name>
      <anchorfile>classGenfun_1_1ConstTimesFunction.html</anchorfile>
      <anchor>dcecb85337ce1c4c7ec7d805bb8f1492</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1ConstTimesFunction.html</anchorfile>
      <anchor>e44bab80d31d4456931c59ccffafdb65</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1ConstTimesFunction.html</anchorfile>
      <anchor>cdba2107cbd17865f8c2c128e5ddc831</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dimensionality</name>
      <anchorfile>classGenfun_1_1ConstTimesFunction.html</anchorfile>
      <anchor>b0fff2cfd80c37053bdbf32f76bf9e0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1ConstTimesFunction.html</anchorfile>
      <anchor>41b1dda0fb12213f8bf72ccb0ac46d5e</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1ConstTimesFunction.html</anchorfile>
      <anchor>d1ca726ca8f9e6b7ac50b2e50b7546a7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::ConstTimesParameter</name>
    <filename>classGenfun_1_1ConstTimesParameter.html</filename>
    <base>Genfun::AbsParameter</base>
    <member kind="function">
      <type></type>
      <name>ConstTimesParameter</name>
      <anchorfile>classGenfun_1_1ConstTimesParameter.html</anchorfile>
      <anchor>cee8fe37a038dd79a0f4a0fdd79e5f27</anchor>
      <arglist>(double, const AbsParameter *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstTimesParameter</name>
      <anchorfile>classGenfun_1_1ConstTimesParameter.html</anchorfile>
      <anchor>d8d7da4c1782b0bfc24b1072c21a938f</anchor>
      <arglist>(const ConstTimesParameter &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstTimesParameter</name>
      <anchorfile>classGenfun_1_1ConstTimesParameter.html</anchorfile>
      <anchor>ca2f3d2a8e6ae6fac00285f3da9b4cc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>classGenfun_1_1ConstTimesParameter.html</anchorfile>
      <anchor>9d60bee5872e53ded09f97b985702122</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::Cos</name>
    <filename>classGenfun_1_1Cos.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>Cos</name>
      <anchorfile>classGenfun_1_1Cos.html</anchorfile>
      <anchor>eff5dec62e921012ebbeabce9f9393b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Cos</name>
      <anchorfile>classGenfun_1_1Cos.html</anchorfile>
      <anchor>f854b68dfcf8dba1a51b3e94c2e203c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cos</name>
      <anchorfile>classGenfun_1_1Cos.html</anchorfile>
      <anchor>c182c831ca2a509e789c82258a9d23db</anchor>
      <arglist>(const Cos &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Cos.html</anchorfile>
      <anchor>cc65feab7bde39edf1220379dde05dce</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Cos.html</anchorfile>
      <anchor>9cddc1da5380d7abb40b9d598f67f49e</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1Cos.html</anchorfile>
      <anchor>10c0b043909e8325cedbd20901719319</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1Cos.html</anchorfile>
      <anchor>3028ef3ec6a2c4625e7ff3167b8f55b8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::CumulativeChiSquare</name>
    <filename>classGenfun_1_1CumulativeChiSquare.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>CumulativeChiSquare</name>
      <anchorfile>classGenfun_1_1CumulativeChiSquare.html</anchorfile>
      <anchor>6a6ff0e75d841c2ea397b55584eedbaa</anchor>
      <arglist>(unsigned int nDof)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CumulativeChiSquare</name>
      <anchorfile>classGenfun_1_1CumulativeChiSquare.html</anchorfile>
      <anchor>1ebfb5503cdf9ef757a0dea20c1c1a28</anchor>
      <arglist>(const CumulativeChiSquare &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CumulativeChiSquare</name>
      <anchorfile>classGenfun_1_1CumulativeChiSquare.html</anchorfile>
      <anchor>92ff6459064621dc6ccaf1582c8a0063</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1CumulativeChiSquare.html</anchorfile>
      <anchor>5e76adda1658fd3826d013342ed775d8</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1CumulativeChiSquare.html</anchorfile>
      <anchor>525167eb8b7055e1ea30df8f1c4f40ce</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>nDof</name>
      <anchorfile>classGenfun_1_1CumulativeChiSquare.html</anchorfile>
      <anchor>f3224a1d8f1de45ec097dcb4f9605bfa</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::DefiniteIntegral</name>
    <filename>classGenfun_1_1DefiniteIntegral.html</filename>
    <base>Genfun::AbsFunctional</base>
    <member kind="function">
      <type></type>
      <name>DefiniteIntegral</name>
      <anchorfile>classGenfun_1_1DefiniteIntegral.html</anchorfile>
      <anchor>1ae58d8001014341aad3cccab3b0d69c</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DefiniteIntegral</name>
      <anchorfile>classGenfun_1_1DefiniteIntegral.html</anchorfile>
      <anchor>f28ec1bb59e66203aa107fe4cf0862cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator[]</name>
      <anchorfile>classGenfun_1_1DefiniteIntegral.html</anchorfile>
      <anchor>01aa914ccbc293fb5d76252b403c6aee</anchor>
      <arglist>(const AbsFunction &amp;function) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::DoubleParamToArgAdaptor</name>
    <filename>classGenfun_1_1DoubleParamToArgAdaptor.html</filename>
    <templarg>F</templarg>
    <base>Genfun::AbsFunction</base>
    <member kind="typedef">
      <type>Parameter &amp;(F::*</type>
      <name>ScopedMethodPtr</name>
      <anchorfile>classGenfun_1_1DoubleParamToArgAdaptor.html</anchorfile>
      <anchor>9d3aa3d27751fe8137c0527527d29fac</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoubleParamToArgAdaptor</name>
      <anchorfile>classGenfun_1_1DoubleParamToArgAdaptor.html</anchorfile>
      <anchor>90be423fcfaccd37c94a4966c722d42d</anchor>
      <arglist>(const F &amp;function, ScopedMethodPtr parameterFetchMethod0, ScopedMethodPtr paraemterFetchMethod1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoubleParamToArgAdaptor</name>
      <anchorfile>classGenfun_1_1DoubleParamToArgAdaptor.html</anchorfile>
      <anchor>504364b22d0782de7659d432074e0cb6</anchor>
      <arglist>(const DoubleParamToArgAdaptor &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DoubleParamToArgAdaptor</name>
      <anchorfile>classGenfun_1_1DoubleParamToArgAdaptor.html</anchorfile>
      <anchor>7457ab0a38283027b37a123e841941bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1DoubleParamToArgAdaptor.html</anchorfile>
      <anchor>69d497a834bbfab8ea7b7c359edde3f5</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1DoubleParamToArgAdaptor.html</anchorfile>
      <anchor>3547b684590cafb3c6385a858e492287</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dimensionality</name>
      <anchorfile>classGenfun_1_1DoubleParamToArgAdaptor.html</anchorfile>
      <anchor>4fa117c2fc831f243536754416a89244</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>scaleFactor0</name>
      <anchorfile>classGenfun_1_1DoubleParamToArgAdaptor.html</anchorfile>
      <anchor>317b862649927c1515847bc3b160d9b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>scaleFactor0</name>
      <anchorfile>classGenfun_1_1DoubleParamToArgAdaptor.html</anchorfile>
      <anchor>929781aa92cc16f1fe446640a8cbbbb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>scaleFactor1</name>
      <anchorfile>classGenfun_1_1DoubleParamToArgAdaptor.html</anchorfile>
      <anchor>c5885bdb44126241886834e7dc9421c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>scaleFactor1</name>
      <anchorfile>classGenfun_1_1DoubleParamToArgAdaptor.html</anchorfile>
      <anchor>debc8c30892105b00b9e4eb289e8fa86</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::Erf</name>
    <filename>classGenfun_1_1Erf.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>Erf</name>
      <anchorfile>classGenfun_1_1Erf.html</anchorfile>
      <anchor>bf751b11f37c49caa233c32a6baf8629</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Erf</name>
      <anchorfile>classGenfun_1_1Erf.html</anchorfile>
      <anchor>dba0e8500c2c76e657f39ae0d71ae40a</anchor>
      <arglist>(const Erf &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Erf</name>
      <anchorfile>classGenfun_1_1Erf.html</anchorfile>
      <anchor>e417e0c313ea89caffc16a073e40ed31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Erf.html</anchorfile>
      <anchor>adac05021c485a8ef0755e6287646f75</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Erf.html</anchorfile>
      <anchor>9a53acf5d24df6d13427c7e7a70475b7</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1Erf.html</anchorfile>
      <anchor>4581bbcbdaaf83668ba9aeaa5a1ee836</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1Erf.html</anchorfile>
      <anchor>b6c137d9f3e8ac8846e472f6a6d4d2ac</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::Exp</name>
    <filename>classGenfun_1_1Exp.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>Exp</name>
      <anchorfile>classGenfun_1_1Exp.html</anchorfile>
      <anchor>e4919489725f347837ec1f98fd176296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Exp</name>
      <anchorfile>classGenfun_1_1Exp.html</anchorfile>
      <anchor>1ea88d6a5bf132e68828cfce9a5b3b60</anchor>
      <arglist>(const Exp &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Exp</name>
      <anchorfile>classGenfun_1_1Exp.html</anchorfile>
      <anchor>0200e83e1f2f9bb817e8f58d0b5d29a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Exp.html</anchorfile>
      <anchor>b5f91bc9a825af4db69e337957932006</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Exp.html</anchorfile>
      <anchor>da5413b5000f7d57f252586815327c5d</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1Exp.html</anchorfile>
      <anchor>7bc9e57899aefc32632abee795626e55</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1Exp.html</anchorfile>
      <anchor>9ed94951fa5218099f5bfa27051458a7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::Exponential</name>
    <filename>classGenfun_1_1Exponential.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>Exponential</name>
      <anchorfile>classGenfun_1_1Exponential.html</anchorfile>
      <anchor>09c78b037e4f7e9a7d78cceb4c9ed643</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Exponential</name>
      <anchorfile>classGenfun_1_1Exponential.html</anchorfile>
      <anchor>9ce5331d13263644498635985608e356</anchor>
      <arglist>(const Exponential &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Exponential</name>
      <anchorfile>classGenfun_1_1Exponential.html</anchorfile>
      <anchor>d02f70015ab688703fe0b7155d6fae7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Exponential.html</anchorfile>
      <anchor>380fe838fbb64e39f80f6aafc46bfbe6</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Exponential.html</anchorfile>
      <anchor>1467010977a7932720ca4da6a3789028</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>decayConstant</name>
      <anchorfile>classGenfun_1_1Exponential.html</anchorfile>
      <anchor>00c8dc1fe679356b6cfa7d7183200e9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>decayConstant</name>
      <anchorfile>classGenfun_1_1Exponential.html</anchorfile>
      <anchor>c8c083052ff743b45885df65d36e6870</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1Exponential.html</anchorfile>
      <anchor>0dbef126b8b3024f494e2ca606763fb7</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1Exponential.html</anchorfile>
      <anchor>d626aad48d5f6b94582fee79605fbea3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::FixedConstant</name>
    <filename>classGenfun_1_1FixedConstant.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>FixedConstant</name>
      <anchorfile>classGenfun_1_1FixedConstant.html</anchorfile>
      <anchor>cf3dc50dc24a1dfd1c48e861ae3d4a1d</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FixedConstant</name>
      <anchorfile>classGenfun_1_1FixedConstant.html</anchorfile>
      <anchor>9a94e6c7de940844e4944b42eed1349d</anchor>
      <arglist>(const FixedConstant &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FixedConstant</name>
      <anchorfile>classGenfun_1_1FixedConstant.html</anchorfile>
      <anchor>4d5671099860d4fdda5897768377e22c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FixedConstant.html</anchorfile>
      <anchor>3eac9bd138e25010729649d576d3f8e2</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FixedConstant.html</anchorfile>
      <anchor>651cd57fac604ef772e70586588c2723</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1FixedConstant.html</anchorfile>
      <anchor>083bfe5c3b9109541ab4c2c5a3224aa5</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1FixedConstant.html</anchorfile>
      <anchor>83f7e1543f1d4d195f1e8d2e5c49fa95</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::FloatingConstant</name>
    <filename>classGenfun_1_1FloatingConstant.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>FloatingConstant</name>
      <anchorfile>classGenfun_1_1FloatingConstant.html</anchorfile>
      <anchor>c0f88ab667f2e29b575351d94d2d93f0</anchor>
      <arglist>(const AbsParameter &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FloatingConstant</name>
      <anchorfile>classGenfun_1_1FloatingConstant.html</anchorfile>
      <anchor>c1c736f625bb2fcd316db1782eb5735b</anchor>
      <arglist>(const FloatingConstant &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FloatingConstant</name>
      <anchorfile>classGenfun_1_1FloatingConstant.html</anchorfile>
      <anchor>4540ad498a8a546d4c2aa61122c06e3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AbsParameter &amp;</type>
      <name>value</name>
      <anchorfile>classGenfun_1_1FloatingConstant.html</anchorfile>
      <anchor>d6dbdd4570f0454f8552f9f0b15f63fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FloatingConstant.html</anchorfile>
      <anchor>ef37b55823825214c41b2e436400dd26</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FloatingConstant.html</anchorfile>
      <anchor>e64832e2bfba79cab8ab3a505ac6c751</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1FloatingConstant.html</anchorfile>
      <anchor>475adf0b7b3e2cce3d924624b4ebdca1</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1FloatingConstant.html</anchorfile>
      <anchor>2f69e01f6648fe496c5038d3c371a94a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::FunctionComposition</name>
    <filename>classGenfun_1_1FunctionComposition.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>FunctionComposition</name>
      <anchorfile>classGenfun_1_1FunctionComposition.html</anchorfile>
      <anchor>d3e665b38f34c70fe4802a653b3c57e0</anchor>
      <arglist>(const AbsFunction *arg1, const AbsFunction *arg2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionComposition</name>
      <anchorfile>classGenfun_1_1FunctionComposition.html</anchorfile>
      <anchor>443eb1c12b22a19fac6a84784239e667</anchor>
      <arglist>(const FunctionComposition &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FunctionComposition</name>
      <anchorfile>classGenfun_1_1FunctionComposition.html</anchorfile>
      <anchor>43ba1fb826ec71f98d9c6fe388008f24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionComposition.html</anchorfile>
      <anchor>783393563b8ab385b85a218f2f03b875</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionComposition.html</anchorfile>
      <anchor>2c085af7241fbb5ecf1269139dbaedbb</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dimensionality</name>
      <anchorfile>classGenfun_1_1FunctionComposition.html</anchorfile>
      <anchor>ecb7901bbd9cde6e7db096a4ace4ad39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1FunctionComposition.html</anchorfile>
      <anchor>4f8e4ad2bdd761fcb58a3f26508630bc</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1FunctionComposition.html</anchorfile>
      <anchor>f20e5aad38db3323401a76b5375c7913</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::FunctionConvolution</name>
    <filename>classGenfun_1_1FunctionConvolution.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>FunctionConvolution</name>
      <anchorfile>classGenfun_1_1FunctionConvolution.html</anchorfile>
      <anchor>d06246aae5b777c34e1dcbb82b9e53b6</anchor>
      <arglist>(const AbsFunction *arg1, const AbsFunction *arg2, double x0, double x1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionConvolution</name>
      <anchorfile>classGenfun_1_1FunctionConvolution.html</anchorfile>
      <anchor>71265e6fdf70947a62703791c9be1146</anchor>
      <arglist>(const FunctionConvolution &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FunctionConvolution</name>
      <anchorfile>classGenfun_1_1FunctionConvolution.html</anchorfile>
      <anchor>86a22a87c1adcb88cd3862e4f119d09b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionConvolution.html</anchorfile>
      <anchor>24729e585b06eb8384a2fcceaf143b5a</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionConvolution.html</anchorfile>
      <anchor>b46c59dbed1de666d9842072933c1408</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::FunctionDifference</name>
    <filename>classGenfun_1_1FunctionDifference.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>FunctionDifference</name>
      <anchorfile>classGenfun_1_1FunctionDifference.html</anchorfile>
      <anchor>3441b00b84bf79901edd9f9144ca74fa</anchor>
      <arglist>(const AbsFunction *arg1, const AbsFunction *arg2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionDifference</name>
      <anchorfile>classGenfun_1_1FunctionDifference.html</anchorfile>
      <anchor>6f19f4e89f5d7abaa80febddf7af5ddd</anchor>
      <arglist>(const FunctionDifference &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FunctionDifference</name>
      <anchorfile>classGenfun_1_1FunctionDifference.html</anchorfile>
      <anchor>5cfb08e3184a89fdaae4a9e93a72efd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionDifference.html</anchorfile>
      <anchor>02cef82c51a650c7b70b9229f631a36d</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionDifference.html</anchorfile>
      <anchor>31c199802001da69a1212d009051cdb0</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dimensionality</name>
      <anchorfile>classGenfun_1_1FunctionDifference.html</anchorfile>
      <anchor>c31417f810901e49ea8aab1d7c82ccc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1FunctionDifference.html</anchorfile>
      <anchor>3d713fe602632dd7ed7a069ae9fc179f</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1FunctionDifference.html</anchorfile>
      <anchor>450bc149394bf2a8863df1dd93e64a13</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::FunctionDirectProduct</name>
    <filename>classGenfun_1_1FunctionDirectProduct.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>FunctionDirectProduct</name>
      <anchorfile>classGenfun_1_1FunctionDirectProduct.html</anchorfile>
      <anchor>dce77f13d60bbcd8ca663fb1c19ac333</anchor>
      <arglist>(const AbsFunction *arg1, const AbsFunction *arg2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionDirectProduct</name>
      <anchorfile>classGenfun_1_1FunctionDirectProduct.html</anchorfile>
      <anchor>2acaa65d1dda242540fbca54158c0a36</anchor>
      <arglist>(const FunctionDirectProduct &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FunctionDirectProduct</name>
      <anchorfile>classGenfun_1_1FunctionDirectProduct.html</anchorfile>
      <anchor>c64d4dde6149135c28c0b18cd1c41b76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionDirectProduct.html</anchorfile>
      <anchor>d80d76c23607aaef935df7a5037d7d38</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionDirectProduct.html</anchorfile>
      <anchor>1579026ef8dbe63c0e0bfbfeb939b553</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dimensionality</name>
      <anchorfile>classGenfun_1_1FunctionDirectProduct.html</anchorfile>
      <anchor>7bffc67d2e9f18b07f7ece64de3b76d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1FunctionDirectProduct.html</anchorfile>
      <anchor>b72a0e661ea3bbfe2197a4e6e001c74a</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1FunctionDirectProduct.html</anchorfile>
      <anchor>7fab87ac3b176f3e98389608bd20f444</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::FunctionNegation</name>
    <filename>classGenfun_1_1FunctionNegation.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>FunctionNegation</name>
      <anchorfile>classGenfun_1_1FunctionNegation.html</anchorfile>
      <anchor>9e0fb9223a73c58dcf50b30374e9f4d5</anchor>
      <arglist>(const AbsFunction *arg1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionNegation</name>
      <anchorfile>classGenfun_1_1FunctionNegation.html</anchorfile>
      <anchor>d9952f7aa3c7479bd08a1f80e9d7ed4b</anchor>
      <arglist>(const FunctionNegation &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FunctionNegation</name>
      <anchorfile>classGenfun_1_1FunctionNegation.html</anchorfile>
      <anchor>ed0033159eb46faff63b326dbe8360ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionNegation.html</anchorfile>
      <anchor>2ae21aa3abd31991680fff37a6e17804</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionNegation.html</anchorfile>
      <anchor>8ead762c3500c8416509c1a08a0ca569</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dimensionality</name>
      <anchorfile>classGenfun_1_1FunctionNegation.html</anchorfile>
      <anchor>32f2b8f2de8e78ebf2e1779832dfeb85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1FunctionNegation.html</anchorfile>
      <anchor>870a8bd7c49cfc4eb45137d08ff46ec0</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1FunctionNegation.html</anchorfile>
      <anchor>fb9af65f92bfda4cc09e090e8b1c29ac</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::FunctionNoop</name>
    <filename>classGenfun_1_1FunctionNoop.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>FunctionNoop</name>
      <anchorfile>classGenfun_1_1FunctionNoop.html</anchorfile>
      <anchor>a082dd3aaff5ae0b0455f0e3ac4deba1</anchor>
      <arglist>(const AbsFunction *arg1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionNoop</name>
      <anchorfile>classGenfun_1_1FunctionNoop.html</anchorfile>
      <anchor>9187807049f7fff8ab47ff42412745ff</anchor>
      <arglist>(const FunctionNoop &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FunctionNoop</name>
      <anchorfile>classGenfun_1_1FunctionNoop.html</anchorfile>
      <anchor>45fc169d4f2d61a424f243ed4f82c07f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionNoop.html</anchorfile>
      <anchor>0d5efc31253923e336923aabef426766</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionNoop.html</anchorfile>
      <anchor>73216dc7e785159976338103fb30d230</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dimensionality</name>
      <anchorfile>classGenfun_1_1FunctionNoop.html</anchorfile>
      <anchor>dbb3e8f832b0bc3e9704bf430a512ef6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1FunctionNoop.html</anchorfile>
      <anchor>c75e3c7334a7d4da50f5c88dbca1a1df</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1FunctionNoop.html</anchorfile>
      <anchor>e3567e4319986230795995c17d58eb09</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::FunctionNumDeriv</name>
    <filename>classGenfun_1_1FunctionNumDeriv.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>FunctionNumDeriv</name>
      <anchorfile>classGenfun_1_1FunctionNumDeriv.html</anchorfile>
      <anchor>f5131a51b2635a98b846c10ac22c5ca5</anchor>
      <arglist>(const AbsFunction *arg1, unsigned int index=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionNumDeriv</name>
      <anchorfile>classGenfun_1_1FunctionNumDeriv.html</anchorfile>
      <anchor>3da25e8141b80a13893be21f0ae4e913</anchor>
      <arglist>(const FunctionNumDeriv &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FunctionNumDeriv</name>
      <anchorfile>classGenfun_1_1FunctionNumDeriv.html</anchorfile>
      <anchor>1312e6b117e05fba955bce843b4beb74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionNumDeriv.html</anchorfile>
      <anchor>fb17326c5db54ab736456e454876525d</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionNumDeriv.html</anchorfile>
      <anchor>2d1bddd4d40f9790e9d066f2495d5903</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dimensionality</name>
      <anchorfile>classGenfun_1_1FunctionNumDeriv.html</anchorfile>
      <anchor>f4abe02b520aa9fcff3057a594f52b4d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::FunctionPlusParameter</name>
    <filename>classGenfun_1_1FunctionPlusParameter.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>FunctionPlusParameter</name>
      <anchorfile>classGenfun_1_1FunctionPlusParameter.html</anchorfile>
      <anchor>7a28a8487d0e0e7d3d9cb860f1937560</anchor>
      <arglist>(const AbsParameter *parameter, const AbsFunction *function)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionPlusParameter</name>
      <anchorfile>classGenfun_1_1FunctionPlusParameter.html</anchorfile>
      <anchor>50f59775136012e4dc2ab9a66e7df4ef</anchor>
      <arglist>(const FunctionPlusParameter &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FunctionPlusParameter</name>
      <anchorfile>classGenfun_1_1FunctionPlusParameter.html</anchorfile>
      <anchor>751753032216dfb1ecf210e82bfd8571</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionPlusParameter.html</anchorfile>
      <anchor>b924c2c12836a4daf70f5ae4228b154f</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionPlusParameter.html</anchorfile>
      <anchor>5fa428eefc9d1a438750868107389c3e</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dimensionality</name>
      <anchorfile>classGenfun_1_1FunctionPlusParameter.html</anchorfile>
      <anchor>9c44533277106ad7d6fa310fbf737342</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1FunctionPlusParameter.html</anchorfile>
      <anchor>e6096f163a5c0d864b70ebdf1c28a538</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1FunctionPlusParameter.html</anchorfile>
      <anchor>2a8fc786d69aed6d3c29cbc046be4a49</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::FunctionProduct</name>
    <filename>classGenfun_1_1FunctionProduct.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>FunctionProduct</name>
      <anchorfile>classGenfun_1_1FunctionProduct.html</anchorfile>
      <anchor>96c63d11698de22774541f48019eb3f9</anchor>
      <arglist>(const AbsFunction *arg1, const AbsFunction *arg2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionProduct</name>
      <anchorfile>classGenfun_1_1FunctionProduct.html</anchorfile>
      <anchor>b8faf8c4134c89cc93e1cb990be93008</anchor>
      <arglist>(const FunctionProduct &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FunctionProduct</name>
      <anchorfile>classGenfun_1_1FunctionProduct.html</anchorfile>
      <anchor>107150dfa9cc4544987a8bb48981bf06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionProduct.html</anchorfile>
      <anchor>fdd900e1662c68b389e4896e32c4c0cb</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionProduct.html</anchorfile>
      <anchor>9ae332f1e1f99e4cac98cf0872252e1d</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dimensionality</name>
      <anchorfile>classGenfun_1_1FunctionProduct.html</anchorfile>
      <anchor>8b54b42050afc18830b57f149fb7ec45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1FunctionProduct.html</anchorfile>
      <anchor>3c50ecab0a3c88cc00fc13606a4b6680</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1FunctionProduct.html</anchorfile>
      <anchor>43ff4c281b9d791ba7ba4fff2fe85902</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::FunctionQuotient</name>
    <filename>classGenfun_1_1FunctionQuotient.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>FunctionQuotient</name>
      <anchorfile>classGenfun_1_1FunctionQuotient.html</anchorfile>
      <anchor>2933ce56ee5f8a45fa7e7513e5076ea4</anchor>
      <arglist>(const AbsFunction *arg1, const AbsFunction *arg2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionQuotient</name>
      <anchorfile>classGenfun_1_1FunctionQuotient.html</anchorfile>
      <anchor>11f2e5b98514d1eaf4438b284475f8e6</anchor>
      <arglist>(const FunctionQuotient &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FunctionQuotient</name>
      <anchorfile>classGenfun_1_1FunctionQuotient.html</anchorfile>
      <anchor>8d4e938a24a38664acfb1a484a9308a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionQuotient.html</anchorfile>
      <anchor>3755b43f55ca94fbfae817bb3b045899</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionQuotient.html</anchorfile>
      <anchor>f3e47bcae314d3e903a1bcb3cdddcc76</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dimensionality</name>
      <anchorfile>classGenfun_1_1FunctionQuotient.html</anchorfile>
      <anchor>48269d56f251674f818d269033be9b00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1FunctionQuotient.html</anchorfile>
      <anchor>56b694ed0666e12a2598104dfedc75d6</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1FunctionQuotient.html</anchorfile>
      <anchor>850da8f48e1823178d359f1817a78278</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::FunctionSum</name>
    <filename>classGenfun_1_1FunctionSum.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>FunctionSum</name>
      <anchorfile>classGenfun_1_1FunctionSum.html</anchorfile>
      <anchor>2e4d6972bd74f41f34d82e14f775fa9c</anchor>
      <arglist>(const AbsFunction *arg1, const AbsFunction *arg2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionSum</name>
      <anchorfile>classGenfun_1_1FunctionSum.html</anchorfile>
      <anchor>074b9781179c1568c0d44c4b47369c12</anchor>
      <arglist>(const FunctionSum &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FunctionSum</name>
      <anchorfile>classGenfun_1_1FunctionSum.html</anchorfile>
      <anchor>f46d24005f99c58e1536c94c21df8c49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionSum.html</anchorfile>
      <anchor>dd6878d2c1c74eddf99f40168b70a3d2</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionSum.html</anchorfile>
      <anchor>e228def226eebd4de2fa681687ba83ba</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dimensionality</name>
      <anchorfile>classGenfun_1_1FunctionSum.html</anchorfile>
      <anchor>882c968c37e4e59b09d47c2ecedbea45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1FunctionSum.html</anchorfile>
      <anchor>834625218ef856044ecdf3777181e0c3</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1FunctionSum.html</anchorfile>
      <anchor>faebbc9857176b6edc944b2fef892072</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::FunctionTimesParameter</name>
    <filename>classGenfun_1_1FunctionTimesParameter.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>FunctionTimesParameter</name>
      <anchorfile>classGenfun_1_1FunctionTimesParameter.html</anchorfile>
      <anchor>bf4ae57acf04fdfb799f717bd3876079</anchor>
      <arglist>(const AbsParameter *parameter, const AbsFunction *function)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionTimesParameter</name>
      <anchorfile>classGenfun_1_1FunctionTimesParameter.html</anchorfile>
      <anchor>ee0706220b988ad0c3325258534e1494</anchor>
      <arglist>(const FunctionTimesParameter &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FunctionTimesParameter</name>
      <anchorfile>classGenfun_1_1FunctionTimesParameter.html</anchorfile>
      <anchor>92bacfdc309ea381d594b1f9f45035cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionTimesParameter.html</anchorfile>
      <anchor>42b756dbe6cf895341de02e05c959971</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FunctionTimesParameter.html</anchorfile>
      <anchor>0903cb3ad576b32c56e52c946a75bb69</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dimensionality</name>
      <anchorfile>classGenfun_1_1FunctionTimesParameter.html</anchorfile>
      <anchor>c84a15b407c32e3a9db39d9e0bb4afbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1FunctionTimesParameter.html</anchorfile>
      <anchor>b484074d151956567584f8a004d005eb</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1FunctionTimesParameter.html</anchorfile>
      <anchor>edc61b9823a31ca5cc4f0ea838156325</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::Gaussian</name>
    <filename>classGenfun_1_1Gaussian.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>Gaussian</name>
      <anchorfile>classGenfun_1_1Gaussian.html</anchorfile>
      <anchor>2b64673d7c7833265b597032e2a9879b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gaussian</name>
      <anchorfile>classGenfun_1_1Gaussian.html</anchorfile>
      <anchor>4126bad1f656b2ffaeb17bbfa4b1fead</anchor>
      <arglist>(const Gaussian &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Gaussian</name>
      <anchorfile>classGenfun_1_1Gaussian.html</anchorfile>
      <anchor>87d4d823ff374eb6db00ea7c93447eb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Gaussian.html</anchorfile>
      <anchor>9394352dc05a75d52b7e68f606edab35</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Gaussian.html</anchorfile>
      <anchor>5f1c46950c97a0d3653b85f72c2d966d</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>mean</name>
      <anchorfile>classGenfun_1_1Gaussian.html</anchorfile>
      <anchor>f8738879545c7c852619e9b43d42bbd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>mean</name>
      <anchorfile>classGenfun_1_1Gaussian.html</anchorfile>
      <anchor>c1fe4ba07a2a07af3658dd294543e406</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>sigma</name>
      <anchorfile>classGenfun_1_1Gaussian.html</anchorfile>
      <anchor>49411abbcb63a340c4eaea5a6422eab2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>sigma</name>
      <anchorfile>classGenfun_1_1Gaussian.html</anchorfile>
      <anchor>513ffe37c9cbd74071b41243082cc6e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1Gaussian.html</anchorfile>
      <anchor>a8b2a196a5b02a239d0b60f7f5e8f721</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1Gaussian.html</anchorfile>
      <anchor>88e5a701dbd0d708e119cf05e5ef5a03</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::IncompleteGamma</name>
    <filename>classGenfun_1_1IncompleteGamma.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>IncompleteGamma</name>
      <anchorfile>classGenfun_1_1IncompleteGamma.html</anchorfile>
      <anchor>8b37f6960bacf3f95805e21950dbcf12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IncompleteGamma</name>
      <anchorfile>classGenfun_1_1IncompleteGamma.html</anchorfile>
      <anchor>b12e446b74b19fffc0708cdb5d1b42a6</anchor>
      <arglist>(const IncompleteGamma &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IncompleteGamma</name>
      <anchorfile>classGenfun_1_1IncompleteGamma.html</anchorfile>
      <anchor>ed2f8de11c0146c57f6ec5d3b51113c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1IncompleteGamma.html</anchorfile>
      <anchor>56425296ed477e7af80f2a0e41d9ef6d</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1IncompleteGamma.html</anchorfile>
      <anchor>21744a861fd8a218c81c4fd2f43373d0</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>a</name>
      <anchorfile>classGenfun_1_1IncompleteGamma.html</anchorfile>
      <anchor>0e0a37c5670e12f10e55445a255eb7d1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::Landau</name>
    <filename>classGenfun_1_1Landau.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>Landau</name>
      <anchorfile>classGenfun_1_1Landau.html</anchorfile>
      <anchor>1b8869e7cdbb558e39689765445779a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Landau</name>
      <anchorfile>classGenfun_1_1Landau.html</anchorfile>
      <anchor>2ec971a20a8c2e226a7f7ecccea0b8eb</anchor>
      <arglist>(const Landau &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Landau</name>
      <anchorfile>classGenfun_1_1Landau.html</anchorfile>
      <anchor>7d14a96139967c1a1171fb78b040c05b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Landau.html</anchorfile>
      <anchor>d68700099ffcd32189a109ff35b154b8</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Landau.html</anchorfile>
      <anchor>776b22dced9c25f728df9fcc90e13c49</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>peak</name>
      <anchorfile>classGenfun_1_1Landau.html</anchorfile>
      <anchor>580a6ad95b7b220713a6a0787c2c3b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>peak</name>
      <anchorfile>classGenfun_1_1Landau.html</anchorfile>
      <anchor>56e55ed467dcb69fc6093cc4e4e6f0aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>width</name>
      <anchorfile>classGenfun_1_1Landau.html</anchorfile>
      <anchor>d5f6d503f30938b5549bfdffe5ef5c5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>width</name>
      <anchorfile>classGenfun_1_1Landau.html</anchorfile>
      <anchor>54d28c966520976de01d1998bc61eb26</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::LikelihoodFunctional</name>
    <filename>classGenfun_1_1LikelihoodFunctional.html</filename>
    <base>Genfun::AbsFunctional</base>
    <member kind="function">
      <type></type>
      <name>LikelihoodFunctional</name>
      <anchorfile>classGenfun_1_1LikelihoodFunctional.html</anchorfile>
      <anchor>45f647042c8f607a8461bf33c0a3a9f3</anchor>
      <arglist>(const ArgumentList &amp;aList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LikelihoodFunctional</name>
      <anchorfile>classGenfun_1_1LikelihoodFunctional.html</anchorfile>
      <anchor>683a00e0ee2e8cb759a60b8130559031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator[]</name>
      <anchorfile>classGenfun_1_1LikelihoodFunctional.html</anchorfile>
      <anchor>90bbf588aa1cff3221689926cfd4f6bc</anchor>
      <arglist>(const AbsFunction &amp;function) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::Ln</name>
    <filename>classGenfun_1_1Ln.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>Ln</name>
      <anchorfile>classGenfun_1_1Ln.html</anchorfile>
      <anchor>41870948908cce16397b1db4f9353e9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ln</name>
      <anchorfile>classGenfun_1_1Ln.html</anchorfile>
      <anchor>1749a6d43904947d54d0723f5367fde0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ln</name>
      <anchorfile>classGenfun_1_1Ln.html</anchorfile>
      <anchor>d25f2ce9c9e0933ba4b6a49ec82a8b3a</anchor>
      <arglist>(const Ln &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Ln.html</anchorfile>
      <anchor>c4c58cb2867fe8847ff146e7d4f5956d</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Ln.html</anchorfile>
      <anchor>04a63b1a03bbecc4db09997dcbe9a2ae</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1Ln.html</anchorfile>
      <anchor>41fcd0725aed5c83d4b16c03af1586ff</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1Ln.html</anchorfile>
      <anchor>f2ab55153aa2368528656418f193894f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::LogGamma</name>
    <filename>classGenfun_1_1LogGamma.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>LogGamma</name>
      <anchorfile>classGenfun_1_1LogGamma.html</anchorfile>
      <anchor>6cbebfea82fd5efde888e3492eee160f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogGamma</name>
      <anchorfile>classGenfun_1_1LogGamma.html</anchorfile>
      <anchor>3d4485b470662229bd7ff7a1bbbc265c</anchor>
      <arglist>(const LogGamma &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LogGamma</name>
      <anchorfile>classGenfun_1_1LogGamma.html</anchorfile>
      <anchor>b351b3b16c6336e443a19cae7cfd5af3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1LogGamma.html</anchorfile>
      <anchor>96a505f55da6c117b31cde358bb7cea3</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1LogGamma.html</anchorfile>
      <anchor>5d84893fdb32e78788c5b9ed740b066a</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::LogisticFunction</name>
    <filename>classGenfun_1_1LogisticFunction.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>LogisticFunction</name>
      <anchorfile>classGenfun_1_1LogisticFunction.html</anchorfile>
      <anchor>d7886512c5030a5ae144fec9488604b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogisticFunction</name>
      <anchorfile>classGenfun_1_1LogisticFunction.html</anchorfile>
      <anchor>4d7f83c6b1bb1e9bad6ef4077f28778c</anchor>
      <arglist>(const LogisticFunction &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LogisticFunction</name>
      <anchorfile>classGenfun_1_1LogisticFunction.html</anchorfile>
      <anchor>1073a3809c435928f74631269d5838d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1LogisticFunction.html</anchorfile>
      <anchor>fe651026ca4d107d2bff881f5ae69396</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1LogisticFunction.html</anchorfile>
      <anchor>bb0a03243b7df0f0d8feba9e8d1658f9</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>x0</name>
      <anchorfile>classGenfun_1_1LogisticFunction.html</anchorfile>
      <anchor>116024dbc32bddfd8277a7bd45821dea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>x0</name>
      <anchorfile>classGenfun_1_1LogisticFunction.html</anchorfile>
      <anchor>8e90f140f21e21d787dc8220551eada3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>a</name>
      <anchorfile>classGenfun_1_1LogisticFunction.html</anchorfile>
      <anchor>795cee84a11210a28d86f71674e1053a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>a</name>
      <anchorfile>classGenfun_1_1LogisticFunction.html</anchorfile>
      <anchor>d2004f9dc82a43b5e54b62fb3bd37e4e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::Mod</name>
    <filename>classGenfun_1_1Mod.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>Mod</name>
      <anchorfile>classGenfun_1_1Mod.html</anchorfile>
      <anchor>a4f00ce83467ba98f81d309284bf0774</anchor>
      <arglist>(double y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mod</name>
      <anchorfile>classGenfun_1_1Mod.html</anchorfile>
      <anchor>de50c384dc99596729928b9d0f7a1231</anchor>
      <arglist>(const Mod &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Mod</name>
      <anchorfile>classGenfun_1_1Mod.html</anchorfile>
      <anchor>27e5792529ed40817153f479dfb7a779</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Mod.html</anchorfile>
      <anchor>2e148dd7a5f23b05b6084dd5c5b9c5e9</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Mod.html</anchorfile>
      <anchor>95557154470bde92d083c8ec442be743</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::Parameter</name>
    <filename>classGenfun_1_1Parameter.html</filename>
    <base>Genfun::AbsParameter</base>
    <member kind="function">
      <type></type>
      <name>Parameter</name>
      <anchorfile>classGenfun_1_1Parameter.html</anchorfile>
      <anchor>df57ae1fbfc20c6d07b66fa918661933</anchor>
      <arglist>(std::string name, double value, double lowerLimit=-1e100, double upperLimit=1e100)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parameter</name>
      <anchorfile>classGenfun_1_1Parameter.html</anchorfile>
      <anchor>ad5ed8d2201882f3ddd5768002714709</anchor>
      <arglist>(const Parameter &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Parameter</name>
      <anchorfile>classGenfun_1_1Parameter.html</anchorfile>
      <anchor>78bdfe2d5c6d8195ed27b63ce62be427</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>operator=</name>
      <anchorfile>classGenfun_1_1Parameter.html</anchorfile>
      <anchor>c4c5cfff0dde68daf7a1d2adb3d7e631</anchor>
      <arglist>(const Parameter &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classGenfun_1_1Parameter.html</anchorfile>
      <anchor>c097abd4bc0ad0b44e6d67e98b1ff620</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>classGenfun_1_1Parameter.html</anchorfile>
      <anchor>ab5ef86c9d94c4a32fe0b5997d2729f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLowerLimit</name>
      <anchorfile>classGenfun_1_1Parameter.html</anchorfile>
      <anchor>57625046f22e07ede51d176eaca916a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getUpperLimit</name>
      <anchorfile>classGenfun_1_1Parameter.html</anchorfile>
      <anchor>4c792f796bc376bd7d74facfe0115689</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classGenfun_1_1Parameter.html</anchorfile>
      <anchor>f5128480bf9e85c649e99f8ad9fa729d</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLowerLimit</name>
      <anchorfile>classGenfun_1_1Parameter.html</anchorfile>
      <anchor>10d42ee4df1ec9922bc319d135b6a09f</anchor>
      <arglist>(double lowerLimit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpperLimit</name>
      <anchorfile>classGenfun_1_1Parameter.html</anchorfile>
      <anchor>bdf36d8fb3c61603b21fd57e869b0d0f</anchor>
      <arglist>(double upperLimit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connectFrom</name>
      <anchorfile>classGenfun_1_1Parameter.html</anchorfile>
      <anchor>48cfcd1f11da58d61c9ded05d8ec31a9</anchor>
      <arglist>(const AbsParameter *source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Parameter *</type>
      <name>parameter</name>
      <anchorfile>classGenfun_1_1Parameter.html</anchorfile>
      <anchor>d1d4a0462a33399d0425655697db7b19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Parameter *</type>
      <name>parameter</name>
      <anchorfile>classGenfun_1_1Parameter.html</anchorfile>
      <anchor>057c8bd350101bdad43169c467156a6c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::ParameterDifference</name>
    <filename>classGenfun_1_1ParameterDifference.html</filename>
    <base>Genfun::AbsParameter</base>
    <member kind="function">
      <type></type>
      <name>ParameterDifference</name>
      <anchorfile>classGenfun_1_1ParameterDifference.html</anchorfile>
      <anchor>5cfcc7438b1009d7325a7912622844d8</anchor>
      <arglist>(const AbsParameter *arg1, const AbsParameter *arg2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterDifference</name>
      <anchorfile>classGenfun_1_1ParameterDifference.html</anchorfile>
      <anchor>982b42d077cc18ad316e4d97ff83e2ed</anchor>
      <arglist>(const ParameterDifference &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParameterDifference</name>
      <anchorfile>classGenfun_1_1ParameterDifference.html</anchorfile>
      <anchor>8dc970438fde87e944db292887befdea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>classGenfun_1_1ParameterDifference.html</anchorfile>
      <anchor>326ec2017a12b86e4961a5b3e663c4b1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::ParameterNegation</name>
    <filename>classGenfun_1_1ParameterNegation.html</filename>
    <base>Genfun::AbsParameter</base>
    <member kind="function">
      <type></type>
      <name>ParameterNegation</name>
      <anchorfile>classGenfun_1_1ParameterNegation.html</anchorfile>
      <anchor>6a29924b261456071345da3de43513ef</anchor>
      <arglist>(const AbsParameter *arg1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterNegation</name>
      <anchorfile>classGenfun_1_1ParameterNegation.html</anchorfile>
      <anchor>03346dacc6100558cc3db44dc16ab9b9</anchor>
      <arglist>(const ParameterNegation &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParameterNegation</name>
      <anchorfile>classGenfun_1_1ParameterNegation.html</anchorfile>
      <anchor>2577fb927d5bae2f748b2d6ddabd7574</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>classGenfun_1_1ParameterNegation.html</anchorfile>
      <anchor>52b99e1a4aa112a1909072b00e7d7369</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::ParameterProduct</name>
    <filename>classGenfun_1_1ParameterProduct.html</filename>
    <base>Genfun::AbsParameter</base>
    <member kind="function">
      <type></type>
      <name>ParameterProduct</name>
      <anchorfile>classGenfun_1_1ParameterProduct.html</anchorfile>
      <anchor>a9b4005760f05cff74ca5ce394433c60</anchor>
      <arglist>(const AbsParameter *arg1, const AbsParameter *arg2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterProduct</name>
      <anchorfile>classGenfun_1_1ParameterProduct.html</anchorfile>
      <anchor>1f47b48c5fc6fc10d42b84e847c1ff32</anchor>
      <arglist>(const ParameterProduct &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParameterProduct</name>
      <anchorfile>classGenfun_1_1ParameterProduct.html</anchorfile>
      <anchor>4f54c271b5016478864ca6e2ba509b6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>classGenfun_1_1ParameterProduct.html</anchorfile>
      <anchor>be1d7d508986544d4f133d0af9b519af</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::ParameterQuotient</name>
    <filename>classGenfun_1_1ParameterQuotient.html</filename>
    <base>Genfun::AbsParameter</base>
    <member kind="function">
      <type></type>
      <name>ParameterQuotient</name>
      <anchorfile>classGenfun_1_1ParameterQuotient.html</anchorfile>
      <anchor>6c719004b5f7b0da5bd4cf861a41d907</anchor>
      <arglist>(const AbsParameter *arg1, const AbsParameter *arg2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterQuotient</name>
      <anchorfile>classGenfun_1_1ParameterQuotient.html</anchorfile>
      <anchor>5a4910c4d69bd7fe3d8de01d28fa698b</anchor>
      <arglist>(const ParameterQuotient &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParameterQuotient</name>
      <anchorfile>classGenfun_1_1ParameterQuotient.html</anchorfile>
      <anchor>d060b03cd88b22dfdec13bd8540f8af9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>classGenfun_1_1ParameterQuotient.html</anchorfile>
      <anchor>4a5d48c4fe06998c5933e0209df227d3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::ParameterSum</name>
    <filename>classGenfun_1_1ParameterSum.html</filename>
    <base>Genfun::AbsParameter</base>
    <member kind="function">
      <type></type>
      <name>ParameterSum</name>
      <anchorfile>classGenfun_1_1ParameterSum.html</anchorfile>
      <anchor>1f862428912a441143a5fd96790c2200</anchor>
      <arglist>(const AbsParameter *arg1, const AbsParameter *arg2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterSum</name>
      <anchorfile>classGenfun_1_1ParameterSum.html</anchorfile>
      <anchor>1620a59eaefadf01a3a1e974ac7df83c</anchor>
      <arglist>(const ParameterSum &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParameterSum</name>
      <anchorfile>classGenfun_1_1ParameterSum.html</anchorfile>
      <anchor>f3403137ee312df2f3adbbc6c00aa7b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>classGenfun_1_1ParameterSum.html</anchorfile>
      <anchor>9aaf137fb3993438189b957187e37d05</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::ParamToArgAdaptor</name>
    <filename>classGenfun_1_1ParamToArgAdaptor.html</filename>
    <templarg>F</templarg>
    <base>Genfun::AbsFunction</base>
    <member kind="typedef">
      <type>Parameter &amp;(F::*</type>
      <name>ScopedMethodPtr</name>
      <anchorfile>classGenfun_1_1ParamToArgAdaptor.html</anchorfile>
      <anchor>c3f6955377eef00d536ad1685e8e4bf0</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParamToArgAdaptor</name>
      <anchorfile>classGenfun_1_1ParamToArgAdaptor.html</anchorfile>
      <anchor>1f6726d62665da953e1a6a12da508165</anchor>
      <arglist>(const F &amp;function, ScopedMethodPtr parameterFetchMethod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParamToArgAdaptor</name>
      <anchorfile>classGenfun_1_1ParamToArgAdaptor.html</anchorfile>
      <anchor>a6479eba9e0b409dd3cfce296e55af6d</anchor>
      <arglist>(const ParamToArgAdaptor &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParamToArgAdaptor</name>
      <anchorfile>classGenfun_1_1ParamToArgAdaptor.html</anchorfile>
      <anchor>b6f2594d16875c00068718cbd3f74847</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1ParamToArgAdaptor.html</anchorfile>
      <anchor>e70b34fab8cba2ee540728b87c6c65ca</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1ParamToArgAdaptor.html</anchorfile>
      <anchor>cf489087aa68c3d8a1b7f87a83dd3cd0</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dimensionality</name>
      <anchorfile>classGenfun_1_1ParamToArgAdaptor.html</anchorfile>
      <anchor>1ffd3a0893b5d8b4960bd8100e955761</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>scaleFactor</name>
      <anchorfile>classGenfun_1_1ParamToArgAdaptor.html</anchorfile>
      <anchor>58bbaab93d8249f4f76aebc8eb295526</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>scaleFactor</name>
      <anchorfile>classGenfun_1_1ParamToArgAdaptor.html</anchorfile>
      <anchor>945c2c1f4ee541df1608397e959cf22b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::PeriodicRectangular</name>
    <filename>classGenfun_1_1PeriodicRectangular.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>PeriodicRectangular</name>
      <anchorfile>classGenfun_1_1PeriodicRectangular.html</anchorfile>
      <anchor>1f3dc9971e84ae5c3db4ceecd962a3e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeriodicRectangular</name>
      <anchorfile>classGenfun_1_1PeriodicRectangular.html</anchorfile>
      <anchor>d87475b74f84326b983d194e8641d80a</anchor>
      <arglist>(const PeriodicRectangular &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PeriodicRectangular</name>
      <anchorfile>classGenfun_1_1PeriodicRectangular.html</anchorfile>
      <anchor>994f7abb254dcb9b0a88a20635c77c00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1PeriodicRectangular.html</anchorfile>
      <anchor>985413d6c28c3b58fe5a401c77aead5a</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1PeriodicRectangular.html</anchorfile>
      <anchor>051fc8f0b49b0a57bc00241dee6a5ca1</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>a</name>
      <anchorfile>classGenfun_1_1PeriodicRectangular.html</anchorfile>
      <anchor>54fed1546396ac30d225d7a9c39c81f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>b</name>
      <anchorfile>classGenfun_1_1PeriodicRectangular.html</anchorfile>
      <anchor>67c0ce004bb1aa8549819294a59ac6bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>height</name>
      <anchorfile>classGenfun_1_1PeriodicRectangular.html</anchorfile>
      <anchor>44e03120d9b9a5a42e0242ce5a285db1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1PeriodicRectangular.html</anchorfile>
      <anchor>c48698ec38f55efa800c36f3bd6e1b3f</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1PeriodicRectangular.html</anchorfile>
      <anchor>5c34833be56c3c977204010d4b6c9f7a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::Power</name>
    <filename>classGenfun_1_1Power.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>Power</name>
      <anchorfile>classGenfun_1_1Power.html</anchorfile>
      <anchor>1961e20ba5403f98379b75b5f34e70c9</anchor>
      <arglist>(double n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Power</name>
      <anchorfile>classGenfun_1_1Power.html</anchorfile>
      <anchor>edb7b4926d41fd03ccb1f535128945ac</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Power</name>
      <anchorfile>classGenfun_1_1Power.html</anchorfile>
      <anchor>de91d89da3bcd4387e50986f0d3b438d</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Power</name>
      <anchorfile>classGenfun_1_1Power.html</anchorfile>
      <anchor>77d4d58d3bb864a677bdfe2f0287686f</anchor>
      <arglist>(const Power &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Power</name>
      <anchorfile>classGenfun_1_1Power.html</anchorfile>
      <anchor>2d4a38170d8d684900c7a892303794dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Power.html</anchorfile>
      <anchor>2e922145e51f56de921285e1d676ced4</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Power.html</anchorfile>
      <anchor>12132737896fe7bd53bf4f6cd623796d</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1Power.html</anchorfile>
      <anchor>bc512ddb0037e8621b0123af574de7e6</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1Power.html</anchorfile>
      <anchor>8d135ff7a123d4bbd5a8a29c44c61ff9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::Psi2Hydrogen</name>
    <filename>classGenfun_1_1Psi2Hydrogen.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>Psi2Hydrogen</name>
      <anchorfile>classGenfun_1_1Psi2Hydrogen.html</anchorfile>
      <anchor>a64c89f1603141e90f504a45834c1403</anchor>
      <arglist>(unsigned int n, unsigned int l, unsigned int m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Psi2Hydrogen</name>
      <anchorfile>classGenfun_1_1Psi2Hydrogen.html</anchorfile>
      <anchor>c37e12d6d3f451be6924253788732f6c</anchor>
      <arglist>(const Psi2Hydrogen &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Psi2Hydrogen</name>
      <anchorfile>classGenfun_1_1Psi2Hydrogen.html</anchorfile>
      <anchor>59de2ae70df928f4c4015e77c3779291</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Psi2Hydrogen.html</anchorfile>
      <anchor>905f9acc5cf557ecad856720acded129</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Psi2Hydrogen.html</anchorfile>
      <anchor>94b69018f2b39b85ac3c961b5e6e01fe</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>n</name>
      <anchorfile>classGenfun_1_1Psi2Hydrogen.html</anchorfile>
      <anchor>2100ccbd57168af91d466539ed9e6af2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>l</name>
      <anchorfile>classGenfun_1_1Psi2Hydrogen.html</anchorfile>
      <anchor>6aa161928a0dadba659d9c6a89b654d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>m</name>
      <anchorfile>classGenfun_1_1Psi2Hydrogen.html</anchorfile>
      <anchor>bd8716ffed1337df2f46ca805de43d31</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::PtRelFcn</name>
    <filename>classGenfun_1_1PtRelFcn.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>PtRelFcn</name>
      <anchorfile>classGenfun_1_1PtRelFcn.html</anchorfile>
      <anchor>b15c7aa5a2abd281884674edcdda7be1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PtRelFcn</name>
      <anchorfile>classGenfun_1_1PtRelFcn.html</anchorfile>
      <anchor>47a2643ba63f6ad34b593b6dc0f1602f</anchor>
      <arglist>(const PtRelFcn &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PtRelFcn</name>
      <anchorfile>classGenfun_1_1PtRelFcn.html</anchorfile>
      <anchor>a7329e3c4ba25c08fd576d5d843ee98d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1PtRelFcn.html</anchorfile>
      <anchor>62de9ee9f515d52f7fb1719ba7eceb48</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1PtRelFcn.html</anchorfile>
      <anchor>70c35f13fef7db2b73ff989b7d30a002</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>P0</name>
      <anchorfile>classGenfun_1_1PtRelFcn.html</anchorfile>
      <anchor>4f8f9e4d5d22fb81f161ea2b6fad0e15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>P0</name>
      <anchorfile>classGenfun_1_1PtRelFcn.html</anchorfile>
      <anchor>25c697bef348b59bc041a50c20423b38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>P1</name>
      <anchorfile>classGenfun_1_1PtRelFcn.html</anchorfile>
      <anchor>c79575d9263a7a5446f8c57499c13b2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>P1</name>
      <anchorfile>classGenfun_1_1PtRelFcn.html</anchorfile>
      <anchor>403d86d41ba61fba03928176df1aa7a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>P2</name>
      <anchorfile>classGenfun_1_1PtRelFcn.html</anchorfile>
      <anchor>7a11450a40ed7eb02fab39714892636c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>P2</name>
      <anchorfile>classGenfun_1_1PtRelFcn.html</anchorfile>
      <anchor>1109596ac86d07c9edab2f3d7148ab19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>P3</name>
      <anchorfile>classGenfun_1_1PtRelFcn.html</anchorfile>
      <anchor>69cc87d43df9f62986dbea6a0ac84676</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>P3</name>
      <anchorfile>classGenfun_1_1PtRelFcn.html</anchorfile>
      <anchor>4a468d9aea32765d53400f240ad55de4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>P4</name>
      <anchorfile>classGenfun_1_1PtRelFcn.html</anchorfile>
      <anchor>cb5f107664f7282bd7e718a8104661c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>P4</name>
      <anchorfile>classGenfun_1_1PtRelFcn.html</anchorfile>
      <anchor>e33f79faff7c43bc21e5befcb90ee416</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>P5</name>
      <anchorfile>classGenfun_1_1PtRelFcn.html</anchorfile>
      <anchor>b327a3edac7225d2f8153de6eb71f648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>P5</name>
      <anchorfile>classGenfun_1_1PtRelFcn.html</anchorfile>
      <anchor>2e9becee5b1af0752eb48236a649f407</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::PuncturedSmearedExp</name>
    <filename>classGenfun_1_1PuncturedSmearedExp.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>PuncturedSmearedExp</name>
      <anchorfile>classGenfun_1_1PuncturedSmearedExp.html</anchorfile>
      <anchor>7afe64dab209f38a6dc49117d28e34f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PuncturedSmearedExp</name>
      <anchorfile>classGenfun_1_1PuncturedSmearedExp.html</anchorfile>
      <anchor>ba280c5e842013810d8b6d5de0e4cb0d</anchor>
      <arglist>(const PuncturedSmearedExp &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PuncturedSmearedExp</name>
      <anchorfile>classGenfun_1_1PuncturedSmearedExp.html</anchorfile>
      <anchor>4a913abe7719107de1ed72eb87674262</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1PuncturedSmearedExp.html</anchorfile>
      <anchor>a16e80d35d46ddb9cf927c7acd7378bf</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1PuncturedSmearedExp.html</anchorfile>
      <anchor>e2442ec5212163817dffdc73b0988f0f</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>lifetime</name>
      <anchorfile>classGenfun_1_1PuncturedSmearedExp.html</anchorfile>
      <anchor>4d2f444d80317a9a8c133c9249572656</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>lifetime</name>
      <anchorfile>classGenfun_1_1PuncturedSmearedExp.html</anchorfile>
      <anchor>ac8e82b25544df85a65e3530ce0fa071</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>sigma</name>
      <anchorfile>classGenfun_1_1PuncturedSmearedExp.html</anchorfile>
      <anchor>7d8736f9cd2cb54cb5a1ddea144347ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>sigma</name>
      <anchorfile>classGenfun_1_1PuncturedSmearedExp.html</anchorfile>
      <anchor>01a5d8cacd9fa67fb2468613125193e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>puncture</name>
      <anchorfile>classGenfun_1_1PuncturedSmearedExp.html</anchorfile>
      <anchor>06342449223d166d30f6f3c299b7cd13</anchor>
      <arglist>(double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>min</name>
      <anchorfile>classGenfun_1_1PuncturedSmearedExp.html</anchorfile>
      <anchor>46b0ea006206158c9a7458b0bb5fa7d1</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>max</name>
      <anchorfile>classGenfun_1_1PuncturedSmearedExp.html</anchorfile>
      <anchor>37f854efe12e3e7e7feaaa9cb0e25db6</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>min</name>
      <anchorfile>classGenfun_1_1PuncturedSmearedExp.html</anchorfile>
      <anchor>d8add02209c54f30098eaf0618364e93</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>max</name>
      <anchorfile>classGenfun_1_1PuncturedSmearedExp.html</anchorfile>
      <anchor>832db0253bf15e2d35666dedc400d854</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::RCBase</name>
    <filename>classGenfun_1_1RCBase.html</filename>
    <member kind="function">
      <type></type>
      <name>RCBase</name>
      <anchorfile>classGenfun_1_1RCBase.html</anchorfile>
      <anchor>da5eed54af2fd42db6d53b775bdc796f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ref</name>
      <anchorfile>classGenfun_1_1RCBase.html</anchorfile>
      <anchor>d921bccf8c797ea504bb5a2c1c36fcc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unref</name>
      <anchorfile>classGenfun_1_1RCBase.html</anchorfile>
      <anchor>216c180092e754c963ba012ba0ccb64e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>refCount</name>
      <anchorfile>classGenfun_1_1RCBase.html</anchorfile>
      <anchor>c15e75c3d1eb3fdafa6c0ece2a18c798</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~RCBase</name>
      <anchorfile>classGenfun_1_1RCBase.html</anchorfile>
      <anchor>c1dd8ae657571f682a094de45700cee8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::Rectangular</name>
    <filename>classGenfun_1_1Rectangular.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>Rectangular</name>
      <anchorfile>classGenfun_1_1Rectangular.html</anchorfile>
      <anchor>b8896f0b8d9a408efc734dd3b36a132a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangular</name>
      <anchorfile>classGenfun_1_1Rectangular.html</anchorfile>
      <anchor>523e332d47bbb4e964b231b572038a5e</anchor>
      <arglist>(const Rectangular &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Rectangular</name>
      <anchorfile>classGenfun_1_1Rectangular.html</anchorfile>
      <anchor>a2daa2a76889e14ea32fb96645f79151</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Rectangular.html</anchorfile>
      <anchor>3119943e7aedab9f290e601ebdde28b1</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Rectangular.html</anchorfile>
      <anchor>ecc1349706ea7d3257e7572b136ca5a3</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>x0</name>
      <anchorfile>classGenfun_1_1Rectangular.html</anchorfile>
      <anchor>fa24e66862f062431874abd7c6640cfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>x0</name>
      <anchorfile>classGenfun_1_1Rectangular.html</anchorfile>
      <anchor>e1e81b24e18f70c76ee4401d7799afc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>x1</name>
      <anchorfile>classGenfun_1_1Rectangular.html</anchorfile>
      <anchor>38fd8174a7e5f9ca69f335cce62c48d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>x1</name>
      <anchorfile>classGenfun_1_1Rectangular.html</anchorfile>
      <anchor>538b2d394407202900cb2c3676b96e4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>baseline</name>
      <anchorfile>classGenfun_1_1Rectangular.html</anchorfile>
      <anchor>201fe87b9379cfe6615f05c5384e0572</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>baseline</name>
      <anchorfile>classGenfun_1_1Rectangular.html</anchorfile>
      <anchor>3593fb5090cfee3c87fff60e90c47507</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>height</name>
      <anchorfile>classGenfun_1_1Rectangular.html</anchorfile>
      <anchor>c15887e6b25c06880025ac4f72e3f805</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>height</name>
      <anchorfile>classGenfun_1_1Rectangular.html</anchorfile>
      <anchor>7c76b4f817eacceabece547e9827eb5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1Rectangular.html</anchorfile>
      <anchor>f50deeb97394c0d5b2fb901aac943b18</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1Rectangular.html</anchorfile>
      <anchor>08b9358e2594bfae796561409f8eb9c6</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::ReverseExponential</name>
    <filename>classGenfun_1_1ReverseExponential.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>ReverseExponential</name>
      <anchorfile>classGenfun_1_1ReverseExponential.html</anchorfile>
      <anchor>bfdb71daef03b63689af3d9ef44d7cce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReverseExponential</name>
      <anchorfile>classGenfun_1_1ReverseExponential.html</anchorfile>
      <anchor>40bacb01d04a97bfb293cd3b027392b9</anchor>
      <arglist>(const ReverseExponential &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ReverseExponential</name>
      <anchorfile>classGenfun_1_1ReverseExponential.html</anchorfile>
      <anchor>6d84ad3f41343c9255e7c72242e9826c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1ReverseExponential.html</anchorfile>
      <anchor>c4113b74ff48a134c910c6b8a9a0d9d3</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1ReverseExponential.html</anchorfile>
      <anchor>3b6124976dd33d2ac4a3dcf5a0fba266</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>decayConstant</name>
      <anchorfile>classGenfun_1_1ReverseExponential.html</anchorfile>
      <anchor>1012a675ccc500a44e4b1f7d85b926e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1ReverseExponential.html</anchorfile>
      <anchor>74a420ce0f2e0f99406d2518ab205cc4</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1ReverseExponential.html</anchorfile>
      <anchor>9c33bccc0c1071c18b05586c4e988b2b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::RKIntegrator</name>
    <filename>classGenfun_1_1RKIntegrator.html</filename>
    <member kind="function">
      <type></type>
      <name>RKIntegrator</name>
      <anchorfile>classGenfun_1_1RKIntegrator.html</anchorfile>
      <anchor>cb66ecea035d8bf0222b4282cdf22986</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RKIntegrator</name>
      <anchorfile>classGenfun_1_1RKIntegrator.html</anchorfile>
      <anchor>aacf5c7542b626ca3c6106af58b94410</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Parameter *</type>
      <name>addDiffEquation</name>
      <anchorfile>classGenfun_1_1RKIntegrator.html</anchorfile>
      <anchor>1894c5d5fb33d06878d8d614e80600b1</anchor>
      <arglist>(const AbsFunction *diffEquation, const std::string &amp;variableName=&quot;anon&quot;, double defStartingValue=0.0, double startingValueMin=0.0, double startingValueMax=0.0)</arglist>
    </member>
    <member kind="function">
      <type>Parameter *</type>
      <name>createControlParameter</name>
      <anchorfile>classGenfun_1_1RKIntegrator.html</anchorfile>
      <anchor>2a5be9dc9a51f88f9692def200f3280b</anchor>
      <arglist>(const std::string &amp;variableName=&quot;anon&quot;, double defStartingValue=0.0, double startingValueMin=0.0, double startingValueMax=0.0)</arglist>
    </member>
    <member kind="function">
      <type>const RKFunction *</type>
      <name>getFunction</name>
      <anchorfile>classGenfun_1_1RKIntegrator.html</anchorfile>
      <anchor>7dabd5fed813a6d761585f56311a5ded</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <class kind="class">Genfun::RKIntegrator::RKData</class>
    <class kind="class">Genfun::RKIntegrator::RKFunction</class>
  </compound>
  <compound kind="class">
    <name>Genfun::RKIntegrator::RKData</name>
    <filename>classGenfun_1_1RKIntegrator_1_1RKData.html</filename>
    <base>Genfun::RCBase</base>
    <member kind="function">
      <type></type>
      <name>RKData</name>
      <anchorfile>classGenfun_1_1RKIntegrator_1_1RKData.html</anchorfile>
      <anchor>93e766d1e6a9b382424391854526745e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classGenfun_1_1RKIntegrator_1_1RKData.html</anchorfile>
      <anchor>d22abfbbcb61deb0a9bac583bb1329c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recache</name>
      <anchorfile>classGenfun_1_1RKIntegrator_1_1RKData.html</anchorfile>
      <anchor>6344dfb062c22c5482d2ebc1bc35679c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Parameter * &gt;</type>
      <name>_startingValParameter</name>
      <anchorfile>classGenfun_1_1RKIntegrator_1_1RKData.html</anchorfile>
      <anchor>244225d4ba38ccfee2bcbe93e82275f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>_startingValParameterCache</name>
      <anchorfile>classGenfun_1_1RKIntegrator_1_1RKData.html</anchorfile>
      <anchor>48315fc582c72a097fa4f555414343b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Parameter * &gt;</type>
      <name>_controlParameter</name>
      <anchorfile>classGenfun_1_1RKIntegrator_1_1RKData.html</anchorfile>
      <anchor>f89655deb6851a723f03fd3fc7be90a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>_controlParameterCache</name>
      <anchorfile>classGenfun_1_1RKIntegrator_1_1RKData.html</anchorfile>
      <anchor>6531ddb58c1e315c53938650a143a4d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; const AbsFunction * &gt;</type>
      <name>_diffEqn</name>
      <anchorfile>classGenfun_1_1RKIntegrator_1_1RKData.html</anchorfile>
      <anchor>b9673c083d2d5b09c275129f4dfbb831</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; Data &gt;</type>
      <name>_fx</name>
      <anchorfile>classGenfun_1_1RKIntegrator_1_1RKData.html</anchorfile>
      <anchor>d7b8e9784c4096af491b42edfb5d9fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_locked</name>
      <anchorfile>classGenfun_1_1RKIntegrator_1_1RKData.html</anchorfile>
      <anchor>ebea980e3c5d71d45448664c92abe5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ImaginaryFriend</name>
      <anchorfile>classGenfun_1_1RKIntegrator_1_1RKData.html</anchorfile>
      <anchor>d10e94f36bd6bf2a075692bd8ec7a905</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">Genfun::RKIntegrator::RKData::Data</class>
  </compound>
  <compound kind="struct">
    <name>Genfun::RKIntegrator::RKData::Data</name>
    <filename>structGenfun_1_1RKIntegrator_1_1RKData_1_1Data.html</filename>
    <member kind="function">
      <type></type>
      <name>Data</name>
      <anchorfile>structGenfun_1_1RKIntegrator_1_1RKData_1_1Data.html</anchorfile>
      <anchor>2b70cacc46c60b9235fd1553d6ce61b0</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structGenfun_1_1RKIntegrator_1_1RKData_1_1Data.html</anchorfile>
      <anchor>acba5d2fe28a86ead71d7ffb21c319b9</anchor>
      <arglist>(const Data &amp;right) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structGenfun_1_1RKIntegrator_1_1RKData_1_1Data.html</anchorfile>
      <anchor>096872f9d68156b08f00f2da0664e74b</anchor>
      <arglist>(const Data &amp;right) const </arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>variable</name>
      <anchorfile>structGenfun_1_1RKIntegrator_1_1RKData_1_1Data.html</anchorfile>
      <anchor>f5d74db05f8c7ff00cedb224f900d1a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>firstDerivative</name>
      <anchorfile>structGenfun_1_1RKIntegrator_1_1RKData_1_1Data.html</anchorfile>
      <anchor>df4ed86045e3b81dc17fad6e1688e6ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>time</name>
      <anchorfile>structGenfun_1_1RKIntegrator_1_1RKData_1_1Data.html</anchorfile>
      <anchor>97e7f9ab65c09da73ebe4dcb8ac2ab0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>dcalc</name>
      <anchorfile>structGenfun_1_1RKIntegrator_1_1RKData_1_1Data.html</anchorfile>
      <anchor>d2c0028d5ff6b489a03c13ef480f1fa2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::RKIntegrator::RKFunction</name>
    <filename>classGenfun_1_1RKIntegrator_1_1RKFunction.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>RKFunction</name>
      <anchorfile>classGenfun_1_1RKIntegrator_1_1RKFunction.html</anchorfile>
      <anchor>128657998ad66af8b0054e386bb789c9</anchor>
      <arglist>(RKData *data, unsigned int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RKFunction</name>
      <anchorfile>classGenfun_1_1RKIntegrator_1_1RKFunction.html</anchorfile>
      <anchor>b1f4351d619d9f4ff4b1a2bd65bf5133</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RKFunction</name>
      <anchorfile>classGenfun_1_1RKIntegrator_1_1RKFunction.html</anchorfile>
      <anchor>148c06c5a48104cef535fe67c79ae94f</anchor>
      <arglist>(const RKFunction &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1RKIntegrator_1_1RKFunction.html</anchorfile>
      <anchor>b8ddcb92d728a4b9baa1d739fb19a195</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1RKIntegrator_1_1RKFunction.html</anchorfile>
      <anchor>26121ed1571804a820efb17ab557726e</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::Sigma</name>
    <filename>classGenfun_1_1Sigma.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>Sigma</name>
      <anchorfile>classGenfun_1_1Sigma.html</anchorfile>
      <anchor>8730e9ba43ca8c4f5cfb5b1875152f6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sigma</name>
      <anchorfile>classGenfun_1_1Sigma.html</anchorfile>
      <anchor>ec0d19300ede28999b6ace0a16f7a032</anchor>
      <arglist>(const Sigma &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Sigma</name>
      <anchorfile>classGenfun_1_1Sigma.html</anchorfile>
      <anchor>9322d23dcaa46a27904ffbb4221b72cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Sigma.html</anchorfile>
      <anchor>04a246968344ccfca5f6a3698eda2084</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Sigma.html</anchorfile>
      <anchor>dd75949201249b846e7fb93a89946397</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dimensionality</name>
      <anchorfile>classGenfun_1_1Sigma.html</anchorfile>
      <anchor>3df259420cbed7d59757ceaa3bdc6f03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1Sigma.html</anchorfile>
      <anchor>01cdbf5837ab3eac84777335e83ed424</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1Sigma.html</anchorfile>
      <anchor>3638f69d7b4d636f91efb3a44a737b86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>classGenfun_1_1Sigma.html</anchorfile>
      <anchor>83db7ca3294489800e7ea0d25bf0d0da</anchor>
      <arglist>(const AbsFunction &amp;fcn)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::Sin</name>
    <filename>classGenfun_1_1Sin.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>Sin</name>
      <anchorfile>classGenfun_1_1Sin.html</anchorfile>
      <anchor>10af3840ddb1629e12ba6199f3ba8416</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Sin</name>
      <anchorfile>classGenfun_1_1Sin.html</anchorfile>
      <anchor>d9e37d538802987cf4caed2f79edffa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sin</name>
      <anchorfile>classGenfun_1_1Sin.html</anchorfile>
      <anchor>c6d64078eb83c4e1de29aea4c6e44df5</anchor>
      <arglist>(const Sin &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Sin.html</anchorfile>
      <anchor>02ee456c6413919983e3709d459786e8</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Sin.html</anchorfile>
      <anchor>663aa571abe671d35533108a3fdc6b52</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1Sin.html</anchorfile>
      <anchor>691244dd65cf3b757b933ae8c918131c</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1Sin.html</anchorfile>
      <anchor>b6acbc5c6de135b25276dce90e12e975</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::SphericalBessel</name>
    <filename>classGenfun_1_1SphericalBessel.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>SphericalBessel</name>
      <anchorfile>classGenfun_1_1SphericalBessel.html</anchorfile>
      <anchor>eae8aeec5b0ba0c0591c0fad86fcefed</anchor>
      <arglist>(unsigned int l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphericalBessel</name>
      <anchorfile>classGenfun_1_1SphericalBessel.html</anchorfile>
      <anchor>b4b58719af286eb07c183d52a5919a4f</anchor>
      <arglist>(const SphericalBessel &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SphericalBessel</name>
      <anchorfile>classGenfun_1_1SphericalBessel.html</anchorfile>
      <anchor>6f9ae3c13ea4e1049f652a16561f4f90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1SphericalBessel.html</anchorfile>
      <anchor>625afaf3c5d14e649cfd08d3b2be0598</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1SphericalBessel.html</anchorfile>
      <anchor>82fc4b5e108b701b75961c8a94f69705</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>l</name>
      <anchorfile>classGenfun_1_1SphericalBessel.html</anchorfile>
      <anchor>60a1236c711133f81ab69710dd6a2d5e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::SphericalNeumann</name>
    <filename>classGenfun_1_1SphericalNeumann.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>SphericalNeumann</name>
      <anchorfile>classGenfun_1_1SphericalNeumann.html</anchorfile>
      <anchor>8222d738e3a1bb9bc515b81b418d0b0a</anchor>
      <arglist>(unsigned int l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphericalNeumann</name>
      <anchorfile>classGenfun_1_1SphericalNeumann.html</anchorfile>
      <anchor>08bb7bcbc1fef6ff26a9046b08d953a9</anchor>
      <arglist>(const SphericalNeumann &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SphericalNeumann</name>
      <anchorfile>classGenfun_1_1SphericalNeumann.html</anchorfile>
      <anchor>46b850d07d32e835ea91312688c3cb2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1SphericalNeumann.html</anchorfile>
      <anchor>da02d46280cd2b93c29c6da4b81b93e1</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1SphericalNeumann.html</anchorfile>
      <anchor>fafd63313e6e7896f9d096c0f3a786fa</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>l</name>
      <anchorfile>classGenfun_1_1SphericalNeumann.html</anchorfile>
      <anchor>68f59ee704cafb724c0f7c07a8abd289</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::Sqrt</name>
    <filename>classGenfun_1_1Sqrt.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>Sqrt</name>
      <anchorfile>classGenfun_1_1Sqrt.html</anchorfile>
      <anchor>86fbd7436cf53dc44bb40602ee36d63e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sqrt</name>
      <anchorfile>classGenfun_1_1Sqrt.html</anchorfile>
      <anchor>c9623711bec44774dce7a68b3970ee30</anchor>
      <arglist>(const Sqrt &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Sqrt</name>
      <anchorfile>classGenfun_1_1Sqrt.html</anchorfile>
      <anchor>480efdbe27473fc86f3d9c7298d17aeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Sqrt.html</anchorfile>
      <anchor>1fab34b8428130a13980afa8063fb662</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Sqrt.html</anchorfile>
      <anchor>468a42b75f94783d83d122eef37d3e8a</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1Sqrt.html</anchorfile>
      <anchor>8f0eab59da32c5069b3d702c7805fe29</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1Sqrt.html</anchorfile>
      <anchor>7301c121cfee8d2a20daf000290658b7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::Square</name>
    <filename>classGenfun_1_1Square.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>Square</name>
      <anchorfile>classGenfun_1_1Square.html</anchorfile>
      <anchor>6fff7e05fb7a0f577aa4870420b170aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Square</name>
      <anchorfile>classGenfun_1_1Square.html</anchorfile>
      <anchor>a5ca76873919f2c50b2ad5e4994fd5ea</anchor>
      <arglist>(const Square &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Square</name>
      <anchorfile>classGenfun_1_1Square.html</anchorfile>
      <anchor>1a69e4ffee329dfe71577f2d74e46301</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Square.html</anchorfile>
      <anchor>d9901879fac6f1b9286a0760afd63b10</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Square.html</anchorfile>
      <anchor>a38de30a9cff49824bab0f84639a73cd</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1Square.html</anchorfile>
      <anchor>88d32ed0a36ccbea3343af268c80c43c</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1Square.html</anchorfile>
      <anchor>e1ee3ef9c49dcdaf9db97d4c497234c1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::Tan</name>
    <filename>classGenfun_1_1Tan.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>Tan</name>
      <anchorfile>classGenfun_1_1Tan.html</anchorfile>
      <anchor>c168285ae17041cb93d4f7ce5972958b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Tan</name>
      <anchorfile>classGenfun_1_1Tan.html</anchorfile>
      <anchor>e5759e02343ad7dc3d9a4df052f73699</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tan</name>
      <anchorfile>classGenfun_1_1Tan.html</anchorfile>
      <anchor>5ddf78e945f8c753322b87c915c40417</anchor>
      <arglist>(const Tan &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Tan.html</anchorfile>
      <anchor>c4b9ce918515a2a5ebc0b72dc60cbfd8</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Tan.html</anchorfile>
      <anchor>baaea0b1a6e001f29f8179fa9f82ee82</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1Tan.html</anchorfile>
      <anchor>9a23e1ec2ad04899be9e4f3e97df55fb</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1Tan.html</anchorfile>
      <anchor>e70270fb7748ca2ce20bb912e2e5a3db</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::TrivariateGaussian</name>
    <filename>classGenfun_1_1TrivariateGaussian.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>TrivariateGaussian</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>1eab858cf25d6403b1597e9be01462e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrivariateGaussian</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>43fdc32078570457f3e97f31b4ecb398</anchor>
      <arglist>(const TrivariateGaussian &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrivariateGaussian</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>a9bbae1ddd46d90c95554a1cd6115efe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>7d70b158050b2192ea83fab351d74521</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>244bf111a884589ef1c2d544e8b1c9ec</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dimensionality</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>115452dfe26efb29cb135aae33757d3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>mean0</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>1ff46b59464ff27d70a79aa721070590</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>mean0</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>46181d8d86b90cf3b1e10d22fc3f1bc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>mean1</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>e48bd10f7dc31333e4e1bfb77daeed64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>mean1</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>ef8655740a50a97e7b7de647d4fa5a54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>mean2</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>03eabd9c719a35b6635b384de14ab822</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>mean2</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>337bcd90ddcf38808e126eb48145c262</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>sigma0</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>04e2df0e27490d52e6d6b7638529bacb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>sigma0</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>c14a2c333a84d11f9617922204d19f8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>sigma1</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>92cd81ef6291bd70b056670fcbfe0eae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>sigma1</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>d0838a3dad8bafc5a9d4b234da4e69cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>sigma2</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>97ef5834e8605b6cdb705942e12889ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>sigma2</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>02aedf87ec26402e521c7694336cabd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>corr01</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>0c3c3542e786aeb21c4dc15d273d9f72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>corr01</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>d4b95105d7fa84a689f8723e8060e9e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>corr02</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>6c1e34147994fc827ad1bd73d23bce95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>corr02</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>a2c6920ccc04461902d28490be06eaa3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>corr12</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>1e83b2a8dec1a597d72ebffe107c185d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>corr12</name>
      <anchorfile>classGenfun_1_1TrivariateGaussian.html</anchorfile>
      <anchor>0c4ba851ebe1e04efb0568386c84a2eb</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::Variable</name>
    <filename>classGenfun_1_1Variable.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>Variable</name>
      <anchorfile>classGenfun_1_1Variable.html</anchorfile>
      <anchor>0e7d7aac52e0b66bdbf87d7af7ff892c</anchor>
      <arglist>(unsigned int selectionIndex=0, unsigned int dimensionality=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variable</name>
      <anchorfile>classGenfun_1_1Variable.html</anchorfile>
      <anchor>44a32b3333fa657cf29d357ffd096059</anchor>
      <arglist>(const Variable &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Variable</name>
      <anchorfile>classGenfun_1_1Variable.html</anchorfile>
      <anchor>8819e050a2dac5c9155f72922466c6e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Variable.html</anchorfile>
      <anchor>19c5307affb3f9e339041fd4396ec36d</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1Variable.html</anchorfile>
      <anchor>e0a8364fa12ce5ee3e7d1c94f1174ab9</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>dimensionality</name>
      <anchorfile>classGenfun_1_1Variable.html</anchorfile>
      <anchor>0c7965cdefa405cc0f9a8b00f2700adb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>index</name>
      <anchorfile>classGenfun_1_1Variable.html</anchorfile>
      <anchor>258919d43cbcac9954ff87b0594ad4f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derivative</type>
      <name>partial</name>
      <anchorfile>classGenfun_1_1Variable.html</anchorfile>
      <anchor>610a8687c83f454588959f31dabdfbdc</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAnalyticDerivative</name>
      <anchorfile>classGenfun_1_1Variable.html</anchorfile>
      <anchor>c4d8db2cad4f566495d82bdf8c156656</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::X_</name>
    <filename>classGenfun_1_1X__.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>X_</name>
      <anchorfile>classGenfun_1_1X__.html</anchorfile>
      <anchor>ed55af6a3da80ea825484c6aecdb252f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>X_</name>
      <anchorfile>classGenfun_1_1X__.html</anchorfile>
      <anchor>2ee82f1461eb4fed2cc8c279e05209b0</anchor>
      <arglist>(const X_ &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~X_</name>
      <anchorfile>classGenfun_1_1X__.html</anchorfile>
      <anchor>9a92ebdbc06c7393b8df8b1cdfc29b83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1X__.html</anchorfile>
      <anchor>df95e6257a3865acd97f3523a41482eb</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1X__.html</anchorfile>
      <anchor>1a99a86ba124656832573bb54a6798a0</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Genfun::EllipticIntegral</name>
    <filename>namespaceGenfun_1_1EllipticIntegral.html</filename>
    <class kind="class">Genfun::EllipticIntegral::FirstKind</class>
    <class kind="class">Genfun::EllipticIntegral::SecondKind</class>
    <class kind="class">Genfun::EllipticIntegral::ThirdKind</class>
  </compound>
  <compound kind="class">
    <name>Genfun::EllipticIntegral::FirstKind</name>
    <filename>classGenfun_1_1EllipticIntegral_1_1FirstKind.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>FirstKind</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1FirstKind.html</anchorfile>
      <anchor>cc11bc5a1b256210de9a87fd76936a40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FirstKind</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1FirstKind.html</anchorfile>
      <anchor>5f71a19ea250aedc4911c0f7e96df066</anchor>
      <arglist>(const FirstKind &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FirstKind</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1FirstKind.html</anchorfile>
      <anchor>838d94ce3e23e586f0020c2604a9ae99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1FirstKind.html</anchorfile>
      <anchor>03e67e1a19181e3efd9b6aaaaa692949</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1FirstKind.html</anchorfile>
      <anchor>1b998ac6b48c60ff110330c98014675c</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>k</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1FirstKind.html</anchorfile>
      <anchor>9747eba808a6b361fa629476bf91e1fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>k</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1FirstKind.html</anchorfile>
      <anchor>df79961e44041a8abc9cc84b28fb163a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::EllipticIntegral::SecondKind</name>
    <filename>classGenfun_1_1EllipticIntegral_1_1SecondKind.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>SecondKind</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1SecondKind.html</anchorfile>
      <anchor>2063cd54389adf91b1fddf4b128ea31a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SecondKind</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1SecondKind.html</anchorfile>
      <anchor>0a4444ce8781d2e0cae0241942ddf4d8</anchor>
      <arglist>(const SecondKind &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SecondKind</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1SecondKind.html</anchorfile>
      <anchor>1332066e8b1a5641e5d1dbab5f3ddf74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1SecondKind.html</anchorfile>
      <anchor>2d3c3c1fb83ef18910ba31905e5a88fe</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1SecondKind.html</anchorfile>
      <anchor>a20c70813667e0ad48cfced0464769a1</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>k</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1SecondKind.html</anchorfile>
      <anchor>0be437f17b4b3c9ef31e3a9b8036905c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>k</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1SecondKind.html</anchorfile>
      <anchor>5f186f92c134a1e21efeb28cc6d56a68</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Genfun::EllipticIntegral::ThirdKind</name>
    <filename>classGenfun_1_1EllipticIntegral_1_1ThirdKind.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="function">
      <type></type>
      <name>ThirdKind</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1ThirdKind.html</anchorfile>
      <anchor>8b475b3c553bdfe83bb62b8c017128ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThirdKind</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1ThirdKind.html</anchorfile>
      <anchor>c68cac1775d9f3167543a4ffe6218e88</anchor>
      <arglist>(const ThirdKind &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ThirdKind</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1ThirdKind.html</anchorfile>
      <anchor>949311329f3100bd6337042b8784ba0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1ThirdKind.html</anchorfile>
      <anchor>1f7cc6f164b5d7c59084988073803a79</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1ThirdKind.html</anchorfile>
      <anchor>c1f23e49d9b42bfa4fa0fbf6b5259157</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>k</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1ThirdKind.html</anchorfile>
      <anchor>0c9005fef85015a558141fdb7e729933</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>k</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1ThirdKind.html</anchorfile>
      <anchor>efa4e6109b568389604d179f35b382e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>n</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1ThirdKind.html</anchorfile>
      <anchor>21738785e092078d71b8b12eff1f33f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>n</name>
      <anchorfile>classGenfun_1_1EllipticIntegral_1_1ThirdKind.html</anchorfile>
      <anchor>d3e7ba03e20ec776bb3093672933b976</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Genfun::FractionalOrder</name>
    <filename>namespaceGenfun_1_1FractionalOrder.html</filename>
    <class kind="class">Genfun::FractionalOrder::Bessel</class>
  </compound>
  <compound kind="class">
    <name>Genfun::FractionalOrder::Bessel</name>
    <filename>classGenfun_1_1FractionalOrder_1_1Bessel.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>classGenfun_1_1FractionalOrder_1_1Bessel.html</anchorfile>
      <anchor>e4e1ef373022dd32a4e1e87312b18b30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>J</name>
      <anchorfile>classGenfun_1_1FractionalOrder_1_1Bessel.html</anchorfile>
      <anchor>e4e1ef373022dd32a4e1e87312b18b30d647b7df41bb7227afe03b278eed803b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Y</name>
      <anchorfile>classGenfun_1_1FractionalOrder_1_1Bessel.html</anchorfile>
      <anchor>e4e1ef373022dd32a4e1e87312b18b30493024cccbfe623437074588ee23c6e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bessel</name>
      <anchorfile>classGenfun_1_1FractionalOrder_1_1Bessel.html</anchorfile>
      <anchor>235ff58ea4903cd8d43bb273dd6bc6cc</anchor>
      <arglist>(Type type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bessel</name>
      <anchorfile>classGenfun_1_1FractionalOrder_1_1Bessel.html</anchorfile>
      <anchor>aca59b4b23f6f9fc8dd1fa41be585885</anchor>
      <arglist>(const Bessel &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Bessel</name>
      <anchorfile>classGenfun_1_1FractionalOrder_1_1Bessel.html</anchorfile>
      <anchor>eb9536d4337b3c76889d3505ba8c46d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FractionalOrder_1_1Bessel.html</anchorfile>
      <anchor>4fe337563afd1189189409d9b12d74b4</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1FractionalOrder_1_1Bessel.html</anchorfile>
      <anchor>cb0283c8c1e2feec814458fc6ad384e1</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Parameter &amp;</type>
      <name>order</name>
      <anchorfile>classGenfun_1_1FractionalOrder_1_1Bessel.html</anchorfile>
      <anchor>a5294e06075b885f10ddc1da40a20d69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>order</name>
      <anchorfile>classGenfun_1_1FractionalOrder_1_1Bessel.html</anchorfile>
      <anchor>8d438989cf1018b5c856338bb12bc02a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Genfun::IntegralOrder</name>
    <filename>namespaceGenfun_1_1IntegralOrder.html</filename>
    <class kind="class">Genfun::IntegralOrder::Bessel</class>
  </compound>
  <compound kind="class">
    <name>Genfun::IntegralOrder::Bessel</name>
    <filename>classGenfun_1_1IntegralOrder_1_1Bessel.html</filename>
    <base>Genfun::AbsFunction</base>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>classGenfun_1_1IntegralOrder_1_1Bessel.html</anchorfile>
      <anchor>6aa2f3bd09d7012493b995b6f936265a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>J</name>
      <anchorfile>classGenfun_1_1IntegralOrder_1_1Bessel.html</anchorfile>
      <anchor>6aa2f3bd09d7012493b995b6f936265a126c2ca3f977a54aad3f13cebc4b07fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Y</name>
      <anchorfile>classGenfun_1_1IntegralOrder_1_1Bessel.html</anchorfile>
      <anchor>6aa2f3bd09d7012493b995b6f936265aa9757ec63a4858811445402feca14dea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bessel</name>
      <anchorfile>classGenfun_1_1IntegralOrder_1_1Bessel.html</anchorfile>
      <anchor>f8405ee7fcfed68760d19f45d0c0a6b0</anchor>
      <arglist>(Type type, unsigned int order)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bessel</name>
      <anchorfile>classGenfun_1_1IntegralOrder_1_1Bessel.html</anchorfile>
      <anchor>6575493353a0ae6de799df2259617956</anchor>
      <arglist>(const Bessel &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Bessel</name>
      <anchorfile>classGenfun_1_1IntegralOrder_1_1Bessel.html</anchorfile>
      <anchor>ff40ceb9e4f6c330ea07643fea7e7888</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1IntegralOrder_1_1Bessel.html</anchorfile>
      <anchor>cb767ac353d9a820cf8efe8cdfefa196</anchor>
      <arglist>(double argument) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classGenfun_1_1IntegralOrder_1_1Bessel.html</anchorfile>
      <anchor>4c0cad844b86bc5418127daa31a60466</anchor>
      <arglist>(const Argument &amp;a) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>HepGeom</name>
    <filename>namespaceHepGeom.html</filename>
    <class kind="class">HepGeom::BasicVector3D</class>
    <class kind="class">HepGeom::Normal3D</class>
    <class kind="class">HepGeom::Normal3D&lt; float &gt;</class>
    <class kind="class">HepGeom::Normal3D&lt; double &gt;</class>
    <class kind="class">HepGeom::Plane3D</class>
    <class kind="class">HepGeom::Point3D</class>
    <class kind="class">HepGeom::Point3D&lt; float &gt;</class>
    <class kind="class">HepGeom::Point3D&lt; double &gt;</class>
    <class kind="class">HepGeom::Transform3D</class>
    <class kind="class">HepGeom::Rotate3D</class>
    <class kind="class">HepGeom::RotateX3D</class>
    <class kind="class">HepGeom::RotateY3D</class>
    <class kind="class">HepGeom::RotateZ3D</class>
    <class kind="class">HepGeom::Translate3D</class>
    <class kind="class">HepGeom::TranslateX3D</class>
    <class kind="class">HepGeom::TranslateY3D</class>
    <class kind="class">HepGeom::TranslateZ3D</class>
    <class kind="class">HepGeom::Reflect3D</class>
    <class kind="class">HepGeom::ReflectX3D</class>
    <class kind="class">HepGeom::ReflectY3D</class>
    <class kind="class">HepGeom::ReflectZ3D</class>
    <class kind="class">HepGeom::Scale3D</class>
    <class kind="class">HepGeom::ScaleX3D</class>
    <class kind="class">HepGeom::ScaleY3D</class>
    <class kind="class">HepGeom::ScaleZ3D</class>
    <class kind="class">HepGeom::Vector3D</class>
    <class kind="class">HepGeom::Vector3D&lt; float &gt;</class>
    <class kind="class">HepGeom::Vector3D&lt; double &gt;</class>
  </compound>
  <compound kind="class">
    <name>HepGeom::BasicVector3D</name>
    <filename>classHepGeom_1_1BasicVector3D.html</filename>
    <templarg>T</templarg>
    <member kind="enumvalue">
      <name>X</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>78a4eb7ed5234fb274c7a2068657d8da062ad83147cf6131a657233eb30e4646</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Y</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>78a4eb7ed5234fb274c7a2068657d8da45b2bde186055cf2c43b801daf6e20b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Z</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>78a4eb7ed5234fb274c7a2068657d8da70b499eecbe3d15506b358c6c8312a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_COORDINATES</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>78a4eb7ed5234fb274c7a2068657d8da5721682f422affd78891b8818fba9b07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIZE</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>78a4eb7ed5234fb274c7a2068657d8dae5b4f502eaf86b7678ef07b1a1775c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicVector3D</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>53e365d6a289f0af1e909cec231d75d0</anchor>
      <arglist>(T x, T y, T z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicVector3D</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>1a832e7c48a1b21c32d1285a1191cab0</anchor>
      <arglist>(const BasicVector3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasicVector3D</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>234df3a9bad5aa976685b975fed0d024</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>e7f5121c81a01c0df7964c44798b5bac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T *</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>534149d1a73c136086220c57b5fa9599</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CLHEP::Hep3Vector</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>0adcf8d07b2e362250b395b02fda2f6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>8460c5a7c3e4c607d5c504f2c7ba1a34</anchor>
      <arglist>(const BasicVector3D&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>3487248298c8e414d259bb321903aa6c</anchor>
      <arglist>(const BasicVector3D&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>468bf1a17e6777a60ac71453f51bc3cd</anchor>
      <arglist>(const BasicVector3D&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>1b05ba31b46bea2da5b15cbadf3a45dd</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>3c811e75a8bff387ac0c84229f4fba87</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>d9c479a45bc175e006e5c71dd248f608</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>c6444608320451082d595921fc231ce3</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>8111a2def49851b19c69118a767b5162</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>fd43b8d78e494064569a1689c97f8d79</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>x</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>0a1be6cd758b74f7d069ef3ba759e2ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>y</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>e839ce17881ac166c394b8098572542e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>z</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>95b6d75cb9fe2b331e3035b5e7501ccd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>ed360366e26069b09e6cad4e4bf82c3e</anchor>
      <arglist>(T a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>369b78a60c359f8e56637f2d7eec1d50</anchor>
      <arglist>(T a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZ</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>9de1bdb2e1c745bc2282a04509f37f0c</anchor>
      <arglist>(T a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>97be6198f30d5d93f074fe8501903164</anchor>
      <arglist>(T x, T y, T z)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>perp2</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>8f5b1795a39833a0a2cccdd061bac084</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>perp</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>39d319353e0443602c03474015f69f3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rho</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>b593c248d21fb003f092dd4cb64e620f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerp</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>0d32011d3d77c49d95878b95daa19d6c</anchor>
      <arglist>(T rh)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mag2</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>eb9d9b876bccfeed3dcf60257faa9be3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mag</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>517e3824e8931f6d149d21caa574a610</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>r</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>9d1962973007e92e09701d64c30ff8c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>phi</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>daeebd8d7c33a1d48c48e92bb437b932</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>theta</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>6cadf14d707d8afaeab342a00a86e42b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cosTheta</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>b9007f7aa9831b22bd341640a6f93778</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getR</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>d6719e7e6b1523db09c05bc405fe6149</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getPhi</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>f3bed258bc1c9aea546ad467486becec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getTheta</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>65d5393af4e176e44d552237aff98e2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMag</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>216118614aefd3b2c54703d03f5f182b</anchor>
      <arglist>(T ma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setR</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>c5d1d7c199aa68f54640895a41dae387</anchor>
      <arglist>(T ma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhi</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>f8ef07ff47118efefcaa371c46d3b231</anchor>
      <arglist>(T ph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTheta</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>7d4ceca2cd149e7a4255b815a6667da6</anchor>
      <arglist>(T th)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pseudoRapidity</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>56e5e9e29cf14616219ece4118115e3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eta</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>b25db57b60f9d64c5d380d24bea4d6d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getEta</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>ec209c7a075374efdc182babf14818ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEta</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>a947b32763e37595e4fb566fee58f507</anchor>
      <arglist>(T a)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>a18f16ac839fba19a42d89640d21c5a2</anchor>
      <arglist>(const BasicVector3D&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; T &gt;</type>
      <name>cross</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>af2d750066deae48481f6091b8872575</anchor>
      <arglist>(const BasicVector3D&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>perp2</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>a0cf3a77930aded9ec42dd72aa3673e5</anchor>
      <arglist>(const BasicVector3D&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>perp</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>85e2c4a4b67aa15c11e88ba5be419ff0</anchor>
      <arglist>(const BasicVector3D&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>angle</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>3e2ad5f6e4187c79b494b64e69d4f7a6</anchor>
      <arglist>(const BasicVector3D&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; T &gt;</type>
      <name>unit</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>023764bd511eff550bed8bf4ca8e0853</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; T &gt;</type>
      <name>orthogonal</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>61c2110d1a9511938685c5013f77629b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; T &gt; &amp;</type>
      <name>rotateX</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>5004646b1c7a3e5c896ba51be58f3444</anchor>
      <arglist>(T a)</arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; T &gt; &amp;</type>
      <name>rotateY</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>30577560677c0eee1ec94a87fdb3ae97</anchor>
      <arglist>(T a)</arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; T &gt; &amp;</type>
      <name>rotateZ</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>94e606ecf96523bc05fcab8b5af071ce</anchor>
      <arglist>(T a)</arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; T &gt; &amp;</type>
      <name>rotate</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>222e7a8a0eca984057ee1987f05f17ef</anchor>
      <arglist>(T a, const BasicVector3D&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BasicVector3D</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>1305e6f7d7afc54269a47133e526507c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>v_</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>8351a04150ff3ba35f654e55664c17b2</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>b776d772648b467e109be9fa8327520b</anchor>
      <arglist>(std::ostream &amp;, const BasicVector3D&lt; float &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>690708f1ce57f623d2b763b8a87dda75</anchor>
      <arglist>(std::istream &amp;, BasicVector3D&lt; float &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; float &gt;</type>
      <name>operator+</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>eb2b87460decd47d1ea7efd3182fed92</anchor>
      <arglist>(const BasicVector3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; float &gt;</type>
      <name>operator+</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>43d0e88d7ea2547b3f92f4061c9074e1</anchor>
      <arglist>(const BasicVector3D&lt; float &gt; &amp;a, const BasicVector3D&lt; float &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; float &gt;</type>
      <name>operator-</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>6f0625636d64e30415e256ec64365ce2</anchor>
      <arglist>(const BasicVector3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; float &gt;</type>
      <name>operator-</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>001b7fa57b01fb3d7fa9cea47893913e</anchor>
      <arglist>(const BasicVector3D&lt; float &gt; &amp;a, const BasicVector3D&lt; float &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; float &gt;</type>
      <name>operator*</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>0d7abfe0723df3ea8ad5516da50d04c6</anchor>
      <arglist>(const BasicVector3D&lt; float &gt; &amp;v, double a)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>operator*</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>13d9b736526b7270e1143c650625a37d</anchor>
      <arglist>(const BasicVector3D&lt; float &gt; &amp;a, const BasicVector3D&lt; float &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; float &gt;</type>
      <name>operator*</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>ab87bd3fdcb45f53a6ef65a871380067</anchor>
      <arglist>(double a, const BasicVector3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; float &gt;</type>
      <name>operator/</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>4d534c863ba1107d4e836ad853860a8d</anchor>
      <arglist>(const BasicVector3D&lt; float &gt; &amp;v, double a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>691a5f00ff65a944737d49932804a3bd</anchor>
      <arglist>(const BasicVector3D&lt; float &gt; &amp;a, const BasicVector3D&lt; float &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>1e9e754c626628204d76c91f7ee58de5</anchor>
      <arglist>(const BasicVector3D&lt; float &gt; &amp;a, const BasicVector3D&lt; float &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>a9aeeddb77d4874b0afa2cb493d0cbf5</anchor>
      <arglist>(std::ostream &amp;, const BasicVector3D&lt; double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>b47664ad8f23a9bea828b07022da502c</anchor>
      <arglist>(std::istream &amp;, BasicVector3D&lt; double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; double &gt;</type>
      <name>operator+</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>777816d6a1a15a3f2bb58af3808a2c54</anchor>
      <arglist>(const BasicVector3D&lt; double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; double &gt;</type>
      <name>operator+</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>6594a416c7ff079869a7876c1405bdf4</anchor>
      <arglist>(const BasicVector3D&lt; double &gt; &amp;a, const BasicVector3D&lt; double &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; double &gt;</type>
      <name>operator-</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>7b4e24d7af77077d5e998eb72197aa00</anchor>
      <arglist>(const BasicVector3D&lt; double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; double &gt;</type>
      <name>operator-</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>9a0961941d8df85123389f6c81d229bc</anchor>
      <arglist>(const BasicVector3D&lt; double &gt; &amp;a, const BasicVector3D&lt; double &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>1df6ae307c2b0b5112b591899a0cb80a</anchor>
      <arglist>(const BasicVector3D&lt; double &gt; &amp;v, double a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator*</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>c411f2156bd88bb7dbbde2aeb29441a6</anchor>
      <arglist>(const BasicVector3D&lt; double &gt; &amp;a, const BasicVector3D&lt; double &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>b5f97e6c4ebd533d2ff2a9e91c78bf77</anchor>
      <arglist>(double a, const BasicVector3D&lt; double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>BasicVector3D&lt; double &gt;</type>
      <name>operator/</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>9300c571f8a40f75374b026c10542a93</anchor>
      <arglist>(const BasicVector3D&lt; double &gt; &amp;v, double a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>73362d8d6631ff09e39a51354cc4f700</anchor>
      <arglist>(const BasicVector3D&lt; double &gt; &amp;a, const BasicVector3D&lt; double &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classHepGeom_1_1BasicVector3D.html</anchorfile>
      <anchor>a6252fc888dc3726a491e5955145e7f6</anchor>
      <arglist>(const BasicVector3D&lt; double &gt; &amp;a, const BasicVector3D&lt; double &gt; &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::Normal3D</name>
    <filename>classHepGeom_1_1Normal3D.html</filename>
    <templarg>T</templarg>
    <base>HepGeom::BasicVector3D</base>
    <member kind="function">
      <type>Normal3D&lt; float &gt;</type>
      <name>operator*</name>
      <anchorfile>classHepGeom_1_1Normal3D.html</anchorfile>
      <anchor>285a8c7f6bc5f4c832c5d9729622b8b7</anchor>
      <arglist>(const Transform3D &amp;m, const Normal3D&lt; float &gt; &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>Normal3D&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>classHepGeom_1_1Normal3D.html</anchorfile>
      <anchor>0e0bb28bdc7e4210b1cbe0ab6c1e7780</anchor>
      <arglist>(const Transform3D &amp;m, const Normal3D&lt; double &gt; &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::Normal3D&lt; float &gt;</name>
    <filename>classHepGeom_1_1Normal3D_3_01float_01_4.html</filename>
    <base>BasicVector3D&lt; float &gt;</base>
    <member kind="function">
      <type></type>
      <name>Normal3D</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01float_01_4.html</anchorfile>
      <anchor>967559d34082ef1789d6512ea90b2516</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Normal3D</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01float_01_4.html</anchorfile>
      <anchor>51a230827853a8f99c68345b6492277c</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Normal3D</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01float_01_4.html</anchorfile>
      <anchor>89e6be616a962b1f69af2d1601bc4c26</anchor>
      <arglist>(const float *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Normal3D</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01float_01_4.html</anchorfile>
      <anchor>0a03857f111d51c3071cbbeb827689ab</anchor>
      <arglist>(const Normal3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Normal3D</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01float_01_4.html</anchorfile>
      <anchor>73691f10b5e453a580bb4b41aaa9e9aa</anchor>
      <arglist>(const BasicVector3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Normal3D</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01float_01_4.html</anchorfile>
      <anchor>8d7eb70b4f379ac8a9b3e468f39962b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Normal3D&lt; float &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01float_01_4.html</anchorfile>
      <anchor>1139ca8a6556d665ee1539dcd048877d</anchor>
      <arglist>(const Normal3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Normal3D&lt; float &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01float_01_4.html</anchorfile>
      <anchor>501f172642e39dc1189171c09cd1edd5</anchor>
      <arglist>(const BasicVector3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Normal3D&lt; float &gt; &amp;</type>
      <name>transform</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01float_01_4.html</anchorfile>
      <anchor>b7867110effe2fd3d55c7b041bf43e67</anchor>
      <arglist>(const Transform3D &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::Normal3D&lt; double &gt;</name>
    <filename>classHepGeom_1_1Normal3D_3_01double_01_4.html</filename>
    <base>BasicVector3D&lt; double &gt;</base>
    <member kind="function">
      <type></type>
      <name>Normal3D</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01double_01_4.html</anchorfile>
      <anchor>9acedb8f84e3ecc87f91cd19e477cf18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Normal3D</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01double_01_4.html</anchorfile>
      <anchor>2ff21e8762433106c79fb3523ed1ed36</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Normal3D</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01double_01_4.html</anchorfile>
      <anchor>e10fddb61cd19371e03fee99f73cee6e</anchor>
      <arglist>(const float *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Normal3D</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01double_01_4.html</anchorfile>
      <anchor>6b25d25c1c670a148cfd472bd75b8516</anchor>
      <arglist>(const double *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Normal3D</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01double_01_4.html</anchorfile>
      <anchor>153633b913082f49afa7430df83ba66e</anchor>
      <arglist>(const Normal3D&lt; double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Normal3D</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01double_01_4.html</anchorfile>
      <anchor>0f237877b1b41d8ff9ebc73d984e4fe0</anchor>
      <arglist>(const BasicVector3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Normal3D</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01double_01_4.html</anchorfile>
      <anchor>7627d61eec0a52e97188635196be4b20</anchor>
      <arglist>(const BasicVector3D&lt; double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Normal3D</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01double_01_4.html</anchorfile>
      <anchor>2c1bf5a2f8d100c01396e7486283244a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Normal3D</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01double_01_4.html</anchorfile>
      <anchor>d283995beeba881b20735079f80b4441</anchor>
      <arglist>(const CLHEP::Hep3Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CLHEP::Hep3Vector</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01double_01_4.html</anchorfile>
      <anchor>08b7b7d24762385a1c90dfa5b2506e27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Normal3D&lt; double &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01double_01_4.html</anchorfile>
      <anchor>5babf776e077a3f34c1783f90a10cd83</anchor>
      <arglist>(const Normal3D&lt; double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Normal3D&lt; double &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01double_01_4.html</anchorfile>
      <anchor>20b9540690ee0fe9c31514ea4dfaa8ad</anchor>
      <arglist>(const BasicVector3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Normal3D&lt; double &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01double_01_4.html</anchorfile>
      <anchor>010d0b67500191552425c3d4c08cc688</anchor>
      <arglist>(const BasicVector3D&lt; double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Normal3D&lt; double &gt; &amp;</type>
      <name>transform</name>
      <anchorfile>classHepGeom_1_1Normal3D_3_01double_01_4.html</anchorfile>
      <anchor>10f7dd241ba7724c5b1df0ec1bd71d98</anchor>
      <arglist>(const Transform3D &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::Plane3D</name>
    <filename>classHepGeom_1_1Plane3D.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>Plane3D</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>7650bde900f68e3481df59cda2697d99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane3D</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>269eee7552bae2515922d0e8e7fc0036</anchor>
      <arglist>(T a, T b, T c, T d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane3D</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>0e1dd1a39edb13b86a827f71e96e59a5</anchor>
      <arglist>(const Normal3D&lt; T &gt; &amp;n, const Point3D&lt; T &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane3D</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>66c738ae1ababe48bddab275e294b110</anchor>
      <arglist>(const Point3D&lt; T &gt; &amp;p1, const Point3D&lt; T &gt; &amp;p2, const Point3D&lt; T &gt; &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane3D</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>20d6e036371fd2f78ddbc66305e9e59f</anchor>
      <arglist>(const Plane3D&lt; float &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Plane3D</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>44dbc13ed77509f104551f34f97d2dd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Plane3D&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>2d05ca9a90e4c4c5aaef9f6d68789880</anchor>
      <arglist>(const Plane3D&lt; T &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>a</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>8925249438aac18166115206750d6eb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>b</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>1a944bfc069501e10730f1312ed9b4fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>c</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>9eae557cb903efaaaefb59b742ac91a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>d</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>be88409acaf7c9beeb7a6766ec14e2a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Normal3D&lt; T &gt;</type>
      <name>normal</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>b5f2dfcd791cc4a9158f1a93356efbc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Plane3D&lt; T &gt; &amp;</type>
      <name>normalize</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>1c406e8759067f7f23f8102a5836eada</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>distance</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>f2910da444884baf8d2fe80551ca26fd</anchor>
      <arglist>(const Point3D&lt; T &gt; &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Point3D&lt; T &gt;</type>
      <name>point</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>330094bb217ccb14017b5c09dcfcad87</anchor>
      <arglist>(const Point3D&lt; T &gt; &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Point3D&lt; T &gt;</type>
      <name>point</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>72828ebdb1a1ad5e960d77f1e81c4638</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>334335e7d39c497a7382db028bdde7d0</anchor>
      <arglist>(const Plane3D&lt; T &gt; &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>754e66babcbaefba4344f5fb5ac4e52d</anchor>
      <arglist>(const Plane3D&lt; T &gt; &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Plane3D&lt; T &gt; &amp;</type>
      <name>transform</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>56fac7ca68a76a867320179f0cfb8733</anchor>
      <arglist>(const Transform3D &amp;m)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>a_</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>79ce21a23ed8ba71283eadc0d4667eb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>b_</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>a925f1f912b6eb97e5b38bafcdd400ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>c_</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>14a22a4e05b614a3745139adf5d9defc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>d_</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>fc1ea252c2b9b6fa0097aeb3aedce8d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>d44a15fc0ab432f80c402dc7e8dd735c</anchor>
      <arglist>(std::ostream &amp;os, const Plane3D&lt; float &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classHepGeom_1_1Plane3D.html</anchorfile>
      <anchor>edcfe94668edfb918e4b4058bcf62117</anchor>
      <arglist>(std::ostream &amp;os, const Plane3D&lt; double &gt; &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::Point3D</name>
    <filename>classHepGeom_1_1Point3D.html</filename>
    <templarg>T</templarg>
    <base>HepGeom::BasicVector3D</base>
    <member kind="function">
      <type>Point3D&lt; float &gt;</type>
      <name>operator*</name>
      <anchorfile>classHepGeom_1_1Point3D.html</anchorfile>
      <anchor>652d4f6ec432496f6963e561f370050b</anchor>
      <arglist>(const Transform3D &amp;m, const Point3D&lt; float &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Point3D&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>classHepGeom_1_1Point3D.html</anchorfile>
      <anchor>8ec894077a44c544e7ba5f209269d3aa</anchor>
      <arglist>(const Transform3D &amp;m, const Point3D&lt; double &gt; &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::Point3D&lt; float &gt;</name>
    <filename>classHepGeom_1_1Point3D_3_01float_01_4.html</filename>
    <base>BasicVector3D&lt; float &gt;</base>
    <member kind="function">
      <type></type>
      <name>Point3D</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01float_01_4.html</anchorfile>
      <anchor>5bd3f0d17e65c50668a1108d4e37bc65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point3D</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01float_01_4.html</anchorfile>
      <anchor>d39ee110fddcf2f132ec499390ef9baa</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point3D</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01float_01_4.html</anchorfile>
      <anchor>92e188bd308a1cccf7a924b001ceb84d</anchor>
      <arglist>(const float *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point3D</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01float_01_4.html</anchorfile>
      <anchor>40aa81c17d2c89561c75598bca89dd19</anchor>
      <arglist>(const Point3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point3D</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01float_01_4.html</anchorfile>
      <anchor>7517a5297c6f46a0712b6a2022c71ad5</anchor>
      <arglist>(const BasicVector3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Point3D</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01float_01_4.html</anchorfile>
      <anchor>0561f37aa3cc26395b539b3f62f92ab8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Point3D&lt; float &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01float_01_4.html</anchorfile>
      <anchor>f856b950be93c7c646b8c101c7694d44</anchor>
      <arglist>(const Point3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Point3D&lt; float &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01float_01_4.html</anchorfile>
      <anchor>c91565d12645e43fedeb31a2717680b6</anchor>
      <arglist>(const BasicVector3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>distance2</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01float_01_4.html</anchorfile>
      <anchor>f16d76594484607352084f6e88f2d55b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>distance2</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01float_01_4.html</anchorfile>
      <anchor>35d222346e35055278aad34a6be773a2</anchor>
      <arglist>(const Point3D&lt; float &gt; &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>distance</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01float_01_4.html</anchorfile>
      <anchor>3fd018d0584f6faba94d9e04d545ff41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>distance</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01float_01_4.html</anchorfile>
      <anchor>d9b737d572cc53a42de1b19cdebee8f7</anchor>
      <arglist>(const Point3D&lt; float &gt; &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Point3D&lt; float &gt; &amp;</type>
      <name>transform</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01float_01_4.html</anchorfile>
      <anchor>98632e74b83790c764a392c21e513806</anchor>
      <arglist>(const Transform3D &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::Point3D&lt; double &gt;</name>
    <filename>classHepGeom_1_1Point3D_3_01double_01_4.html</filename>
    <base>BasicVector3D&lt; double &gt;</base>
    <member kind="function">
      <type></type>
      <name>Point3D</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01double_01_4.html</anchorfile>
      <anchor>1a483d1c34fb6c2a31f5fc101781a4c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point3D</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01double_01_4.html</anchorfile>
      <anchor>6274a8882e14c9df930b00667d0bb386</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point3D</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01double_01_4.html</anchorfile>
      <anchor>1c77988809b62c8e04bc1cf72e90a7a6</anchor>
      <arglist>(const float *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point3D</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01double_01_4.html</anchorfile>
      <anchor>574a25f8ad6afbe7d260af4a16572b60</anchor>
      <arglist>(const double *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point3D</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01double_01_4.html</anchorfile>
      <anchor>d636afa9cf0dfe4962eff5c8a6ef4e08</anchor>
      <arglist>(const Point3D&lt; double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point3D</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01double_01_4.html</anchorfile>
      <anchor>9c71605b2862cf4b028b0e84dc4030f0</anchor>
      <arglist>(const BasicVector3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point3D</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01double_01_4.html</anchorfile>
      <anchor>79432d82b554a5c31f8c912f78f8be0c</anchor>
      <arglist>(const BasicVector3D&lt; double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Point3D</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01double_01_4.html</anchorfile>
      <anchor>8085e4abf0ae3f2b2cb8f9c0fe553013</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point3D</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01double_01_4.html</anchorfile>
      <anchor>f43ae33b96d19122828437df5ef0f6f2</anchor>
      <arglist>(const CLHEP::Hep3Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CLHEP::Hep3Vector</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01double_01_4.html</anchorfile>
      <anchor>755e2ab63763b442a651975c55ca5243</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point3D&lt; double &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01double_01_4.html</anchorfile>
      <anchor>52e4e7329499d03186a100797439d349</anchor>
      <arglist>(const Point3D&lt; double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Point3D&lt; double &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01double_01_4.html</anchorfile>
      <anchor>a5bd8472715263013a152f2f12e3eb3a</anchor>
      <arglist>(const BasicVector3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Point3D&lt; double &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01double_01_4.html</anchorfile>
      <anchor>e6e9b90fbfa4fd1d3149101c21096882</anchor>
      <arglist>(const BasicVector3D&lt; double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01double_01_4.html</anchorfile>
      <anchor>54e9b2c6c636059d2f18535106a4c55f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01double_01_4.html</anchorfile>
      <anchor>d54fc478d680802274dbe702a224d952</anchor>
      <arglist>(const Point3D&lt; double &gt; &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01double_01_4.html</anchorfile>
      <anchor>a5259fd329a5bb415b590fe1a43e9888</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01double_01_4.html</anchorfile>
      <anchor>d30d56e1671e81b37ebd729bcb3ebfcb</anchor>
      <arglist>(const Point3D&lt; double &gt; &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Point3D&lt; double &gt; &amp;</type>
      <name>transform</name>
      <anchorfile>classHepGeom_1_1Point3D_3_01double_01_4.html</anchorfile>
      <anchor>396722111147237e747dd468702c7358</anchor>
      <arglist>(const Transform3D &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::Transform3D</name>
    <filename>classHepGeom_1_1Transform3D.html</filename>
    <member kind="function">
      <type></type>
      <name>Transform3D</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>51d48f51757240f5e85b8fef7549f072</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3D</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>8a6b6186620bee2f1adb5ed66339dae5</anchor>
      <arglist>(const CLHEP::HepRotation &amp;m, const CLHEP::Hep3Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3D</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>9272a6ceb1ad850e4884dd9e7b594b5d</anchor>
      <arglist>(const Point3D&lt; double &gt; &amp;fr0, const Point3D&lt; double &gt; &amp;fr1, const Point3D&lt; double &gt; &amp;fr2, const Point3D&lt; double &gt; &amp;to0, const Point3D&lt; double &gt; &amp;to1, const Point3D&lt; double &gt; &amp;to2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3D</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>dda6d6265d6981440fbc1841fb7c75ab</anchor>
      <arglist>(const Transform3D &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Transform3D</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>468816c457803423496ef3cab0d0766f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Transform3D_row</type>
      <name>operator[]</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>70ea3f1e2b7d5c7636ab7a1eaae9f820</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>bada4c9868d23743493343f210ec14bc</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xx</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>b78b639df8a39f8857193e5f840766d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xy</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>7758398183b2b99bfd3ba7801a7a0f52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xz</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>ada521900b8df5297963cb31577efa65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yx</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>870806a23e58d1f21f907ac60f1e506b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yy</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>72fea5e8e170a4cceef8cd93b68cc3aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yz</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>181885c403926e40e4f0323e768a011d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zx</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>605ad2f71e15868b585ccf95ff0e8040</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zy</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>f88754d0ac119a5073d94bb5627aff38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>zz</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>812d685834220832f422d4d2596e84f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dx</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>e1c333bdf86efcbc68b36a3829d42268</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dy</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>9aa1ac85279e1a20abe24b0243f2941c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dz</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>d411876267197e50d15246d521199724</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Transform3D &amp;</type>
      <name>operator=</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>59e07679aaf0ef1652e31118657169b5</anchor>
      <arglist>(const Transform3D &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>6eb2051dff1020ee0a5a6085deaa23e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transform3D</type>
      <name>inverse</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>87d9dffaed68a0a994f4afe201fa0588</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Transform3D</type>
      <name>operator*</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>94260c357e0ff2e86e8df90a70e7541b</anchor>
      <arglist>(const Transform3D &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDecomposition</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>78a4ec4b997f225178675c41c1f42e55</anchor>
      <arglist>(Scale3D &amp;scale, Rotate3D &amp;rotation, Translate3D &amp;translation) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNear</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>8e6876b880e690308ce11b4f2bf2b0a8</anchor>
      <arglist>(const Transform3D &amp;t, double tolerance=2.2E-14) const </arglist>
    </member>
    <member kind="function">
      <type>CLHEP::HepRotation</type>
      <name>getRotation</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>10228edd711ee099f025eb42f98abb77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CLHEP::Hep3Vector</type>
      <name>getTranslation</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>cf0f3b9071ecc92563358e7a55b2eeea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>6987ed17db0990175c943b337302537e</anchor>
      <arglist>(const Transform3D &amp;transform) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>2fd00fc2542fdadbfd0474121a497080</anchor>
      <arglist>(const Transform3D &amp;transform) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Transform3D</type>
      <name>Identity</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>054123b0f1ca281660e1f998965ef69b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Transform3D</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>dfdcee2c4a67a23e561ebd859826ff43</anchor>
      <arglist>(double XX, double XY, double XZ, double DX, double YX, double YY, double YZ, double DY, double ZX, double ZY, double ZZ, double DZ)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>8f48aa776b3af0cbe8f0eba9a127e313</anchor>
      <arglist>(double XX, double XY, double XZ, double DX, double YX, double YY, double YZ, double DY, double ZX, double ZY, double ZZ, double DZ)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>xx_</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>11ba2cc506b055f5576d8b6197a897ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>xy_</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>7acf98474270d8a6aa7fe8a3bd3f9ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>xz_</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>da90be23d749e81f310e5832705f2c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dx_</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>314ab8b80f6b6af57fec3ff6b3265517</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>yx_</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>75b236bba12f5bc3f22a34c37a07201e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>yy_</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>e19ffe919ea24a6bc147bac4575587f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>yz_</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>ac6ce17adf2c8258b83dba80e014480b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dy_</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>06f6cbefb2f7677c5c1e518e093bee4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>zx_</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>bc1ac33555f7756320c83f28964dd8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>zy_</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>1f6c6d9241a9560b93ee8424b2c1e9ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>zz_</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>fa534740876242c19ab91e5a6037f42c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dz_</name>
      <anchorfile>classHepGeom_1_1Transform3D.html</anchorfile>
      <anchor>2559162aac115f8b659d45cd6803a7d6</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">HepGeom::Transform3D::Transform3D_row</class>
  </compound>
  <compound kind="class">
    <name>HepGeom::Transform3D::Transform3D_row</name>
    <filename>classHepGeom_1_1Transform3D_1_1Transform3D__row.html</filename>
    <member kind="function">
      <type></type>
      <name>Transform3D_row</name>
      <anchorfile>classHepGeom_1_1Transform3D_1_1Transform3D__row.html</anchorfile>
      <anchor>c202a283da15b947462d9a398aa07804</anchor>
      <arglist>(const Transform3D &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classHepGeom_1_1Transform3D_1_1Transform3D__row.html</anchorfile>
      <anchor>82a31fafba8e3b0722150ae42fb30516</anchor>
      <arglist>(int) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::Rotate3D</name>
    <filename>classHepGeom_1_1Rotate3D.html</filename>
    <base>HepGeom::Transform3D</base>
    <member kind="function">
      <type></type>
      <name>Rotate3D</name>
      <anchorfile>classHepGeom_1_1Rotate3D.html</anchorfile>
      <anchor>916fa8e13375f3764ec0e681cd32c8c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotate3D</name>
      <anchorfile>classHepGeom_1_1Rotate3D.html</anchorfile>
      <anchor>49a0347473cea49fd1a07027ec52dc50</anchor>
      <arglist>(const CLHEP::HepRotation &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotate3D</name>
      <anchorfile>classHepGeom_1_1Rotate3D.html</anchorfile>
      <anchor>9ceff4ff53372a9473fc2a29118e18ac</anchor>
      <arglist>(double a, const Point3D&lt; double &gt; &amp;p1, const Point3D&lt; double &gt; &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotate3D</name>
      <anchorfile>classHepGeom_1_1Rotate3D.html</anchorfile>
      <anchor>9c82727c64b3206c5f434205248d139b</anchor>
      <arglist>(double a, const Vector3D&lt; double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotate3D</name>
      <anchorfile>classHepGeom_1_1Rotate3D.html</anchorfile>
      <anchor>a542d7d896b920d3301d8fc203942de1</anchor>
      <arglist>(const Point3D&lt; double &gt; &amp;fr1, const Point3D&lt; double &gt; &amp;fr2, const Point3D&lt; double &gt; &amp;to1, const Point3D&lt; double &gt; &amp;to2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::RotateX3D</name>
    <filename>classHepGeom_1_1RotateX3D.html</filename>
    <base>HepGeom::Rotate3D</base>
    <member kind="function">
      <type></type>
      <name>RotateX3D</name>
      <anchorfile>classHepGeom_1_1RotateX3D.html</anchorfile>
      <anchor>ce5b843e36cdb6fcc08d97334e2269cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotateX3D</name>
      <anchorfile>classHepGeom_1_1RotateX3D.html</anchorfile>
      <anchor>a4f1058eafe825de1e573e28a93cfbef</anchor>
      <arglist>(double a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::RotateY3D</name>
    <filename>classHepGeom_1_1RotateY3D.html</filename>
    <base>HepGeom::Rotate3D</base>
    <member kind="function">
      <type></type>
      <name>RotateY3D</name>
      <anchorfile>classHepGeom_1_1RotateY3D.html</anchorfile>
      <anchor>189354d987159686b2047278d9f0faf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotateY3D</name>
      <anchorfile>classHepGeom_1_1RotateY3D.html</anchorfile>
      <anchor>ecee66fd12b7a04be32c61fc52239f16</anchor>
      <arglist>(double a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::RotateZ3D</name>
    <filename>classHepGeom_1_1RotateZ3D.html</filename>
    <base>HepGeom::Rotate3D</base>
    <member kind="function">
      <type></type>
      <name>RotateZ3D</name>
      <anchorfile>classHepGeom_1_1RotateZ3D.html</anchorfile>
      <anchor>e6273c6ba72f318673805731a54020bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotateZ3D</name>
      <anchorfile>classHepGeom_1_1RotateZ3D.html</anchorfile>
      <anchor>c78380f7260ed85ebb6121e31393a7dc</anchor>
      <arglist>(double a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::Translate3D</name>
    <filename>classHepGeom_1_1Translate3D.html</filename>
    <base>HepGeom::Transform3D</base>
    <member kind="function">
      <type></type>
      <name>Translate3D</name>
      <anchorfile>classHepGeom_1_1Translate3D.html</anchorfile>
      <anchor>4c316f9692cdd3833d501942f0f27530</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Translate3D</name>
      <anchorfile>classHepGeom_1_1Translate3D.html</anchorfile>
      <anchor>c23d87327c0b16b9bad6d7ef3bf1e383</anchor>
      <arglist>(const CLHEP::Hep3Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Translate3D</name>
      <anchorfile>classHepGeom_1_1Translate3D.html</anchorfile>
      <anchor>b25e971a95007bc9262d43701dc97f8f</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::TranslateX3D</name>
    <filename>classHepGeom_1_1TranslateX3D.html</filename>
    <base>HepGeom::Translate3D</base>
    <member kind="function">
      <type></type>
      <name>TranslateX3D</name>
      <anchorfile>classHepGeom_1_1TranslateX3D.html</anchorfile>
      <anchor>e023609974ea24d86249fc4ffaafaa23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TranslateX3D</name>
      <anchorfile>classHepGeom_1_1TranslateX3D.html</anchorfile>
      <anchor>206ee2e6172462d7ba4932358f11f628</anchor>
      <arglist>(double x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::TranslateY3D</name>
    <filename>classHepGeom_1_1TranslateY3D.html</filename>
    <base>HepGeom::Translate3D</base>
    <member kind="function">
      <type></type>
      <name>TranslateY3D</name>
      <anchorfile>classHepGeom_1_1TranslateY3D.html</anchorfile>
      <anchor>e8ca5c940f7befadbf436c19d65abdd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TranslateY3D</name>
      <anchorfile>classHepGeom_1_1TranslateY3D.html</anchorfile>
      <anchor>c2a923d66dc9f8add4ea5c16fb3258ea</anchor>
      <arglist>(double y)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::TranslateZ3D</name>
    <filename>classHepGeom_1_1TranslateZ3D.html</filename>
    <base>HepGeom::Translate3D</base>
    <member kind="function">
      <type></type>
      <name>TranslateZ3D</name>
      <anchorfile>classHepGeom_1_1TranslateZ3D.html</anchorfile>
      <anchor>9229f5cfc15d69e40db7edcab6dbc90f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TranslateZ3D</name>
      <anchorfile>classHepGeom_1_1TranslateZ3D.html</anchorfile>
      <anchor>67aa2c439070e86d2c74afa48a2fbf26</anchor>
      <arglist>(double z)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::Reflect3D</name>
    <filename>classHepGeom_1_1Reflect3D.html</filename>
    <base>HepGeom::Transform3D</base>
    <member kind="function">
      <type></type>
      <name>Reflect3D</name>
      <anchorfile>classHepGeom_1_1Reflect3D.html</anchorfile>
      <anchor>b6d091a674955fb57ac7c9af26328d05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Reflect3D</name>
      <anchorfile>classHepGeom_1_1Reflect3D.html</anchorfile>
      <anchor>e1cd468383fd49d329f5804eb31b8410</anchor>
      <arglist>(double a, double b, double c, double d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Reflect3D</name>
      <anchorfile>classHepGeom_1_1Reflect3D.html</anchorfile>
      <anchor>2951c856e9b78307639cf23b55120b85</anchor>
      <arglist>(const Normal3D&lt; double &gt; &amp;normal, const Point3D&lt; double &gt; &amp;point)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Reflect3D</name>
      <anchorfile>classHepGeom_1_1Reflect3D.html</anchorfile>
      <anchor>8eba7e021e1718c79e20b781210f1254</anchor>
      <arglist>(double XX, double XY, double XZ, double DX, double YX, double YY, double YZ, double DY, double ZX, double ZY, double ZZ, double DZ)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::ReflectX3D</name>
    <filename>classHepGeom_1_1ReflectX3D.html</filename>
    <base>HepGeom::Reflect3D</base>
    <member kind="function">
      <type></type>
      <name>ReflectX3D</name>
      <anchorfile>classHepGeom_1_1ReflectX3D.html</anchorfile>
      <anchor>33656e72d2b671713347eb7d4ddadd52</anchor>
      <arglist>(double x=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::ReflectY3D</name>
    <filename>classHepGeom_1_1ReflectY3D.html</filename>
    <base>HepGeom::Reflect3D</base>
    <member kind="function">
      <type></type>
      <name>ReflectY3D</name>
      <anchorfile>classHepGeom_1_1ReflectY3D.html</anchorfile>
      <anchor>2942f259c684f4b0f5d759aff6edcf2d</anchor>
      <arglist>(double y=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::ReflectZ3D</name>
    <filename>classHepGeom_1_1ReflectZ3D.html</filename>
    <base>HepGeom::Reflect3D</base>
    <member kind="function">
      <type></type>
      <name>ReflectZ3D</name>
      <anchorfile>classHepGeom_1_1ReflectZ3D.html</anchorfile>
      <anchor>e8fdcf3da24847b0ac3f32e1030fc655</anchor>
      <arglist>(double z=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::Scale3D</name>
    <filename>classHepGeom_1_1Scale3D.html</filename>
    <base>HepGeom::Transform3D</base>
    <member kind="function">
      <type></type>
      <name>Scale3D</name>
      <anchorfile>classHepGeom_1_1Scale3D.html</anchorfile>
      <anchor>32bfe40e6d5db5e9c22fabd7e5e4c0ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Scale3D</name>
      <anchorfile>classHepGeom_1_1Scale3D.html</anchorfile>
      <anchor>8a7624bb27c892b4b11dc9cc18fbaf8a</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Scale3D</name>
      <anchorfile>classHepGeom_1_1Scale3D.html</anchorfile>
      <anchor>02768e2eedbc10cfea18c69036b9eff0</anchor>
      <arglist>(double s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::ScaleX3D</name>
    <filename>classHepGeom_1_1ScaleX3D.html</filename>
    <base>HepGeom::Scale3D</base>
    <member kind="function">
      <type></type>
      <name>ScaleX3D</name>
      <anchorfile>classHepGeom_1_1ScaleX3D.html</anchorfile>
      <anchor>f450a76c052275c696053e2bc7f08f3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScaleX3D</name>
      <anchorfile>classHepGeom_1_1ScaleX3D.html</anchorfile>
      <anchor>1f61466d77d1fb884f24fb57dae6e3e2</anchor>
      <arglist>(double x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::ScaleY3D</name>
    <filename>classHepGeom_1_1ScaleY3D.html</filename>
    <base>HepGeom::Scale3D</base>
    <member kind="function">
      <type></type>
      <name>ScaleY3D</name>
      <anchorfile>classHepGeom_1_1ScaleY3D.html</anchorfile>
      <anchor>42ff704e3e755996c69cbb8fad00d74c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScaleY3D</name>
      <anchorfile>classHepGeom_1_1ScaleY3D.html</anchorfile>
      <anchor>b19c68e364b1c0485b1327f28053fd19</anchor>
      <arglist>(double y)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::ScaleZ3D</name>
    <filename>classHepGeom_1_1ScaleZ3D.html</filename>
    <base>HepGeom::Scale3D</base>
    <member kind="function">
      <type></type>
      <name>ScaleZ3D</name>
      <anchorfile>classHepGeom_1_1ScaleZ3D.html</anchorfile>
      <anchor>2641ec57518a5d407e9dcabdea6d7a86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScaleZ3D</name>
      <anchorfile>classHepGeom_1_1ScaleZ3D.html</anchorfile>
      <anchor>6d1ac8d37143e1c146d2ad31e3f06b9c</anchor>
      <arglist>(double z)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::Vector3D</name>
    <filename>classHepGeom_1_1Vector3D.html</filename>
    <templarg>T</templarg>
    <base>HepGeom::BasicVector3D</base>
    <member kind="function">
      <type>Vector3D&lt; float &gt;</type>
      <name>operator*</name>
      <anchorfile>classHepGeom_1_1Vector3D.html</anchorfile>
      <anchor>b2b3a7505655dbd0a6a7714d47144b1a</anchor>
      <arglist>(const Transform3D &amp;m, const Vector3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>classHepGeom_1_1Vector3D.html</anchorfile>
      <anchor>bc9dca98f22c8429c67106dcf0b0002a</anchor>
      <arglist>(const Transform3D &amp;m, const Vector3D&lt; double &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::Vector3D&lt; float &gt;</name>
    <filename>classHepGeom_1_1Vector3D_3_01float_01_4.html</filename>
    <base>BasicVector3D&lt; float &gt;</base>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01float_01_4.html</anchorfile>
      <anchor>32b04e4d3a15528394eabacb3d430a0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01float_01_4.html</anchorfile>
      <anchor>bc0d9af9752849a7d548061dda5eddb7</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01float_01_4.html</anchorfile>
      <anchor>b04e38d2faa292f645ccecd99ba07ac2</anchor>
      <arglist>(const float *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01float_01_4.html</anchorfile>
      <anchor>d37ab559b3744bc9ac833b31270d6b4b</anchor>
      <arglist>(const Vector3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01float_01_4.html</anchorfile>
      <anchor>95730b45ed372117f85d70a616d58aea</anchor>
      <arglist>(const BasicVector3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Vector3D</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01float_01_4.html</anchorfile>
      <anchor>a2b3bc22e6e1a9c31734b6a99a717168</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector3D&lt; float &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01float_01_4.html</anchorfile>
      <anchor>2f70df79cb96d0b9ed25ce681dbf5b6c</anchor>
      <arglist>(const Vector3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D&lt; float &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01float_01_4.html</anchorfile>
      <anchor>38f7d0f290fe2f225a580d8d5fb8b1ef</anchor>
      <arglist>(const BasicVector3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D&lt; float &gt; &amp;</type>
      <name>transform</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01float_01_4.html</anchorfile>
      <anchor>39d2e6377a17ea72ffa67b490ec10310</anchor>
      <arglist>(const Transform3D &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HepGeom::Vector3D&lt; double &gt;</name>
    <filename>classHepGeom_1_1Vector3D_3_01double_01_4.html</filename>
    <base>BasicVector3D&lt; double &gt;</base>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01double_01_4.html</anchorfile>
      <anchor>0eea0eaf15f67acce294ddda139f8379</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01double_01_4.html</anchorfile>
      <anchor>aad23144d94a601c903b5e7ac99b1b08</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01double_01_4.html</anchorfile>
      <anchor>93b780d78c212d2bd5cbef9f9bc04f6a</anchor>
      <arglist>(const float *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01double_01_4.html</anchorfile>
      <anchor>778c39f13fbda4b2882e4713b7983158</anchor>
      <arglist>(const double *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01double_01_4.html</anchorfile>
      <anchor>852e246aa6bd636793daa11d9518e698</anchor>
      <arglist>(const Vector3D&lt; double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01double_01_4.html</anchorfile>
      <anchor>6fc147c9e478b52363f8f10e8c2ceb72</anchor>
      <arglist>(const BasicVector3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01double_01_4.html</anchorfile>
      <anchor>415dfec8ac2af4394ada7e58cf6fea8d</anchor>
      <arglist>(const BasicVector3D&lt; double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Vector3D</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01double_01_4.html</anchorfile>
      <anchor>1e7fb9d1ee240a4075098fba495683cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01double_01_4.html</anchorfile>
      <anchor>07dc17cebdaf3ac9c2ba5f44b436d60d</anchor>
      <arglist>(const CLHEP::Hep3Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CLHEP::Hep3Vector</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01double_01_4.html</anchorfile>
      <anchor>2d62fed862629c95e7dfcf328c61a976</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D&lt; double &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01double_01_4.html</anchorfile>
      <anchor>5c032b9987ffe2dcec091dfbdc54595a</anchor>
      <arglist>(const Vector3D&lt; double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D&lt; double &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01double_01_4.html</anchorfile>
      <anchor>3991cdb9da19b42010ca6ea8ff7e60bc</anchor>
      <arglist>(const BasicVector3D&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D&lt; double &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01double_01_4.html</anchorfile>
      <anchor>de4ab2df5f67eca2622ca4e150f131bd</anchor>
      <arglist>(const BasicVector3D&lt; double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D&lt; double &gt; &amp;</type>
      <name>transform</name>
      <anchorfile>classHepGeom_1_1Vector3D_3_01double_01_4.html</anchorfile>
      <anchor>9208312d03a3beec43ec61f697cccd35</anchor>
      <arglist>(const Transform3D &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>HepTool</name>
    <filename>namespaceHepTool.html</filename>
    <class kind="class">HepTool::Evaluator</class>
  </compound>
  <compound kind="class">
    <name>HepTool::Evaluator</name>
    <filename>classHepTool_1_1Evaluator.html</filename>
    <member kind="enumvalue">
      <name>OK</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>19aa051c905b4519fb524c8c3de528b3bbbfa4c504e653ecebc2dc4a02e3f34f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WARNING_EXISTING_VARIABLE</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>19aa051c905b4519fb524c8c3de528b3c8574a00fa7d544a91b081b4c349edc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WARNING_EXISTING_FUNCTION</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>19aa051c905b4519fb524c8c3de528b3f83cdb4788ddabecb26e9c1c716074ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WARNING_BLANK_STRING</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>19aa051c905b4519fb524c8c3de528b3dfdb0d214d149e5e0c4ca0b2ce0a3b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ERROR_NOT_A_NAME</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>19aa051c905b4519fb524c8c3de528b38f3b30b9236d1b884b89b0bbdcc436ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ERROR_SYNTAX_ERROR</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>19aa051c905b4519fb524c8c3de528b323f1ac21ec9bfd159088f41d015b9c5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ERROR_UNPAIRED_PARENTHESIS</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>19aa051c905b4519fb524c8c3de528b3d447b939e510dfe5c7a61c8a423644f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ERROR_UNEXPECTED_SYMBOL</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>19aa051c905b4519fb524c8c3de528b356bbb7aed594b7c251261eb488f7db74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ERROR_UNKNOWN_VARIABLE</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>19aa051c905b4519fb524c8c3de528b3f863b45ec4ed4bbb34f9c9bf28f82786</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ERROR_UNKNOWN_FUNCTION</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>19aa051c905b4519fb524c8c3de528b356d9101dd182d82117dcec672e90acf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ERROR_EMPTY_PARAMETER</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>19aa051c905b4519fb524c8c3de528b3ce1f052997133794dbed982c22f01071</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ERROR_CALCULATION_ERROR</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>19aa051c905b4519fb524c8c3de528b3d61ec69be7c1f7639a972aa3a297615f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Evaluator</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>ae063c51dd41966bcb84c664e46fe4a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Evaluator</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>e8a420239f1dbf78d522f7bc1fcb52a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>7dc9b53ee92056ac4b3b34302c91c865</anchor>
      <arglist>(const char *expression)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>status</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>e7260e78df579a539d083e038ae62100</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>error_position</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>51bca43ccd3200d38d8b7a8ba6e130fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_error</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>71d40eedb07fbf64deb7991f3aaa43ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariable</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>d930841605e76cb01865d76600f47634</anchor>
      <arglist>(const char *name, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariable</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>81fb032e54928dc42b485104698e753c</anchor>
      <arglist>(const char *name, const char *expression)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunction</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>d8210de1858cf4b5813a0d5714860ec7</anchor>
      <arglist>(const char *name, double(*fun)())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunction</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>855f8b281ce51738a32bb7927add66ac</anchor>
      <arglist>(const char *name, double(*fun)(double))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunction</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>e4bc5ff51aeac1eaec3ed96392c99291</anchor>
      <arglist>(const char *name, double(*fun)(double, double))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunction</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>7a1aece087dd611ec79fcffe2be138e6</anchor>
      <arglist>(const char *name, double(*fun)(double, double, double))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunction</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>f3d24a3da127d9b379fad09cdee218e6</anchor>
      <arglist>(const char *name, double(*fun)(double, double, double, double))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunction</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>b4065a2e43477369bf25adafb86afc16</anchor>
      <arglist>(const char *name, double(*fun)(double, double, double, double, double))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findVariable</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>dc3ae59b4633dce68e86b10c0bf1606c</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findFunction</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>e3ce25a073747f334db52424c8e99995</anchor>
      <arglist>(const char *name, int npar) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeVariable</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>babfb5fbf1320cc5a6297165be6983a3</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFunction</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>d31dc91dc22dfd5e8c888adabdb92f1d</anchor>
      <arglist>(const char *name, int npar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>3bd488d614b045afc4cd88a987d3e913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStdMath</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>2fc5ea744b0391985eb8d6326fdf2075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSystemOfUnits</name>
      <anchorfile>classHepTool_1_1Evaluator.html</anchorfile>
      <anchor>3050dccb2295a09f3e6c6af054b0d342</anchor>
      <arglist>(double meter=1.0, double kilogram=1.0, double second=1.0, double ampere=1.0, double kelvin=1.0, double mole=1.0, double candela=1.0)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>zmex</name>
    <filename>namespacezmex.html</filename>
    <class kind="class">zmex::ZMerrnoList</class>
    <class kind="class">zmex::ZMexception</class>
    <class kind="class">zmex::ZMexClassInfo</class>
    <class kind="class">zmex::ZMexHandlerBehavior</class>
    <class kind="class">zmex::ZMexHandler</class>
    <class kind="class">zmex::ZMexThrowAlways</class>
    <class kind="class">zmex::ZMexThrowErrors</class>
    <class kind="class">zmex::ZMexIgnoreAlways</class>
    <class kind="class">zmex::ZMexIgnoreNextN</class>
    <class kind="class">zmex::ZMexHandleViaParent</class>
    <class kind="class">zmex::ZMexLogBehavior</class>
    <class kind="class">zmex::ZMexLogNever</class>
    <class kind="class">zmex::ZMexLogAlways</class>
    <class kind="class">zmex::ZMexLogTwice</class>
    <class kind="class">zmex::ZMexLogViaParent</class>
    <class kind="class">zmex::ZMexValidationStyle</class>
    <class kind="class">zmex::ZMexLogger</class>
    <member kind="enumeration">
      <name>ZMexAction</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>7ffa53f1ddd7416b0eaed75825b27004</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexThrowIt</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>7ffa53f1ddd7416b0eaed75825b27004afc1b2e13467117863989f5eb9c38e2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexIgnoreIt</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>7ffa53f1ddd7416b0eaed75825b27004278a3886bde6bde38a66165beaa2774f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexHANDLEVIAPARENT</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>7ffa53f1ddd7416b0eaed75825b27004bdd319bd2639839a1c3110c825ca2d6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ZMexLogResult</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>b589eb5b24de52c1b39fef06d2256c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexLOGGED</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>b589eb5b24de52c1b39fef06d2256c22f41bea5b22449f917cf69fba3a23e64b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexNOTLOGGED</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>b589eb5b24de52c1b39fef06d2256c2247154f02e398badebf4e6118475c6d4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexLOGVIAPARENT</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>b589eb5b24de52c1b39fef06d2256c2200f79940ee8c99312d9b5094171d9727</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ZMexSeverity</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>962b2e3a33b5114dcdede0eb63f211b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexNORMAL</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>962b2e3a33b5114dcdede0eb63f211b0ad79366a9ad192420af9a103a097d1fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexINFO</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>962b2e3a33b5114dcdede0eb63f211b0b52aabbea29b87424973889731b47f82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexWARNING</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>962b2e3a33b5114dcdede0eb63f211b00fcc9ef7edf1651f411751beae5c6cd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexERROR</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>962b2e3a33b5114dcdede0eb63f211b095619fd2401760e4177f0e9af9f176e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexSEVERE</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>962b2e3a33b5114dcdede0eb63f211b08609088dcc8dd05280659836b9582482</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexFATAL</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>962b2e3a33b5114dcdede0eb63f211b0b24e544cb52135a0af2b4dfb28505d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexPROBLEM</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>962b2e3a33b5114dcdede0eb63f211b083533acd10e38acf4cdec646302dce18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZMexSEVERITYenumLAST</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>962b2e3a33b5114dcdede0eb63f211b05dbb070d2d989fffc077dece17fcc3a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ZMexHandler &amp;</type>
      <name>ZMhandler</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>e1a9c2168e1b0a4b5756920a2c87f283</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ZMexLogger &amp;</type>
      <name>ZMlogger</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>c26ce407675cf3a608c1a8441e358500</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ZMexAction</type>
      <name>ZMthrow_</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>da9a002281622a2dd02de08cdba3699c</anchor>
      <arglist>(const ZMexception &amp;userException, int lineNum, const char fileName[])</arglist>
    </member>
    <member kind="variable">
      <type>ZMerrnoList</type>
      <name>ZMerrno</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>ffa2a326759c8145064a23a5607ff03e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ZMexUserActivity</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>ee0fe9faa6abeeba98953014a69baff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ZMexUserNumericalTag</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>180f78c1101ee83e0d77e49cd3988091</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>ZMexSeverityName</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>6d2d89e726154f691c44017381a4c4f8</anchor>
      <arglist>[ZMexSEVERITYenumLAST]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>ZMexSeverityLetter</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>80873e2d6e5bc6cfc3e404ddb44f2e90</anchor>
      <arglist>[ZMexSEVERITYenumLAST]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ZMexSeverityLimit</name>
      <anchorfile>namespacezmex.html</anchorfile>
      <anchor>15ad8bfb3ed7cdb22dfb1d5de31bd283</anchor>
      <arglist>[ZMexSEVERITYenumLAST]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>zmex::ZMerrnoList</name>
    <filename>classzmex_1_1ZMerrnoList.html</filename>
    <member kind="function">
      <type></type>
      <name>ZMerrnoList</name>
      <anchorfile>classzmex_1_1ZMerrnoList.html</anchorfile>
      <anchor>7ad6a7f7a89fcc2e264c843407a826cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ZMerrnoList</name>
      <anchorfile>classzmex_1_1ZMerrnoList.html</anchorfile>
      <anchor>7a06345d97ce07e222915eeccce11791</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>setMax</name>
      <anchorfile>classzmex_1_1ZMerrnoList.html</anchorfile>
      <anchor>33e8dcbeb7948e16afce016077350dba</anchor>
      <arglist>(unsigned int limit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classzmex_1_1ZMerrnoList.html</anchorfile>
      <anchor>8a5f7d2335e6a0bb23d3f54e970b8817</anchor>
      <arglist>(const ZMexception &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countSinceCleared</name>
      <anchorfile>classzmex_1_1ZMerrnoList.html</anchorfile>
      <anchor>78980d980d9bf4b76aeaf8a45139bc88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classzmex_1_1ZMerrnoList.html</anchorfile>
      <anchor>68acf4d45e378193289b2583b3330353</anchor>
      <arglist>(unsigned int k=0) const </arglist>
    </member>
    <member kind="function">
      <type>const ZMexception *</type>
      <name>get</name>
      <anchorfile>classzmex_1_1ZMerrnoList.html</anchorfile>
      <anchor>cbba20e032148818313a94eb82a993fe</anchor>
      <arglist>(unsigned int k=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classzmex_1_1ZMerrnoList.html</anchorfile>
      <anchor>4089e07a352850ebc26ad98c58214305</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classzmex_1_1ZMerrnoList.html</anchorfile>
      <anchor>992d73144554d006a6676c592c0f6e1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count</name>
      <anchorfile>classzmex_1_1ZMerrnoList.html</anchorfile>
      <anchor>9e2ba2e448794f8866d1514dc4ad5875</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classzmex_1_1ZMerrnoList.html</anchorfile>
      <anchor>cbf273a02a713a7742cde3d005aea79e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>zmex::ZMexception</name>
    <filename>classzmex_1_1ZMexception.html</filename>
    <member kind="function">
      <type></type>
      <name>ZMexception</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>ceae69542f440b8df1e9795cdacf5527</anchor>
      <arglist>(const std::string &amp;mesg, const ZMexSeverity howBad=ZMexSEVERITYenumLAST, int count=ZMexception::_classInfo.nextCount())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZMexception</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>ab355b56979b48030d912d0ee721bb62</anchor>
      <arglist>(const std::ostringstream &amp;msg, const ZMexSeverity howBad=ZMexSEVERITYenumLAST, int count=ZMexception::_classInfo.nextCount())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ZMexception</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>ceb7295b98d3b941f83b3d279b806527</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>location</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>87c783381b7567e954e3d95eb3d67064</anchor>
      <arglist>(int line, const std::string file) const </arglist>
    </member>
    <member kind="function">
      <type>ZMexSeverity</type>
      <name>severity</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>3b8eb08fa42c4afb168df48ef720f725</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>line</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>f05c72e509797abff1ece820ae5d2dd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>fileName</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>f7fe30838b99ef84cab710a28a9b0bb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>message</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>5f04a18aa9f36cbeaf953fc656de3372</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>02ae7ce59629d8093c3f1936e41f516d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>handlerUsed</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>15d54807b0022a9bc9fed43012ceb2df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wasThrown</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>344650d80e63137ec293f4fb563b9372</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handlerUsed</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>af53bbaa0d90aee68b3628252f742d32</anchor>
      <arglist>(const std::string handlerName) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wasThrown</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>31f7d4963ec6c91ec29e58de5ecca6e8</anchor>
      <arglist>(bool b) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>logMessage</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>45f4ae506fc5411b1bc7c3215b9ac4c8</anchor>
      <arglist>(const std::string optText=&quot;&quot;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>facility</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>335f328d36a56d99c2aee50c6f6769d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>be70963b370b715e9e0f6bda3edbd85c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>OKtoLog</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>f8c7ae8bf046e302df8a2558cd2c39a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexception *</type>
      <name>clone</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>911c0be148906d8cd8b3a5033f0943b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual zmex::ZMexClassInfo &amp;</type>
      <name>classInfo</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>ff7f3154e60d9960f8d38d86f2a3146c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexAction</type>
      <name>handleMe</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>1841516c68075888b5d3057893290257</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexLogResult</type>
      <name>logMe</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>3ace07121fbdb67179d3a3c685c87a70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDerivedFrom</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>7f9f699d0e372e9528d79f06b794fc89</anchor>
      <arglist>(const std::string name, const std::string facility) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>logObject</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>03526f6af8ee31ca503284b92508a11e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ZMexClassStaticMethods</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>93bd59e330bf4fa842ffaf29db3557ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::string</type>
      <name>message_</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>4d4706819cbbf2ba364ed3bab7d0a9b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>line_</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>4a2ba730615e1320dfc07ca43cb5493a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>sourceFileName_</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>148efaadf8c34c3981583bf787312f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ZMexSeverity</type>
      <name>mySeverity_</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>3d31104a4cce04eac0b70b98e5c0ef69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>myCount_</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>3f31ebe650773380fc159390bdfb3269</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>handlerUsed_</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>42e950ded1722b46d3e811fe7fcae6b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>wasThrown_</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>b1a07d3a38ca935b9050d64e889cd031</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ZMexClassInfo</type>
      <name>_classInfo</name>
      <anchorfile>classzmex_1_1ZMexception.html</anchorfile>
      <anchor>11c0e2db7234bf2fd9f6d23db1e7ffe8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>zmex::ZMexClassInfo</name>
    <filename>classzmex_1_1ZMexClassInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>ZMexClassInfo</name>
      <anchorfile>classzmex_1_1ZMexClassInfo.html</anchorfile>
      <anchor>1d50383f523d5b4755c8853de6c2f84e</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;facility, const ZMexSeverity s=ZMexERROR)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZMexClassInfo</name>
      <anchorfile>classzmex_1_1ZMexClassInfo.html</anchorfile>
      <anchor>bed152fee05b16061ee31eda01b3398f</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;facility, const ZMexSeverity s, const ZMexHandler &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZMexClassInfo</name>
      <anchorfile>classzmex_1_1ZMexClassInfo.html</anchorfile>
      <anchor>658abf320843d4db22b8024f8aa9f525</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;facility, const ZMexSeverity s, const ZMexHandler &amp;h, const ZMexLogger &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>name</name>
      <anchorfile>classzmex_1_1ZMexClassInfo.html</anchorfile>
      <anchor>5126965107d2264361d87338a4f89519</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>setName</name>
      <anchorfile>classzmex_1_1ZMexClassInfo.html</anchorfile>
      <anchor>a0ec40b0ba964387c2814e695a3561ec</anchor>
      <arglist>(const std::string &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>facility</name>
      <anchorfile>classzmex_1_1ZMexClassInfo.html</anchorfile>
      <anchor>0f234f6d48ca52da3dd50d532d7714ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>setFacility</name>
      <anchorfile>classzmex_1_1ZMexClassInfo.html</anchorfile>
      <anchor>8102b128cc5a5921425d03d3e79caff1</anchor>
      <arglist>(const std::string &amp;newFacility)</arglist>
    </member>
    <member kind="function">
      <type>ZMexSeverity</type>
      <name>severity</name>
      <anchorfile>classzmex_1_1ZMexClassInfo.html</anchorfile>
      <anchor>78a37c26592b7e69aee285b94da1ec9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ZMexSeverity</type>
      <name>setSeverity</name>
      <anchorfile>classzmex_1_1ZMexClassInfo.html</anchorfile>
      <anchor>04e818edd89cf3c128653f8affd9cecb</anchor>
      <arglist>(const ZMexSeverity &amp;newSeverity)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nextCount</name>
      <anchorfile>classzmex_1_1ZMexClassInfo.html</anchorfile>
      <anchor>9d871fe9dda9d67daba74ae1d4f8ad85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count</name>
      <anchorfile>classzmex_1_1ZMexClassInfo.html</anchorfile>
      <anchor>e2bb07b1cf06d161dcc693e99eb50d84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ZMexHandler</type>
      <name>getHandler</name>
      <anchorfile>classzmex_1_1ZMexClassInfo.html</anchorfile>
      <anchor>86d17ad4a9e744fcd3c60fba0f163f54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ZMexHandler</type>
      <name>setHandler</name>
      <anchorfile>classzmex_1_1ZMexClassInfo.html</anchorfile>
      <anchor>d25a4a2c636a69891d7f0b750cc23814</anchor>
      <arglist>(const ZMexHandler &amp;newHandler)</arglist>
    </member>
    <member kind="function">
      <type>ZMexLogger</type>
      <name>getLogger</name>
      <anchorfile>classzmex_1_1ZMexClassInfo.html</anchorfile>
      <anchor>254785d7e4271b119fb35d4a5b7b1fbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ZMexLogger</type>
      <name>setLogger</name>
      <anchorfile>classzmex_1_1ZMexClassInfo.html</anchorfile>
      <anchor>ed667dafac07e6e5be7d3f8186dd5352</anchor>
      <arglist>(const ZMexLogger &amp;newLogger)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logNMore</name>
      <anchorfile>classzmex_1_1ZMexClassInfo.html</anchorfile>
      <anchor>3986fbf9bea3808fb78bde25a4d951b7</anchor>
      <arglist>(const int N)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>OKtoLog</name>
      <anchorfile>classzmex_1_1ZMexClassInfo.html</anchorfile>
      <anchor>ad4668b1b549a2570a501fdb18f16859</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>filterMax</name>
      <anchorfile>classzmex_1_1ZMexClassInfo.html</anchorfile>
      <anchor>1a6de7c82d44255bf63161112631f279</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>zmex::ZMexHandlerBehavior</name>
    <filename>classzmex_1_1ZMexHandlerBehavior.html</filename>
    <member kind="function">
      <type></type>
      <name>ZMexHandlerBehavior</name>
      <anchorfile>classzmex_1_1ZMexHandlerBehavior.html</anchorfile>
      <anchor>0bbe40cb4335f66231b42ee8b17a1a03</anchor>
      <arglist>(const std::string name=&quot;ZMexHandlerBehavior&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ZMexHandlerBehavior</name>
      <anchorfile>classzmex_1_1ZMexHandlerBehavior.html</anchorfile>
      <anchor>e6e3b63f0c88ea64eec745fee3b13fe1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexHandlerBehavior *</type>
      <name>clone</name>
      <anchorfile>classzmex_1_1ZMexHandlerBehavior.html</anchorfile>
      <anchor>f94b8f3d9ef71fe2a4e6fd977673961c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>classzmex_1_1ZMexHandlerBehavior.html</anchorfile>
      <anchor>c061d1491cf95bdb4ff3e9e23e943e68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexAction</type>
      <name>takeCareOf</name>
      <anchorfile>classzmex_1_1ZMexHandlerBehavior.html</anchorfile>
      <anchor>14a786979ceb9007299f308b85ab10fc</anchor>
      <arglist>(const ZMexception &amp;x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ZMexAction</type>
      <name>standardHandling</name>
      <anchorfile>classzmex_1_1ZMexHandlerBehavior.html</anchorfile>
      <anchor>97ea9765f965dd9cd6b45ec8889524d8</anchor>
      <arglist>(const ZMexception &amp;x, bool willThrow)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>zmex::ZMexHandler</name>
    <filename>classzmex_1_1ZMexHandler.html</filename>
    <base>ZMhandleTo</base>
    <member kind="function">
      <type></type>
      <name>ZMexHandler</name>
      <anchorfile>classzmex_1_1ZMexHandler.html</anchorfile>
      <anchor>e1479bbee78c2a220dc7a922483a9bb7</anchor>
      <arglist>(const ZMexHandlerBehavior &amp;behaviorWanted)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ZMexHandler</name>
      <anchorfile>classzmex_1_1ZMexHandler.html</anchorfile>
      <anchor>e21b25d13c7e40b2db00c4d15267908c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classzmex_1_1ZMexHandler.html</anchorfile>
      <anchor>15bcedd7ba4a6597a0c5772fa78a941d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexAction</type>
      <name>takeCareOf</name>
      <anchorfile>classzmex_1_1ZMexHandler.html</anchorfile>
      <anchor>239305654cd69740e115410ed1d74570</anchor>
      <arglist>(const ZMexception &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setLogLimit</name>
      <anchorfile>classzmex_1_1ZMexHandler.html</anchorfile>
      <anchor>89fcb27495b1b31b605d6b7b98d096f0</anchor>
      <arglist>(ZMexSeverity s, int limit)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>zmex::ZMexThrowAlways</name>
    <filename>classzmex_1_1ZMexThrowAlways.html</filename>
    <base>zmex::ZMexHandlerBehavior</base>
    <member kind="function">
      <type></type>
      <name>ZMexThrowAlways</name>
      <anchorfile>classzmex_1_1ZMexThrowAlways.html</anchorfile>
      <anchor>57df740b373e7e019901b8ed83770522</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexThrowAlways *</type>
      <name>clone</name>
      <anchorfile>classzmex_1_1ZMexThrowAlways.html</anchorfile>
      <anchor>037d6c953f472c42c46041d0020f86ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexAction</type>
      <name>takeCareOf</name>
      <anchorfile>classzmex_1_1ZMexThrowAlways.html</anchorfile>
      <anchor>5b8876272ce13ba44ba4d188735d700c</anchor>
      <arglist>(const ZMexception &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>zmex::ZMexThrowErrors</name>
    <filename>classzmex_1_1ZMexThrowErrors.html</filename>
    <base>zmex::ZMexHandlerBehavior</base>
    <member kind="function">
      <type></type>
      <name>ZMexThrowErrors</name>
      <anchorfile>classzmex_1_1ZMexThrowErrors.html</anchorfile>
      <anchor>0ab3cdbb4408c2e990de99b3d62a83b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexThrowErrors *</type>
      <name>clone</name>
      <anchorfile>classzmex_1_1ZMexThrowErrors.html</anchorfile>
      <anchor>39d7e76044cf7f6e754d86437ebf782a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexAction</type>
      <name>takeCareOf</name>
      <anchorfile>classzmex_1_1ZMexThrowErrors.html</anchorfile>
      <anchor>9a44c423a9a62f1a6778b3e9e163ee89</anchor>
      <arglist>(const ZMexception &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>zmex::ZMexIgnoreAlways</name>
    <filename>classzmex_1_1ZMexIgnoreAlways.html</filename>
    <base>zmex::ZMexHandlerBehavior</base>
    <member kind="function">
      <type></type>
      <name>ZMexIgnoreAlways</name>
      <anchorfile>classzmex_1_1ZMexIgnoreAlways.html</anchorfile>
      <anchor>c5c23ea41fa064db6bfe0635fad1bf42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexIgnoreAlways *</type>
      <name>clone</name>
      <anchorfile>classzmex_1_1ZMexIgnoreAlways.html</anchorfile>
      <anchor>d3b32afb790f44c44444950c789dc50c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexAction</type>
      <name>takeCareOf</name>
      <anchorfile>classzmex_1_1ZMexIgnoreAlways.html</anchorfile>
      <anchor>951cd38be1d2c0cd65efa1ae41ed42fe</anchor>
      <arglist>(const ZMexception &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>zmex::ZMexIgnoreNextN</name>
    <filename>classzmex_1_1ZMexIgnoreNextN.html</filename>
    <base>zmex::ZMexHandlerBehavior</base>
    <member kind="function">
      <type></type>
      <name>ZMexIgnoreNextN</name>
      <anchorfile>classzmex_1_1ZMexIgnoreNextN.html</anchorfile>
      <anchor>9812605abd7d95faf2ca199f4a0e6401</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexIgnoreNextN *</type>
      <name>clone</name>
      <anchorfile>classzmex_1_1ZMexIgnoreNextN.html</anchorfile>
      <anchor>924209f56fb7f33ce3f7af649491d1b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexAction</type>
      <name>takeCareOf</name>
      <anchorfile>classzmex_1_1ZMexIgnoreNextN.html</anchorfile>
      <anchor>c9ce1cf82224cbd8f3eb1cb6e001021f</anchor>
      <arglist>(const ZMexception &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>zmex::ZMexHandleViaParent</name>
    <filename>classzmex_1_1ZMexHandleViaParent.html</filename>
    <base>zmex::ZMexHandlerBehavior</base>
    <member kind="function">
      <type></type>
      <name>ZMexHandleViaParent</name>
      <anchorfile>classzmex_1_1ZMexHandleViaParent.html</anchorfile>
      <anchor>d3c5ffd4afacfc9c9e73e44738a8cbc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexHandleViaParent *</type>
      <name>clone</name>
      <anchorfile>classzmex_1_1ZMexHandleViaParent.html</anchorfile>
      <anchor>bdc4823d9577d1963bab41b9baeb1038</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexAction</type>
      <name>takeCareOf</name>
      <anchorfile>classzmex_1_1ZMexHandleViaParent.html</anchorfile>
      <anchor>6a7c40711e25262588ea1f3105b27fde</anchor>
      <arglist>(const ZMexception &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>zmex::ZMexLogBehavior</name>
    <filename>classzmex_1_1ZMexLogBehavior.html</filename>
    <member kind="function">
      <type></type>
      <name>ZMexLogBehavior</name>
      <anchorfile>classzmex_1_1ZMexLogBehavior.html</anchorfile>
      <anchor>2fb280babcb41ec73d5df1d31606b574</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ZMexLogBehavior</name>
      <anchorfile>classzmex_1_1ZMexLogBehavior.html</anchorfile>
      <anchor>5a3b4eb75ee6eafff168e1a93ec6f983</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexLogBehavior *</type>
      <name>clone</name>
      <anchorfile>classzmex_1_1ZMexLogBehavior.html</anchorfile>
      <anchor>ce1704bbdbe9d5ad74a02a7212368111</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexLogResult</type>
      <name>emit</name>
      <anchorfile>classzmex_1_1ZMexLogBehavior.html</anchorfile>
      <anchor>aca13b3940c2fe662645ac9c60c29cb5</anchor>
      <arglist>(const ZMexception &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexLogResult</type>
      <name>emit</name>
      <anchorfile>classzmex_1_1ZMexLogBehavior.html</anchorfile>
      <anchor>99685852118c539b06b7452bc2c125c7</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTimeDesired</name>
      <anchorfile>classzmex_1_1ZMexLogBehavior.html</anchorfile>
      <anchor>e9608e8ff66d99e96d79c356cde96d33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFilePathDesired</name>
      <anchorfile>classzmex_1_1ZMexLogBehavior.html</anchorfile>
      <anchor>14b94d2edbb3157e5478c9f21155bcda</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>zmex::ZMexLogNever</name>
    <filename>classzmex_1_1ZMexLogNever.html</filename>
    <base>zmex::ZMexLogBehavior</base>
    <member kind="function">
      <type></type>
      <name>ZMexLogNever</name>
      <anchorfile>classzmex_1_1ZMexLogNever.html</anchorfile>
      <anchor>9fd2d51df032e66ff8aa7da637740948</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ZMexLogNever</name>
      <anchorfile>classzmex_1_1ZMexLogNever.html</anchorfile>
      <anchor>d04a52dbddbedc60dc24912a91ec96c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexLogResult</type>
      <name>emit</name>
      <anchorfile>classzmex_1_1ZMexLogNever.html</anchorfile>
      <anchor>4cda54ba52ad7ee85aff0b265fca347e</anchor>
      <arglist>(const ZMexception &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexLogNever *</type>
      <name>clone</name>
      <anchorfile>classzmex_1_1ZMexLogNever.html</anchorfile>
      <anchor>5ac927beeeaa1074d5faed1c79a8d462</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexLogResult</type>
      <name>emit</name>
      <anchorfile>classzmex_1_1ZMexLogNever.html</anchorfile>
      <anchor>bae2ad78b5989e7e9a10fd693fd9964f</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>zmex::ZMexLogAlways</name>
    <filename>classzmex_1_1ZMexLogAlways.html</filename>
    <base>zmex::ZMexLogBehavior</base>
    <member kind="function">
      <type></type>
      <name>ZMexLogAlways</name>
      <anchorfile>classzmex_1_1ZMexLogAlways.html</anchorfile>
      <anchor>f3c07ccf9cf6005b19e8ff217f00d8cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZMexLogAlways</name>
      <anchorfile>classzmex_1_1ZMexLogAlways.html</anchorfile>
      <anchor>e03d14a7dde1144a918de380ac123d3c</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ZMexLogAlways</name>
      <anchorfile>classzmex_1_1ZMexLogAlways.html</anchorfile>
      <anchor>3cfb2d7ec7867783c220f7214efaee64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexLogAlways *</type>
      <name>clone</name>
      <anchorfile>classzmex_1_1ZMexLogAlways.html</anchorfile>
      <anchor>f6dfb416ec00b2aaee142ea33aad4ba7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexLogResult</type>
      <name>emit</name>
      <anchorfile>classzmex_1_1ZMexLogAlways.html</anchorfile>
      <anchor>970c3883b45bc98adde437ff6f167dbc</anchor>
      <arglist>(const ZMexception &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexLogResult</type>
      <name>emit</name>
      <anchorfile>classzmex_1_1ZMexLogAlways.html</anchorfile>
      <anchor>ee9c2a86b96277ecd25276b820f951f1</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>zmex::ZMexLogTwice</name>
    <filename>classzmex_1_1ZMexLogTwice.html</filename>
    <base>zmex::ZMexLogBehavior</base>
    <member kind="function">
      <type></type>
      <name>ZMexLogTwice</name>
      <anchorfile>classzmex_1_1ZMexLogTwice.html</anchorfile>
      <anchor>6a8aae4f3807d03ad05d44c68f33f9e2</anchor>
      <arglist>(std::ostream &amp;os1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZMexLogTwice</name>
      <anchorfile>classzmex_1_1ZMexLogTwice.html</anchorfile>
      <anchor>b6dcb658e7d28a6f10d1a0ca27bce6ae</anchor>
      <arglist>(std::ostream &amp;os1, std::ostream &amp;os2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ZMexLogTwice</name>
      <anchorfile>classzmex_1_1ZMexLogTwice.html</anchorfile>
      <anchor>628f0197952ca9d022d619589d20334f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexLogTwice *</type>
      <name>clone</name>
      <anchorfile>classzmex_1_1ZMexLogTwice.html</anchorfile>
      <anchor>a9078c3ef4ba227442d744c8dabfbdb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexLogResult</type>
      <name>emit</name>
      <anchorfile>classzmex_1_1ZMexLogTwice.html</anchorfile>
      <anchor>03c9fd51a0372e0fa21d6405f7319ac2</anchor>
      <arglist>(const ZMexception &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexLogResult</type>
      <name>emit</name>
      <anchorfile>classzmex_1_1ZMexLogTwice.html</anchorfile>
      <anchor>dd48edf5f9ed3e0c0c43bd195bb98aa5</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>zmex::ZMexLogViaParent</name>
    <filename>classzmex_1_1ZMexLogViaParent.html</filename>
    <base>zmex::ZMexLogBehavior</base>
    <member kind="function">
      <type></type>
      <name>ZMexLogViaParent</name>
      <anchorfile>classzmex_1_1ZMexLogViaParent.html</anchorfile>
      <anchor>ec2911d2ee9350fa6595d1bfdaf5a163</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ZMexLogViaParent</name>
      <anchorfile>classzmex_1_1ZMexLogViaParent.html</anchorfile>
      <anchor>f555ee57538b0b3344de5613a8e0005a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexLogViaParent *</type>
      <name>clone</name>
      <anchorfile>classzmex_1_1ZMexLogViaParent.html</anchorfile>
      <anchor>e14a363e96c84f2cd0d95f138815903b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexLogResult</type>
      <name>emit</name>
      <anchorfile>classzmex_1_1ZMexLogViaParent.html</anchorfile>
      <anchor>9efec90167faae9b023754a56672bdb4</anchor>
      <arglist>(const ZMexception &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexLogResult</type>
      <name>emit</name>
      <anchorfile>classzmex_1_1ZMexLogViaParent.html</anchorfile>
      <anchor>57b397df3a6642755f2ac579531b6744</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>zmex::ZMexValidationStyle</name>
    <filename>classzmex_1_1ZMexValidationStyle.html</filename>
    <base>zmex::ZMexLogBehavior</base>
    <member kind="function">
      <type></type>
      <name>ZMexValidationStyle</name>
      <anchorfile>classzmex_1_1ZMexValidationStyle.html</anchorfile>
      <anchor>1ef2fb98c4501bb0e72ef38ba835fa52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZMexValidationStyle</name>
      <anchorfile>classzmex_1_1ZMexValidationStyle.html</anchorfile>
      <anchor>e16e2d7c27abf3797b6b9467a5e90e3c</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ZMexValidationStyle</name>
      <anchorfile>classzmex_1_1ZMexValidationStyle.html</anchorfile>
      <anchor>1d5d98bddaca522e6f0ba9e84fd0ea27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexValidationStyle *</type>
      <name>clone</name>
      <anchorfile>classzmex_1_1ZMexValidationStyle.html</anchorfile>
      <anchor>70161a588ee080f54c3061d528bb3ea0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexLogResult</type>
      <name>emit</name>
      <anchorfile>classzmex_1_1ZMexValidationStyle.html</anchorfile>
      <anchor>6865a912506b842e46e79c8fc4dfdf46</anchor>
      <arglist>(const ZMexception &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZMexLogResult</type>
      <name>emit</name>
      <anchorfile>classzmex_1_1ZMexValidationStyle.html</anchorfile>
      <anchor>74edbb969f6aabe0c3787b164667b7be</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTimeDesired</name>
      <anchorfile>classzmex_1_1ZMexValidationStyle.html</anchorfile>
      <anchor>744e460132faf60a8fa0acc6a2584a78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFilePathDesired</name>
      <anchorfile>classzmex_1_1ZMexValidationStyle.html</anchorfile>
      <anchor>222c0498573f6390fcedaf3546d78502</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>zmex::ZMexLogger</name>
    <filename>classzmex_1_1ZMexLogger.html</filename>
    <base>ZMhandleTo</base>
    <member kind="function">
      <type></type>
      <name>ZMexLogger</name>
      <anchorfile>classzmex_1_1ZMexLogger.html</anchorfile>
      <anchor>f6de4d664e97b8bc848d834aa52f946a</anchor>
      <arglist>(const ZMexLogBehavior &amp;desiredBehavior)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ZMexLogger</name>
      <anchorfile>classzmex_1_1ZMexLogger.html</anchorfile>
      <anchor>07ec63f88ba21717afebbaa0a09ce509</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ZMexLogResult</type>
      <name>emit</name>
      <anchorfile>classzmex_1_1ZMexLogger.html</anchorfile>
      <anchor>e91c877d273963863663390f7984f0eb</anchor>
      <arglist>(const ZMexception &amp;exc)</arglist>
    </member>
    <member kind="function">
      <type>ZMexLogResult</type>
      <name>emit</name>
      <anchorfile>classzmex_1_1ZMexLogger.html</anchorfile>
      <anchor>1cfa0722d21e02b14deebbd9224ee71f</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>ZMexLogBehavior *</type>
      <name>control</name>
      <anchorfile>classzmex_1_1ZMexLogger.html</anchorfile>
      <anchor>ffbd8814abd9b85264cc962fc6f6aab3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>zmpv</name>
    <filename>namespacezmpv.html</filename>
    <member kind="typedef">
      <type>CLHEP::HepAxisAngle</type>
      <name>AxisAngle</name>
      <anchorfile>namespacezmpv.html</anchorfile>
      <anchor>64d94ed6c14d4ca64404775a50564e4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CLHEP::HepEulerAngles</type>
      <name>EulerAngles</name>
      <anchorfile>namespacezmpv.html</anchorfile>
      <anchor>b1be50579561768ba547cb14668f37d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
</tagfile>
